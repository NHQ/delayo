;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
var inherits = require('inherits')
var emitter = require('events').EventEmitter
var fs = require('fs');
var appendCSS = require('../uxer/appendCSS');

var css = "html, body, div, p, pre, img, audio, video, h1, h2, h3, h4, form, fieldset, label, legend, span\n{\n-webkit-box-sizing: border-box;\nbox-sizing: border-box;\nmargin:0;\npadding:0;\n-webkit-margin-start: 2px;\n-webkit-margin-end: 2px;\n-webkit-padding-before: 0.35em;\n-webkit-padding-start: 0.75em;\n-webkit-padding-end: 0.75em;\n-webkit-padding-after: 0.625em;\nfont-family:monospace;\n}\n.sourceCapture{\n  width: 85%;\n  height: 85%;\n  border-width: 16px;\n}\n\n.sourceCapOpts{\n  float:left;\n  width: 33%;\n  height: 100%;\n  border-right:16px solid OrangeRed;\n  -webkit-box-sizing: border-box;\n\n}\n\n.sourceCapOptsLabel {\n  height: 25%;\n}\n\n.sourceCapMode{\n  float: right;\n  width:66%;\n  height:100%;\n  -webkit-box-sizing: border-box;\n  overflow:hidden\n}";
var png = "iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowQ0JGMDc5OTdCMDIxMUUyOUMwM0YzNzJBNzhGMTlFMSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDowQ0JGMDc5QTdCMDIxMUUyOUMwM0YzNzJBNzhGMTlFMSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjBDQkYwNzk3N0IwMjExRTI5QzAzRjM3MkE3OEYxOUUxIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjBDQkYwNzk4N0IwMjExRTI5QzAzRjM3MkE3OEYxOUUxIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+eatsnwAAAmRJREFUeNq8lk1IVFEUx58z5pQKOjpg4CIX6dA0CzFaiTmGEoWUGy2k2uQiN0K4kYgKP0AKJBJXQZsWo5K4kWbAwo/aJgNBEJnooigpP9ACEa3/jfNiGs5977w3Mx74MXA/3vvNvfede3LCZ1oMiwiCVhABIRAAe+AbeAemwShYNVxGjkbgOHgILqkxNs/YAU/BXfDdqYCHaeugf9cieLkKH+ikOWfTFbgHnoDDLlbzKIiBi24FboD7RnqRB6KgWjohl36PgWGLcZvgJVgBXlBFy+1jxuaDSXAS/JIK9IMjTL868QN0ILeZJVftV5l5FaAb9Em2QJ34ds3LL9O52Gb6v4JrFtvWRVtiK3BF8zWoVZkQbGMvHb7UUDmjSSIQYdq3aHkl8Rvc1vQ1SARCTLvKcD8dnP4EWGbaT0gESpn2JRef4CLTViIR2GfavS4EuDm7EgEuf4dcZFRuzifJxATTrg5mmQMB3fhZicArzQXzwEH6HdTkkZhEIEpXampcB7cEmVRdXqeZvrikTvBQcTGi6R8CY1SY/FdHgFowR6JcPHNyGQ3QgwLMmDbiA/gIDoEwKBdsjVhgjfL6lMUnGGRWwioeg/fgrbQeiNPNtmtkJoopo55yUhGpAvMc+JIhCb+dBHcLzoBKcAds2LxgnwoVtX03Nde2KVHjpCo2QxUpzaCeMl0RVTkqw72h7/xz0vg68AIUMs9aB41gwYmAm6gjsQKJhMfIfLwG5zXXuZ+2rCabAhKJf2ciWwJ2EiWmRDYFJBLPsy1gSlzQSIwfhICKeUbiEeg5KIFkiR9Ucf+96v8IMAAR3HjwBE//uQAAAABJRU5ErkJggg==";

var loadSrc = require('./loadSrc')

appendCSS(css, 'synthFM')
 
var app = new emitter();
//inherits(app, emitter);

app.master = window.master = new webkitAudioContext();
app.sources = []
app.synths = []
app.user = {}
app.micLine = null
app.loadSrc = loadSrc(app)

app.loadSrc(function(err, src){
    console.log(err, src)
})
 
app.on('error', function(err){
    console.log(err)
})

},{"../uxer/appendCSS":9,"./loadSrc":3,"events":30,"fs":31,"inherits":23}],2:[function(require,module,exports){
module.exports = function(css, id){
    var es = document.getElementById(id);

    if(es){
	return false
//	es.parentNode.insertBefore(makeStyle(css), es.nextSibling)
    }
    else{
	var styleSheet = makeStyle(css, id)
	document.head.insertBefore(styleSheet, document.head.childNodes[0]);
	return styleSheet
    }

}


function makeStyle(str, id){
    var style = document.createElement('style');
    style.id = id || '';
    style.textContent = str;
    return style
}

},{}],3:[function(require,module,exports){
var sourceSelect = require('./sourceCap');
var sourceEvents = require('./sourceEvent');
var overlay = require('./overlay');

module.exports = function(app){

	// this should initialize the source capture view
	// allowing user to select from source options
	// src is an object
	// when the src loads, or starts loading,
	// the cb will be called with (err, src)
	// and the src will appended to app.sources
	// and the previous view will be restored 

    var sourceSelectElement = sourceSelect(sourceEvents(app));
//    var overlay = overlay
//    var app = app

    return function(cb){
	
	var oley = overlay(sourceSelectElement)

	oley.emit('show');

	app.once('sourceCap', function(err, src){
	    oley.emit('remove');
	    if(src) app.sources.push(src)
	    if(err) app.emit('error', err)
	    app.removeAllListeners('cancel')
	    cb(err, src)
	})

	app.once('cancel', function(){
	    app.removeAllListeners('sourceCap')
	    oley.emit('remove');
	})
    }
}

},{"./overlay":4,"./sourceCap":5,"./sourceEvent":6}],4:[function(require,module,exports){
var ee = require('events').EventEmitter
var fs = require('fs')
var html = require('hyperscript')
var center = require('../uxer/center')
var css = ".overlay {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #1d1d1d;\n  z-index: 1111111111;\n  border: none;\n  padding: 0;\n  margin: 0;  \n}\n";
var appendCSS = require('./appendCSS')

appendCSS(css)

var overlay = html('div.overlay');

module.exports = function(el){

    var em = new ee();

    em.on('show', function(){

	document.body.appendChild(overlay)

	overlay.appendChild(el);

	center(el)
	
    })

    em.on('remove', function(){
	
	document.body.removeChild(overlay)

	overlay.removeChild(el)

    })

    return em

}

},{"../uxer/center":10,"./appendCSS":2,"events":30,"fs":31,"hyperscript":16}],5:[function(require,module,exports){
var fs = require('fs');
var css = ".uxer-flat-fieldset {\n        color:OrangeRed;\n\tborder-radius:5px;\n\tpadding:0;\n\tmargin:0;\n\twidth:100%;\n\theight:100%;\n\tborder: 1px solid OrangeRed;\n\tborder-radius: 9px;\n}\n\n.uxer-flatfield-legend {\n        font-weight: 900;\n\tpadding:0 10px;\n\tfont-size:16px;\n\tline-height:16px;\n\tfont-style: italic;\n\ttext-align:center;\n}\n\n.uxer-flatfield-label {\n\tdisplay:block;\n\tborder-bottom: 1px solid rgba(200, 66, 0, .2);\n}\n\n.uxer-flatfield-label:hover, p.uxer-flatfield-radio-name:hover {\n\tcursor:pointer;\n}\n\n.uxer-flatfield-input[type=checkbox], .uxer-flatfield-input[type=radio],.uxer-flatfield-input[type=file], .uxer-flatfield-input[type=button]   {\n\tdisplay:none;\n}\n\n.uxer-flatfield-input[type=text], .uxer-flatfield-input[type=number], .uxer-flatfield-input[type=url]{\n    width: 100%;\n    color: OrangeRed;\n    font-size:16px;\n    font-weight:500;\n    padding:3px 0;\n    text-decoration:uppercase;\n    line-height:22px;\n    font-style: italic;\n    margin: 5px 0;\n    border:1px solid rgba(210, 66, 0, 0.2);\n    text-indent: 3px;\n}\n\n.uxer-flatfield-input[type=text]:focus, .uxer-flatfield-input[type=number]:focus, .uxer-flatfield-input[type=url]:focus{\n   outline:1px solid rgba(210, 66, 0, 0.2)\n}\n\n::-webkit-input-placeholder{\n    color: OrangeRed;\n    opacity: .38;\n    font-weight:900;\n}\n\ninput:focus::-webkit-input-placeholder{\n    color: rgba(0,0,0,0);\n}\n\n.uxer-flat-button{\n  min-width:40%;\n  font-size: 16px;\n  color: inherit;\n  outline:none;\n  border: 1px solid OrangeRed;\n  background: inherit;\n\n  border-radius: 3px;\n}\n.uxer-flat-button:active{\n  background: OrangeRed;\n  color: #eee;\n}\n.uxer-flatfield-radio-value, .uxer-flatfield-file-value {\n\tfont-size:16px;\n\tfont-weight:900;\n\tline-height:22px;\n}\n\n.uxer-flatfield-input[type=radio]:checked  + .uxer-flatfield-radio, .uxer-flatfield-input[type=radio]:checked ~ label{\n\tbackground:LimeGreen;\n}\n\n.uxer-flatfield-radio {\n\twidth:16px;\n\theight:16px;\n\tbackground:inherit;\n\tfloat:left;\n\tborder-radius:50%;\n\tborder:2px solid OrangeRed;\n}\n\n\n\n\n";
var html = require('hyperscript');
var touchdown = require('touchdown');
var appendCSS = require('../uxer/appendCSS');
var hover = require('mouse-around')

module.exports = function(sourceEvents){

    var change = sourceEvents.change;
    var click = sourceEvents.click;
    
    appendCSS(css, 'uxer-flatfield')

    var _fieldset = html('fieldset.uxer-flat-fieldset.sourceCapture');
    var _legend =  html('legend.uxer-flatfield-legend', '+ ADD AUDIO SOURCE +')

    _fieldset.appendChild(_legend);

    var options = html('div.sourceCapOpts')
    _fieldset.appendChild(options);
  
    var mode = html('div.sourceCapMode')
    _fieldset.appendChild(mode);
 
    var samplesLabel = html('label.uxer-flatfield-label.sourceCapOptsLabel');
    var samples = html('button.uxer-flat-button', 
		       {textContent: 'LOAD SAMPLES',
			name: 'samplebank',
			ontouchdown: function(e){click.call(samples, e)}
		       });

    hover(_fieldset, function(evt, node, pos, start, stop){ })
    touchdown.start(samples);
    samplesLabel.appendChild(samples);
    options.appendChild(samplesLabel);


    var ytextLabel = html('div.uxer-flatfield-label.sourceCapOptsLabel');
    var ytext = html('input.uxer-flatfield-input', 
		     {value: 'http://www.youtube.com/watch?v=1OixqPThDNE', 
		      placeholder: 'PASTE YOUTUBE LINK',
		      type: 'url',
		      name: 'sourceURL'
		     });
    var ytextModeButton = html('button.uxer-flat-button',
			   {textContent: 'USE INTERNET AUDIO', 
			    ontouchdown: function(e){e.preventDefault();click.call(ytext, e)}
			    });

    var ytextModeInfo = html('p.infoHelp', 
      [ 'You can load audio from almost anywhere on the internet: youtube, vimeo, soundcloud, bandcamp, synth.fm, or a direct link to an audio or video file. Soon you\'ll be able to search those same sources for multiple results, and even capture live ogg/mp3 streams.' 
      , html('br')
      , html('br')
      , html('h3', 'Examples:')
      , html('ul', [
	  html('li', 'http://www.youtube.com/watch?v=1OixqPThDNE'),
	  html('li', 'http://synth.fm/UdP4RuL3z')
      ])
      , html('h3', 'Supported audio File Types:')
      , html('ul', ['mp3', 'wav', 'ogg', 'aac'].map(function(k){
	    return html('li', k)
	}))
      ]) 

    var fileModeInfo = html('p.infoHelp', [
	html('h3', 'Load one or more files from your computer'),
	html('h3', 'Supported File Types:'),
	html('ul', ['mp3', 'wav', 'ogg', 'aac'].map(function(k){
	    return html('li', k)
	}))
    ]) 

    var ytextMode = html('div#sourceURL');
    var fileMode = html('div#soureceFile');
    var micLineMode = html('div#sourceMicLine');
    var sampleMode = html('div#sourceSample');

    mode.appendChild(ytextMode);
    mode.appendChild(fileMode);
    mode.appendChild(micLineMode);
    mode.appendChild(sampleMode);

    fileMode.appendChild(fileModeInfo);

    ytextLabel.appendChild(ytext);
    ytextMode.appendChild(ytextLabel)
    ytextMode.appendChild(ytextModeInfo)

    var ytextOptionLabel = html('div.uxer-flatfield-label.sourceCapOptsLabel');
    var ytextOptionButton = html('button.uxer-flat-button',
			   {textContent: 'USE INTERNET AUDIO', 
			    ontouchdown: function(e){e.preventDefault();click.call(ytext, e)}
			    });

//    touchdown.start(ytextButton);
//    ytextLabel.appendChild(ytext);
    ytextOptionLabel.appendChild(ytextOptionButton);
    options.appendChild(ytextOptionLabel);

    var fileCapLabel = html('label.uxer-flatfield-label.sourceCapOptsLabel');
    var fileCap = html('input.uxer-flatfield-input', {type: 'file', name: 'file', onchange: change});
    var fileCapButton = html('button.uxer-flat-button',
			   {textContent: 'OPEN A LOCAL AUDIO FILE', 
			    name: 'file'
			    });


    touchdown.start(fileCapButton);
    fileCapLabel.appendChild(fileCap);
    fileCapLabel.appendChild(fileCapButton);
    options.appendChild(fileCapLabel);


    var miclineLabel = html('label.uxer-flatfield-label.sourceCapOptsLabel');
    var micline = html('button.uxer-flat-button', 
		       {textContent: 'CAPTURE MIC / LINE-IN',
			name: 'line', 
			ontouchdown: function(e){click.call(micline, e)}
		       });


    touchdown.start(micline);
    miclineLabel.appendChild(micline);
    options.appendChild(miclineLabel);

    var playbuttonLabel = html('label.uxer-flatfield-label');
    var playbutton = html('button.uxer-flat-button', 
		       {textContent: 'PLAY',
			name: 'play',
			ontouchdown: function(e){click.call(playbutton, e)}
		       });

 //   touchdown.start(playbutton);
 //   playbuttonLabel.appendChild(playbutton);
 //   _fieldset.appendChild(playbuttonLabel);
    
    document.body.appendChild(_fieldset)

    var fset = _fieldset;

    return _fieldset;

}

function makeStyle(str){
  var style = document.createElement('style');
  style.id = 'uxer-flatfield-style';
  style.textContent = str;
  return style
}

function preventDefault(e){e.preventDefault()};

},{"../uxer/appendCSS":9,"fs":31,"hyperscript":16,"mouse-around":24,"touchdown":26}],6:[function(require,module,exports){
var url = require('url');
var ssn = require('./synth-server-node');
var hyperquest = require('hyperquest');

module.exports = function(app){

    var context = app.master;

    return {change: change, click: click}

    function change(e){
	if(this.name == 'url') return
	if(this.name == 'file'){

	    if(this.files[0].size > 1920000){
		var audio = new Audio();
		audio.src = window.URL.createObjectURL(this.files[0]);
		audio.addEventListener('canplay', function(){
		    var source = context.createMediaElementSource(audio);
		    app.emit('sourceCap', null, source)
		}, true)
	    }
	    else{
		var reader = new FileReader();
		reader.onload = function(e){
		    var buffer = e.target.result;
		    var source = context.createBufferSource();
		    try{
			var buf = context.createBuffer(buffer, true);
			source.buffer = buf;
			app.emit('sourceCap', null, source)
		    } 
		    catch(e){
			var err = new Error('Error: Probably an unsupported file type.')
			app.emit('sourceCap', err, null)
			// and this is where you would decode it with Aurora ...
		    }
		};
		try{
		    reader.readAsArrayBuffer(this.files[0]);
		} 
		catch(e){
		    var err = new Error('Error: Probably an unsupported file type.')
		    app.emit('sourceCap', err, null)
		}
	    }
	}
    }

    function click(e){

	if(this.name == 'url'){
	    e.preventDefault();
	    var uri = this.value;
	    if(uri.length){
		var parsed = url.parse(uri, true);
		
		if(((parsed.slashes || parsed.protocol) && (parsed.hostname.match('youtube.com'))) || 
		   (parsed.pathname && parsed.pathname.match('youtube.com'))) {

		    if(Modernizr.touch){

			var source = ssn(master, uri, function(err, source){
			    app.emit('sourceCap', err, source)
			});

		    }

		    else{

			// this is not gonna happen...
			var id = parsed.hostname === 'youtu.be' 
			    ? parsed.pathname.slice(1) : parsed.query.v;

			hyperquest('http://localhost:11002/get_info?'+uri, function(err, res){
			    res.on('data', function(data){

				var URI = data;
				var video = document.createElement('video');
				video.src = URI;
				video.addEventListener('loadstart', function(){
				    var source = context.createMediaElementSource(video);
				    app.emit('sourceCap', null, source)
				});

			    })
			})

		    }
		}
		else console.log('nup');
	    }
	}
	if(this.name == 'file'){
	}
	if(this.name == 'line'){ // getUserMedia
	    navigator.webkitGetUserMedia({audio: true, video: false}, function(stream){
		var source = context.createMediaStreamSource(stream);
		app.emit('sourceCap', null, source);
	    })
	}
    }


    function makeStyle(str){
	var style = document.createElement('style');
	style.id = 'uxer-flatfield-style';
	style.textContent = str;
	return style
    }

    function preventDefault(e){e.preventDefault()};
}

},{"./synth-server-node":8,"hyperquest":13,"url":35}],7:[function(require,module,exports){
module.exports = floatConcat

function floatConcat(first, second)
{

    if(!first) return second;

    var firstLength = first.length;
    var result = new Float32Array(firstLength + second.length);

    result.set(first);
    result.set(second, firstLength);

    return result;
}

},{}],8:[function(require,module,exports){
(function(){webkitAudioContext.prototype.createScriptProcessor = webkitAudioContext.prototype.createJavaScriptNode
if(!window.URL) window.URL = {createObjectURL: window.webkitURL.createObjectURL}

var fs = require('fs');
var enslave = require('work-slave');
var buffers = require('buffers');

var floatConcat = require('./floatConcat.js');

var worker = "this.onmessage = function(evt){\n\n    var self = this;\n    var evt = evt;\n    var sampleRate = evt.data.sampleRate;\n    var resamplers = [];\n    var id = evt.data.id;\n    var chans = 1;\n\n    var player = AV.Asset.fromURL('http://10.0.0.3:11002/youtube?' + evt.data.uri);\n\n    player.on('format', function(d){\n\n\n\td.sourceLength = player.source.length;\n\tchans = d.channelsPerFrame;\n\n\tvar bufferSize = Math.ceil(4096 / (sampleRate / d.sampleRate));\n\n\tfor(var x = 0; x < chans; x++){\n\t    resamplers[x] = new Resampler(d.sampleRate, sampleRate, 1, bufferSize);\n\t}\n\t\n\tself.postMessage({type: 'meta', data: d});\n\n    });\n\n    player.on('meta', function(d){\n\tself.postMessage({id: id, type: 'meta', data: d})\n    });\n\n    player.on('progress', function(evt){\n\tself.postMessagae({id: id, type: 'progress', data: evt})\n    });\n\n    player.on('data', function(bufArray){\n        for(x in resamplers){\n\t    bufArray[x] = resamplers[x].resampler(bufArray[x])\n\t}\n\tself.postMessage({id: id, buffer: bufArray})\n    });\n\n    player.on('end', function(){\n\tself.postMessage({id: id, type: 'end'})\n    });\n\n    player.start();\n}\n\n";
var aurora = "/*\n * This resampler is from XAudioJS: https://github.com/grantgalitz/XAudioJS\n * Planned to be replaced with src.js, eventually: https://github.com/jussi-kalliokoski/src.js\n */\n\n//JavaScript Audio Resampler (c) 2011 - Grant Galitz\nfunction Resampler(fromSampleRate, toSampleRate, channels, outputBufferSize, noReturn) {\n\tthis.fromSampleRate = fromSampleRate;\n\tthis.toSampleRate = toSampleRate;\n\tthis.channels = channels | 0;\n\tthis.outputBufferSize = outputBufferSize;\n\tthis.noReturn = !!noReturn;\n\tthis.initialize();\n}\n\nResampler.prototype.initialize = function () {\n\t//Perform some checks:\n\tif (this.fromSampleRate > 0 && this.toSampleRate > 0 && this.channels > 0) {\n\t\tif (this.fromSampleRate == this.toSampleRate) {\n\t\t\t//Setup a resampler bypass:\n\t\t\tthis.resampler = this.bypassResampler;\t\t//Resampler just returns what was passed through.\n\t\t\tthis.ratioWeight = 1;\n\t\t}\n\t\telse {\n\t\t\tif (this.fromSampleRate < this.toSampleRate) {\n\t\t\t\t/*\n\t\t\t\t\tUse generic linear interpolation if upsampling,\n\t\t\t\t\tas linear interpolation produces a gradient that we want\n\t\t\t\t\tand works fine with two input sample points per output in this case.\n\t\t\t\t*/\n\t\t\t\tthis.compileLinearInterpolationFunction();\n\t\t\t\tthis.lastWeight = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/*\n\t\t\t\t\tCustom resampler I wrote that doesn't skip samples\n\t\t\t\t\tlike standard linear interpolation in high downsampling.\n\t\t\t\t\tThis is more accurate than linear interpolation on downsampling.\n\t\t\t\t*/\n\t\t\t\tthis.compileMultiTapFunction();\n\t\t\t\tthis.tailExists = false;\n\t\t\t\tthis.lastWeight = 0;\n\t\t\t}\n\t\t\tthis.ratioWeight = this.fromSampleRate / this.toSampleRate;\n\t\t\tthis.initializeBuffers();\n\t\t}\n\t}\n\telse {\n\t\tthrow(new Error(\"Invalid settings specified for the resampler.\"));\n\t}\n};\n\nResampler.prototype.compileLinearInterpolationFunction = function () {\n\tvar toCompile = \"var bufferLength = buffer.length;\\\n\tvar outLength = this.outputBufferSize;\\\n\tif ((bufferLength % \" + this.channels + \") == 0) {\\\n\t\tif (bufferLength > 0) {\\\n\t\t\tvar ratioWeight = this.ratioWeight;\\\n\t\t\tvar weight = this.lastWeight;\\\n\t\t\tvar firstWeight = 0;\\\n\t\t\tvar secondWeight = 0;\\\n\t\t\tvar sourceOffset = 0;\\\n\t\t\tvar outputOffset = 0;\\\n\t\t\tvar outputBuffer = this.outputBuffer;\\\n\t\t\tfor (; weight < 1; weight += ratioWeight) {\\\n\t\t\t\tsecondWeight = weight % 1;\\\n\t\t\t\tfirstWeight = 1 - secondWeight;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = (this.lastOutput[\" + channel + \"] * firstWeight) + (buffer[\" + channel + \"] * secondWeight);\";\n\t}\n\ttoCompile += \"}\\\n\t\t\tweight -= 1;\\\n\t\t\tfor (bufferLength -= \" + this.channels + \", sourceOffset = Math.floor(weight) * \" + this.channels + \"; outputOffset < outLength && sourceOffset < bufferLength;) {\\\n\t\t\t\tsecondWeight = weight % 1;\\\n\t\t\t\tfirstWeight = 1 - secondWeight;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = (buffer[sourceOffset\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * firstWeight) + (buffer[sourceOffset + \" + (this.channels + channel) + \"] * secondWeight);\";\n\t}\n\ttoCompile += \"weight += ratioWeight;\\\n\t\t\t\tsourceOffset = Math.floor(weight) * \" + this.channels + \";\\\n\t\t\t}\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"this.lastOutput[\" + channel + \"] = buffer[sourceOffset++];\";\n\t}\n\ttoCompile += \"this.lastWeight = weight % 1;\\\n\t\t\treturn this.bufferSlice(outputOffset);\\\n\t\t}\\\n\t\telse {\\\n\t\t\treturn (this.noReturn) ? 0 : [];\\\n\t\t}\\\n\t}\\\n\telse {\\\n\t\tthrow(new Error(\\\"Buffer was of incorrect sample length.\\\"));\\\n\t}\";\n\tthis.resampler = Function(\"buffer\", toCompile);\n};\n\nResampler.prototype.compileMultiTapFunction = function () {\n\tvar toCompile = \"var bufferLength = buffer.length;\\\n\tvar outLength = this.outputBufferSize;\\\n\tif ((bufferLength % \" + this.channels + \") == 0) {\\\n\t\tif (bufferLength > 0) {\\\n\t\t\tvar ratioWeight = this.ratioWeight;\\\n\t\t\tvar weight = 0;\";\n\tfor (var channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"var output\" + channel + \" = 0;\"\n\t}\n\ttoCompile += \"var actualPosition = 0;\\\n\t\t\tvar amountToNext = 0;\\\n\t\t\tvar alreadyProcessedTail = !this.tailExists;\\\n\t\t\tthis.tailExists = false;\\\n\t\t\tvar outputBuffer = this.outputBuffer;\\\n\t\t\tvar outputOffset = 0;\\\n\t\t\tvar currentPosition = 0;\\\n\t\t\tdo {\\\n\t\t\t\tif (alreadyProcessedTail) {\\\n\t\t\t\t\tweight = ratioWeight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" = 0;\"\n\t}\n\ttoCompile += \"}\\\n\t\t\t\telse {\\\n\t\t\t\t\tweight = this.lastWeight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" = this.lastOutput[\" + channel + \"];\"\n\t}\n\ttoCompile += \"alreadyProcessedTail = true;\\\n\t\t\t\t}\\\n\t\t\t\twhile (weight > 0 && actualPosition < bufferLength) {\\\n\t\t\t\t\tamountToNext = 1 + actualPosition - currentPosition;\\\n\t\t\t\t\tif (weight >= amountToNext) {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" += buffer[actualPosition++] * amountToNext;\"\n\t}\n\ttoCompile += \"currentPosition = actualPosition;\\\n\t\t\t\t\t\tweight -= amountToNext;\\\n\t\t\t\t\t}\\\n\t\t\t\t\telse {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"output\" + channel + \" += buffer[actualPosition\" + ((channel > 0) ? (\" + \" + channel) : \"\") + \"] * weight;\"\n\t}\n\ttoCompile += \"currentPosition += weight;\\\n\t\t\t\t\t\tweight = 0;\\\n\t\t\t\t\t\tbreak;\\\n\t\t\t\t\t}\\\n\t\t\t\t}\\\n\t\t\t\tif (weight == 0) {\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"outputBuffer[outputOffset++] = output\" + channel + \" / ratioWeight;\"\n\t}\n\ttoCompile += \"}\\\n\t\t\t\telse {\\\n\t\t\t\t\tthis.lastWeight = weight;\";\n\tfor (channel = 0; channel < this.channels; ++channel) {\n\t\ttoCompile += \"this.lastOutput[\" + channel + \"] = output\" + channel + \";\"\n\t}\n\ttoCompile += \"this.tailExists = true;\\\n\t\t\t\t\tbreak;\\\n\t\t\t\t}\\\n\t\t\t} while (actualPosition < bufferLength && outputOffset < outLength);\\\n\t\t\treturn this.bufferSlice(outputOffset);\\\n\t\t}\\\n\t\telse {\\\n\t\t\treturn (this.noReturn) ? 0 : [];\\\n\t\t}\\\n\t}\\\n\telse {\\\n\t\tthrow(new Error(\\\"Buffer was of incorrect sample length.\\\"));\\\n\t}\";\n\tthis.resampler = Function(\"buffer\", toCompile);\n};\n\nResampler.prototype.bypassResampler = function (buffer) {\n\tif (this.noReturn) {\n\t\t//Set the buffer passed as our own, as we don't need to resample it:\n\t\tthis.outputBuffer = buffer;\n\t\treturn buffer.length;\n\t}\n\telse {\n\t\t//Just return the buffer passsed:\n\t\treturn buffer;\n\t}\n};\n\nResampler.prototype.bufferSlice = function (sliceAmount) {\n\tif (this.noReturn) {\n\t\t//If we're going to access the properties directly from this object:\n\t\treturn sliceAmount;\n\t}\n\telse {\n\t\t//Typed array and normal array buffer section referencing:\n\t\ttry {\n\t\t\treturn this.outputBuffer.subarray(0, sliceAmount);\n\t\t}\n\t\tcatch (error) {\n\t\t\ttry {\n\t\t\t\t//Regular array pass:\n\t\t\t\tthis.outputBuffer.length = sliceAmount;\n\t\t\t\treturn this.outputBuffer;\n\t\t\t}\n\t\t\tcatch (error) {\n\t\t\t\t//Nightly Firefox 4 used to have the subarray function named as slice:\n\t\t\t\treturn this.outputBuffer.slice(0, sliceAmount);\n\t\t\t}\n\t\t}\n\t}\n};\n\nResampler.prototype.initializeBuffers = function () {\n\t//Initialize the internal buffer:\n\ttry {\n\t\tthis.outputBuffer = new Float32Array(this.outputBufferSize);\n\t\tthis.lastOutput = new Float32Array(this.channels);\n\t}\n\tcatch (error) {\n\t\tthis.outputBuffer = [];\n\t\tthis.lastOutput = [];\n\t}\n};\n\n(function() {\n  var global;\n\n  global = this;\n  var AV;\n\nAV = {};\n\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nAV.Base = (function() {\n  var fnTest;\n\n  function Base() {}\n\n  fnTest = /\\b_super\\b/;\n\n  Base.extend = function(prop) {\n    var Class, fn, key, keys, _ref, _ref1, _super;\n\n    Class = (function(_super) {\n      __extends(Class, _super);\n\n      function Class() {\n        _ref = Class.__super__.constructor.apply(this, arguments);\n        return _ref;\n      }\n\n      return Class;\n\n    })(this);\n    if (typeof prop === 'function') {\n      keys = Object.keys(Class.prototype);\n      prop.call(Class, Class);\n      prop = {};\n      _ref1 = Class.prototype;\n      for (key in _ref1) {\n        fn = _ref1[key];\n        if (__indexOf.call(keys, key) < 0) {\n          prop[key] = fn;\n        }\n      }\n    }\n    _super = Class.__super__;\n    for (key in prop) {\n      fn = prop[key];\n      if (typeof fn === 'function' && fnTest.test(fn)) {\n        (function(key, fn) {\n          return Class.prototype[key] = function() {\n            var ret, tmp;\n\n            tmp = this._super;\n            this._super = _super[key];\n            ret = fn.apply(this, arguments);\n            this._super = tmp;\n            return ret;\n          };\n        })(key, fn);\n      } else {\n        Class.prototype[key] = fn;\n      }\n    }\n    return Class;\n  };\n\n  return Base;\n\n})();\n//import \"core/base.coffee\";\n\nAV.Buffer = (function() {\n  var BlobBuilder, URL;\n\n  function Buffer(data) {\n    this.data = data;\n    this.length = this.data.length;\n    this.next = null;\n    this.prev = null;\n  }\n\n  Buffer.allocate = function(size) {\n    return new AV.Buffer(new Uint8Array(size));\n  };\n\n  Buffer.prototype.copy = function() {\n    return new AV.Buffer(new Uint8Array(this.data));\n  };\n\n  Buffer.prototype.slice = function(position, length) {\n    if (position === 0 && length >= this.length) {\n      return new AV.Buffer(this.data);\n    } else {\n      return new AV.Buffer(this.data.subarray(position, position + length));\n    }\n  };\n\n  BlobBuilder = global.BlobBuilder || global.MozBlobBuilder || global.WebKitBlobBuilder;\n\n  URL = global.URL || global.webkitURL || global.mozURL;\n\n  Buffer.makeBlob = function(data, type) {\n    var bb;\n\n    if (type == null) {\n      type = 'application/octet-stream';\n    }\n    try {\n      return new Blob([data], {\n        type: type\n      });\n    } catch (_error) {}\n    if (BlobBuilder != null) {\n      bb = new BlobBuilder;\n      bb.append(data);\n      return bb.getBlob(type);\n    }\n    return null;\n  };\n\n  Buffer.makeBlobURL = function(data, type) {\n    return URL != null ? URL.createObjectURL(this.makeBlob(data, type)) : void 0;\n  };\n\n  Buffer.revokeBlobURL = function(url) {\n    return URL != null ? URL.revokeObjectURL(url) : void 0;\n  };\n\n  Buffer.prototype.toBlob = function() {\n    return Buffer.makeBlob(this.data.buffer);\n  };\n\n  Buffer.prototype.toBlobURL = function() {\n    return Buffer.makeBlobURL(this.data.buffer);\n  };\n\n  return Buffer;\n\n})();\n//import \"core/buffer.coffee\";\n\nAV.BufferList = (function() {\n  function BufferList() {\n    this.first = null;\n    this.last = null;\n    this.availableBytes = 0;\n    this.availableBuffers = 0;\n  }\n\n  BufferList.prototype.copy = function() {\n    var result;\n\n    result = new AV.BufferList;\n    result.first = this.first;\n    result.last = this.last;\n    result.availableBytes = this.availableBytes;\n    result.availableBuffers = this.availableBuffers;\n    return result;\n  };\n\n  BufferList.prototype.append = function(buffer) {\n    var _ref, _ref1;\n\n    buffer.prev = this.last;\n    if ((_ref = this.last) != null) {\n      _ref.next = buffer;\n    }\n    this.last = buffer;\n    if ((_ref1 = this.first) == null) {\n      this.first = buffer;\n    }\n    this.availableBytes += buffer.length;\n    return this.availableBuffers++;\n  };\n\n  BufferList.prototype.advance = function() {\n    if (this.first) {\n      this.availableBytes -= this.first.length;\n      this.availableBuffers--;\n      return this.first = this.first.next;\n    }\n  };\n\n  BufferList.prototype.rewind = function() {\n    var _ref;\n\n    if (this.first && !this.first.prev) {\n      return;\n    }\n    this.first = ((_ref = this.first) != null ? _ref.prev : void 0) || this.last;\n    if (this.first) {\n      this.availableBytes += this.first.length;\n      return this.availableBuffers++;\n    }\n  };\n\n  return BufferList;\n\n})();\n//import \"core/bufferlist.coffee\";\n\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Stream = (function() {\n  var buf, decodeString, float32, float64, float64Fallback, float80, int16, int32, int8, nativeEndian, uint16, uint32, uint8;\n\n  buf = new ArrayBuffer(16);\n\n  uint8 = new Uint8Array(buf);\n\n  int8 = new Int8Array(buf);\n\n  uint16 = new Uint16Array(buf);\n\n  int16 = new Int16Array(buf);\n\n  uint32 = new Uint32Array(buf);\n\n  int32 = new Int32Array(buf);\n\n  float32 = new Float32Array(buf);\n\n  if (typeof Float64Array !== \"undefined\" && Float64Array !== null) {\n    float64 = new Float64Array(buf);\n  }\n\n  nativeEndian = new Uint16Array(new Uint8Array([0x12, 0x34]).buffer)[0] === 0x3412;\n\n  AV.UnderflowError = (function(_super) {\n    __extends(UnderflowError, _super);\n\n    function UnderflowError() {\n      this.name = 'AV.UnderflowError';\n    }\n\n    return UnderflowError;\n\n  })(Error);\n\n  function Stream(list) {\n    this.list = list;\n    this.localOffset = 0;\n    this.offset = 0;\n  }\n\n  Stream.fromBuffer = function(buffer) {\n    var list;\n\n    list = new AV.BufferList;\n    list.append(buffer);\n    return new AV.Stream(list);\n  };\n\n  Stream.prototype.copy = function() {\n    var result;\n\n    result = new AV.Stream(this.list.copy());\n    result.localOffset = this.localOffset;\n    result.offset = this.offset;\n    return result;\n  };\n\n  Stream.prototype.available = function(bytes) {\n    return bytes <= this.list.availableBytes - this.localOffset;\n  };\n\n  Stream.prototype.remainingBytes = function() {\n    return this.list.availableBytes - this.localOffset;\n  };\n\n  Stream.prototype.advance = function(bytes) {\n    if (!this.available(bytes)) {\n      throw new AV.UnderflowError();\n    }\n    this.localOffset += bytes;\n    this.offset += bytes;\n    while (this.list.first && this.localOffset >= this.list.first.length) {\n      this.localOffset -= this.list.first.length;\n      this.list.advance();\n    }\n    return this;\n  };\n\n  Stream.prototype.rewind = function(bytes) {\n    if (bytes > this.offset) {\n      throw new AV.UnderflowError();\n    }\n    if (!this.list.first) {\n      this.list.rewind();\n      this.localOffset = this.list.first.length;\n    }\n    this.localOffset -= bytes;\n    this.offset -= bytes;\n    while (this.list.first.prev && this.localOffset < 0) {\n      this.list.rewind();\n      this.localOffset += this.list.first.length;\n    }\n    return this;\n  };\n\n  Stream.prototype.seek = function(position) {\n    if (position > this.offset) {\n      return this.advance(position - this.offset);\n    } else if (position < this.offset) {\n      return this.rewind(this.offset - position);\n    }\n  };\n\n  Stream.prototype.readUInt8 = function() {\n    var a;\n\n    if (!this.available(1)) {\n      throw new AV.UnderflowError();\n    }\n    a = this.list.first.data[this.localOffset];\n    this.localOffset += 1;\n    this.offset += 1;\n    if (this.localOffset === this.list.first.length) {\n      this.localOffset = 0;\n      this.list.advance();\n    }\n    return a;\n  };\n\n  Stream.prototype.peekUInt8 = function(offset) {\n    var buffer;\n\n    if (offset == null) {\n      offset = 0;\n    }\n    if (!this.available(offset + 1)) {\n      throw new AV.UnderflowError();\n    }\n    offset = this.localOffset + offset;\n    buffer = this.list.first;\n    while (buffer) {\n      if (buffer.length > offset) {\n        return buffer.data[offset];\n      }\n      offset -= buffer.length;\n      buffer = buffer.next;\n    }\n    return 0;\n  };\n\n  Stream.prototype.read = function(bytes, littleEndian) {\n    var i, _i, _j, _ref;\n\n    if (littleEndian == null) {\n      littleEndian = false;\n    }\n    if (littleEndian === nativeEndian) {\n      for (i = _i = 0; _i < bytes; i = _i += 1) {\n        uint8[i] = this.readUInt8();\n      }\n    } else {\n      for (i = _j = _ref = bytes - 1; _j >= 0; i = _j += -1) {\n        uint8[i] = this.readUInt8();\n      }\n    }\n  };\n\n  Stream.prototype.peek = function(bytes, offset, littleEndian) {\n    var i, _i, _j;\n\n    if (littleEndian == null) {\n      littleEndian = false;\n    }\n    if (littleEndian === nativeEndian) {\n      for (i = _i = 0; _i < bytes; i = _i += 1) {\n        uint8[i] = this.peekUInt8(offset + i);\n      }\n    } else {\n      for (i = _j = 0; _j < bytes; i = _j += 1) {\n        uint8[bytes - i - 1] = this.peekUInt8(offset + i);\n      }\n    }\n  };\n\n  Stream.prototype.readInt8 = function() {\n    this.read(1);\n    return int8[0];\n  };\n\n  Stream.prototype.peekInt8 = function(offset) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(1, offset);\n    return int8[0];\n  };\n\n  Stream.prototype.readUInt16 = function(littleEndian) {\n    this.read(2, littleEndian);\n    return uint16[0];\n  };\n\n  Stream.prototype.peekUInt16 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(2, offset, littleEndian);\n    return uint16[0];\n  };\n\n  Stream.prototype.readInt16 = function(littleEndian) {\n    this.read(2, littleEndian);\n    return int16[0];\n  };\n\n  Stream.prototype.peekInt16 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(2, offset, littleEndian);\n    return int16[0];\n  };\n\n  Stream.prototype.readUInt24 = function(littleEndian) {\n    if (littleEndian) {\n      return this.readUInt16(true) + (this.readUInt8() << 16);\n    } else {\n      return (this.readUInt16() << 8) + this.readUInt8();\n    }\n  };\n\n  Stream.prototype.peekUInt24 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    if (littleEndian) {\n      return this.peekUInt16(offset, true) + (this.peekUInt8(offset + 2) << 16);\n    } else {\n      return (this.peekUInt16(offset) << 8) + this.peekUInt8(offset + 2);\n    }\n  };\n\n  Stream.prototype.readInt24 = function(littleEndian) {\n    if (littleEndian) {\n      return this.readUInt16(true) + (this.readInt8() << 16);\n    } else {\n      return (this.readInt16() << 8) + this.readUInt8();\n    }\n  };\n\n  Stream.prototype.peekInt24 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    if (littleEndian) {\n      return this.peekUInt16(offset, true) + (this.peekInt8(offset + 2) << 16);\n    } else {\n      return (this.peekInt16(offset) << 8) + this.peekUInt8(offset + 2);\n    }\n  };\n\n  Stream.prototype.readUInt32 = function(littleEndian) {\n    this.read(4, littleEndian);\n    return uint32[0];\n  };\n\n  Stream.prototype.peekUInt32 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(4, offset, littleEndian);\n    return uint32[0];\n  };\n\n  Stream.prototype.readInt32 = function(littleEndian) {\n    this.read(4, littleEndian);\n    return int32[0];\n  };\n\n  Stream.prototype.peekInt32 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(4, offset, littleEndian);\n    return int32[0];\n  };\n\n  Stream.prototype.readFloat32 = function(littleEndian) {\n    this.read(4, littleEndian);\n    return float32[0];\n  };\n\n  Stream.prototype.peekFloat32 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(4, offset, littleEndian);\n    return float32[0];\n  };\n\n  Stream.prototype.readFloat64 = function(littleEndian) {\n    this.read(8, littleEndian);\n    if (float64) {\n      return float64[0];\n    } else {\n      return float64Fallback();\n    }\n  };\n\n  float64Fallback = function() {\n    var exp, frac, high, low, out, sign;\n\n    low = uint32[0], high = uint32[1];\n    if (!high || high === 0x80000000) {\n      return 0.0;\n    }\n    sign = 1 - (high >>> 31) * 2;\n    exp = (high >>> 20) & 0x7ff;\n    frac = high & 0xfffff;\n    if (exp === 0x7ff) {\n      if (frac) {\n        return NaN;\n      }\n      return sign * Infinity;\n    }\n    exp -= 1023;\n    out = (frac | 0x100000) * Math.pow(2, exp - 20);\n    out += low * Math.pow(2, exp - 52);\n    return sign * out;\n  };\n\n  Stream.prototype.peekFloat64 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(8, offset, littleEndian);\n    if (float64) {\n      return float64[0];\n    } else {\n      return float64Fallback();\n    }\n  };\n\n  Stream.prototype.readFloat80 = function(littleEndian) {\n    this.read(10, littleEndian);\n    return float80();\n  };\n\n  float80 = function() {\n    var a0, a1, exp, high, low, out, sign;\n\n    high = uint32[0], low = uint32[1];\n    a0 = uint8[9];\n    a1 = uint8[8];\n    sign = 1 - (a0 >>> 7) * 2;\n    exp = ((a0 & 0x7F) << 8) | a1;\n    if (exp === 0 && low === 0 && high === 0) {\n      return 0;\n    }\n    if (exp === 0x7fff) {\n      if (low === 0 && high === 0) {\n        return sign * Infinity;\n      }\n      return NaN;\n    }\n    exp -= 16383;\n    out = low * Math.pow(2, exp - 31);\n    out += high * Math.pow(2, exp - 63);\n    return sign * out;\n  };\n\n  Stream.prototype.peekFloat80 = function(offset, littleEndian) {\n    if (offset == null) {\n      offset = 0;\n    }\n    this.peek(10, offset, littleEndian);\n    return float80();\n  };\n\n  Stream.prototype.readBuffer = function(length) {\n    var i, result, to, _i;\n\n    result = AV.Buffer.allocate(length);\n    to = result.data;\n    for (i = _i = 0; _i < length; i = _i += 1) {\n      to[i] = this.readUInt8();\n    }\n    return result;\n  };\n\n  Stream.prototype.peekBuffer = function(offset, length) {\n    var i, result, to, _i;\n\n    if (offset == null) {\n      offset = 0;\n    }\n    result = AV.Buffer.allocate(length);\n    to = result.data;\n    for (i = _i = 0; _i < length; i = _i += 1) {\n      to[i] = this.peekUInt8(offset + i);\n    }\n    return result;\n  };\n\n  Stream.prototype.readSingleBuffer = function(length) {\n    var result;\n\n    result = this.list.first.slice(this.localOffset, length);\n    this.advance(result.length);\n    return result;\n  };\n\n  Stream.prototype.peekSingleBuffer = function(offset, length) {\n    var result;\n\n    result = this.list.first.slice(this.localOffset + offset, length);\n    return result;\n  };\n\n  Stream.prototype.readString = function(length, encoding) {\n    if (encoding == null) {\n      encoding = 'ascii';\n    }\n    return decodeString.call(this, 0, length, encoding, true);\n  };\n\n  Stream.prototype.peekString = function(offset, length, encoding) {\n    if (offset == null) {\n      offset = 0;\n    }\n    if (encoding == null) {\n      encoding = 'ascii';\n    }\n    return decodeString.call(this, offset, length, encoding, false);\n  };\n\n  decodeString = function(offset, length, encoding, advance) {\n    var b1, b2, b3, b4, bom, c, end, littleEndian, nullEnd, pt, result, w1, w2;\n\n    encoding = encoding.toLowerCase();\n    nullEnd = length === null ? 0 : -1;\n    if (length == null) {\n      length = Infinity;\n    }\n    end = offset + length;\n    result = '';\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n        while (offset < end && (c = this.peekUInt8(offset++)) !== nullEnd) {\n          result += String.fromCharCode(c);\n        }\n        break;\n      case 'utf8':\n      case 'utf-8':\n        while (offset < end && (b1 = this.peekUInt8(offset++)) !== nullEnd) {\n          if ((b1 & 0x80) === 0) {\n            result += String.fromCharCode(b1);\n          } else if ((b1 & 0xe0) === 0xc0) {\n            b2 = this.peekUInt8(offset++) & 0x3f;\n            result += String.fromCharCode(((b1 & 0x1f) << 6) | b2);\n          } else if ((b1 & 0xf0) === 0xe0) {\n            b2 = this.peekUInt8(offset++) & 0x3f;\n            b3 = this.peekUInt8(offset++) & 0x3f;\n            result += String.fromCharCode(((b1 & 0x0f) << 12) | (b2 << 6) | b3);\n          } else if ((b1 & 0xf8) === 0xf0) {\n            b2 = this.peekUInt8(offset++) & 0x3f;\n            b3 = this.peekUInt8(offset++) & 0x3f;\n            b4 = this.peekUInt8(offset++) & 0x3f;\n            pt = (((b1 & 0x0f) << 18) | (b2 << 12) | (b3 << 6) | b4) - 0x10000;\n            result += String.fromCharCode(0xd800 + (pt >> 10), 0xdc00 + (pt & 0x3ff));\n          }\n        }\n        break;\n      case 'utf16-be':\n      case 'utf16be':\n      case 'utf16le':\n      case 'utf16-le':\n      case 'utf16bom':\n      case 'utf16-bom':\n        switch (encoding) {\n          case 'utf16be':\n          case 'utf16-be':\n            littleEndian = false;\n            break;\n          case 'utf16le':\n          case 'utf16-le':\n            littleEndian = true;\n            break;\n          case 'utf16bom':\n          case 'utf16-bom':\n            if (length < 2 || (bom = this.peekUInt16(offset)) === nullEnd) {\n              if (advance) {\n                this.advance(offset += 2);\n              }\n              return result;\n            }\n            littleEndian = bom === 0xfffe;\n            offset += 2;\n        }\n        while (offset < end && (w1 = this.peekUInt16(offset, littleEndian)) !== nullEnd) {\n          offset += 2;\n          if (w1 < 0xd800 || w1 > 0xdfff) {\n            result += String.fromCharCode(w1);\n          } else {\n            if (w1 > 0xdbff) {\n              throw new Error(\"Invalid utf16 sequence.\");\n            }\n            w2 = this.peekUInt16(offset, littleEndian);\n            if (w2 < 0xdc00 || w2 > 0xdfff) {\n              throw new Error(\"Invalid utf16 sequence.\");\n            }\n            result += String.fromCharCode(w1, w2);\n            offset += 2;\n          }\n        }\n        if (w1 === nullEnd) {\n          offset += 2;\n        }\n        break;\n      default:\n        throw new Error(\"Unknown encoding: \" + encoding);\n    }\n    if (advance) {\n      this.advance(offset);\n    }\n    return result;\n  };\n\n  return Stream;\n\n})();\n//import \"core/stream.coffee\";\n\nAV.Bitstream = (function() {\n  function Bitstream(stream) {\n    this.stream = stream;\n    this.bitPosition = 0;\n  }\n\n  Bitstream.prototype.copy = function() {\n    var result;\n\n    result = new AV.Bitstream(this.stream.copy());\n    result.bitPosition = this.bitPosition;\n    return result;\n  };\n\n  Bitstream.prototype.offset = function() {\n    return 8 * this.stream.offset + this.bitPosition;\n  };\n\n  Bitstream.prototype.available = function(bits) {\n    return this.stream.available((bits + 8 - this.bitPosition) / 8);\n  };\n\n  Bitstream.prototype.advance = function(bits) {\n    var pos;\n\n    pos = this.bitPosition + bits;\n    this.stream.advance(pos >> 3);\n    return this.bitPosition = pos & 7;\n  };\n\n  Bitstream.prototype.rewind = function(bits) {\n    var pos;\n\n    pos = this.bitPosition - bits;\n    this.stream.rewind(Math.abs(pos >> 3));\n    return this.bitPosition = pos & 7;\n  };\n\n  Bitstream.prototype.seek = function(offset) {\n    var curOffset;\n\n    curOffset = this.offset();\n    if (offset > curOffset) {\n      return this.advance(offset - curOffset);\n    } else if (offset < curOffset) {\n      return this.rewind(curOffset - offset);\n    }\n  };\n\n  Bitstream.prototype.align = function() {\n    if (this.bitPosition !== 0) {\n      this.bitPosition = 0;\n      return this.stream.advance(1);\n    }\n  };\n\n  Bitstream.prototype.read = function(bits, signed) {\n    var a, a0, a1, a2, a3, a4, mBits;\n\n    if (bits === 0) {\n      return 0;\n    }\n    mBits = bits + this.bitPosition;\n    if (mBits <= 8) {\n      a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\n    } else if (mBits <= 16) {\n      a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\n    } else if (mBits <= 24) {\n      a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\n    } else if (mBits <= 32) {\n      a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\n    } else if (mBits <= 40) {\n      a0 = this.stream.peekUInt8(0) * 0x0100000000;\n      a1 = this.stream.peekUInt8(1) << 24 >>> 0;\n      a2 = this.stream.peekUInt8(2) << 16;\n      a3 = this.stream.peekUInt8(3) << 8;\n      a4 = this.stream.peekUInt8(4);\n      a = a0 + a1 + a2 + a3 + a4;\n      a %= Math.pow(2, 40 - this.bitPosition);\n      a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits));\n    } else {\n      throw new Error(\"Too many bits!\");\n    }\n    if (signed) {\n      if (mBits < 32) {\n        if (a >>> (bits - 1)) {\n          a = ((1 << bits >>> 0) - a) * -1;\n        }\n      } else {\n        if (a / Math.pow(2, bits - 1) | 0) {\n          a = (Math.pow(2, bits) - a) * -1;\n        }\n      }\n    }\n    this.advance(bits);\n    return a;\n  };\n\n  Bitstream.prototype.peek = function(bits, signed) {\n    var a, a0, a1, a2, a3, a4, mBits;\n\n    if (bits === 0) {\n      return 0;\n    }\n    mBits = bits + this.bitPosition;\n    if (mBits <= 8) {\n      a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\n    } else if (mBits <= 16) {\n      a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\n    } else if (mBits <= 24) {\n      a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\n    } else if (mBits <= 32) {\n      a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\n    } else if (mBits <= 40) {\n      a0 = this.stream.peekUInt8(0) * 0x0100000000;\n      a1 = this.stream.peekUInt8(1) << 24 >>> 0;\n      a2 = this.stream.peekUInt8(2) << 16;\n      a3 = this.stream.peekUInt8(3) << 8;\n      a4 = this.stream.peekUInt8(4);\n      a = a0 + a1 + a2 + a3 + a4;\n      a %= Math.pow(2, 40 - this.bitPosition);\n      a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits));\n    } else {\n      throw new Error(\"Too many bits!\");\n    }\n    if (signed) {\n      if (mBits < 32) {\n        if (a >>> (bits - 1)) {\n          a = ((1 << bits >>> 0) - a) * -1;\n        }\n      } else {\n        if (a / Math.pow(2, bits - 1) | 0) {\n          a = (Math.pow(2, bits) - a) * -1;\n        }\n      }\n    }\n    return a;\n  };\n\n  Bitstream.prototype.readLSB = function(bits, signed) {\n    var a, mBits;\n\n    if (bits === 0) {\n      return 0;\n    }\n    if (bits > 40) {\n      throw new Error(\"Too many bits!\");\n    }\n    mBits = bits + this.bitPosition;\n    a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\n    if (mBits > 8) {\n      a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\n    }\n    if (mBits > 16) {\n      a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\n    }\n    if (mBits > 24) {\n      a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\n    }\n    if (mBits > 32) {\n      a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\n    }\n    if (mBits >= 32) {\n      a %= Math.pow(2, bits);\n    } else {\n      a &= (1 << bits) - 1;\n    }\n    if (signed) {\n      if (mBits < 32) {\n        if (a >>> (bits - 1)) {\n          a = ((1 << bits >>> 0) - a) * -1;\n        }\n      } else {\n        if (a / Math.pow(2, bits - 1) | 0) {\n          a = (Math.pow(2, bits) - a) * -1;\n        }\n      }\n    }\n    this.advance(bits);\n    return a;\n  };\n\n  Bitstream.prototype.peekLSB = function(bits, signed) {\n    var a, mBits;\n\n    if (bits === 0) {\n      return 0;\n    }\n    if (bits > 40) {\n      throw new Error(\"Too many bits!\");\n    }\n    mBits = bits + this.bitPosition;\n    a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\n    if (mBits > 8) {\n      a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\n    }\n    if (mBits > 16) {\n      a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\n    }\n    if (mBits > 24) {\n      a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\n    }\n    if (mBits > 32) {\n      a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\n    }\n    if (mBits >= 32) {\n      a %= Math.pow(2, bits);\n    } else {\n      a &= (1 << bits) - 1;\n    }\n    if (signed) {\n      if (mBits < 32) {\n        if (a >>> (bits - 1)) {\n          a = ((1 << bits >>> 0) - a) * -1;\n        }\n      } else {\n        if (a / Math.pow(2, bits - 1) | 0) {\n          a = (Math.pow(2, bits) - a) * -1;\n        }\n      }\n    }\n    return a;\n  };\n\n  return Bitstream;\n\n})();\n//import \"core/bitstream.coffee\";\n\nvar _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __slice = [].slice;\n\nAV.EventEmitter = (function(_super) {\n  __extends(EventEmitter, _super);\n\n  function EventEmitter() {\n    _ref = EventEmitter.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  EventEmitter.prototype.on = function(event, fn) {\n    var _base, _ref1, _ref2;\n\n    if ((_ref1 = this.events) == null) {\n      this.events = {};\n    }\n    if ((_ref2 = (_base = this.events)[event]) == null) {\n      _base[event] = [];\n    }\n    return this.events[event].push(fn);\n  };\n\n  EventEmitter.prototype.off = function(event, fn) {\n    var index, _ref1;\n\n    if (!((_ref1 = this.events) != null ? _ref1[event] : void 0)) {\n      return;\n    }\n    index = this.events[event].indexOf(fn);\n    if (~index) {\n      return this.events[event].splice(index, 1);\n    }\n  };\n\n  EventEmitter.prototype.once = function(event, fn) {\n    var cb;\n\n    return this.on(event, cb = function() {\n      this.off(event, cb);\n      return fn.apply(this, arguments);\n    });\n  };\n\n  EventEmitter.prototype.emit = function() {\n    var args, event, fn, _i, _len, _ref1, _ref2;\n\n    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    if (!((_ref1 = this.events) != null ? _ref1[event] : void 0)) {\n      return;\n    }\n    _ref2 = this.events[event].slice();\n    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n      fn = _ref2[_i];\n      fn.apply(this, args);\n    }\n  };\n\n  return EventEmitter;\n\n})(AV.Base);\n//import \"core/events.coffee\";\n\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Demuxer = (function(_super) {\n  var formats;\n\n  __extends(Demuxer, _super);\n\n  Demuxer.probe = function(buffer) {\n    return false;\n  };\n\n  function Demuxer(source, chunk) {\n    var list, received,\n      _this = this;\n\n    list = new AV.BufferList;\n    list.append(chunk);\n    this.stream = new AV.Stream(list);\n    received = false;\n    source.on('data', function(chunk) {\n      received = true;\n      list.append(chunk);\n      return _this.readChunk(chunk);\n    });\n    source.on('error', function(err) {\n      return _this.emit('error', err);\n    });\n    source.on('end', function() {\n      if (!received) {\n        _this.readChunk(chunk);\n      }\n      return _this.emit('end');\n    });\n    this.seekPoints = [];\n    this.init();\n  }\n\n  Demuxer.prototype.init = function() {};\n\n  Demuxer.prototype.readChunk = function(chunk) {};\n\n  Demuxer.prototype.addSeekPoint = function(offset, timestamp) {\n    var index;\n\n    index = this.searchTimestamp(timestamp);\n    return this.seekPoints.splice(index, 0, {\n      offset: offset,\n      timestamp: timestamp\n    });\n  };\n\n  Demuxer.prototype.searchTimestamp = function(timestamp, backward) {\n    var high, low, mid, time;\n\n    low = 0;\n    high = this.seekPoints.length;\n    if (high > 0 && this.seekPoints[high - 1].timestamp < timestamp) {\n      return high;\n    }\n    while (low < high) {\n      mid = (low + high) >> 1;\n      time = this.seekPoints[mid].timestamp;\n      if (time < timestamp) {\n        low = mid + 1;\n      } else if (time >= timestamp) {\n        high = mid;\n      }\n    }\n    if (high > this.seekPoints.length) {\n      high = this.seekPoints.length;\n    }\n    return high;\n  };\n\n  Demuxer.prototype.seek = function(timestamp) {\n    var index, seekPoint;\n\n    if (this.format && this.format.framesPerPacket > 0 && this.format.bytesPerPacket > 0) {\n      seekPoint = {\n        timestamp: timestamp,\n        offset: this.format.bytesPerPacket * timestamp / this.format.framesPerPacket\n      };\n      return seekPoint;\n    } else {\n      index = this.searchTimestamp(timestamp);\n      return this.seekPoints[index];\n    }\n  };\n\n  formats = [];\n\n  Demuxer.register = function(demuxer) {\n    return formats.push(demuxer);\n  };\n\n  Demuxer.find = function(buffer) {\n    var format, stream, _i, _len;\n\n    stream = AV.Stream.fromBuffer(buffer);\n    for (_i = 0, _len = formats.length; _i < _len; _i++) {\n      format = formats[_i];\n      if (format.probe(stream)) {\n        return format;\n      }\n    }\n    return null;\n  };\n\n  return Demuxer;\n\n})(AV.EventEmitter);\n//import \"demuxer.coffee\";\n\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Decoder = (function(_super) {\n  var codecs;\n\n  __extends(Decoder, _super);\n\n  function Decoder(demuxer, format) {\n    var list,\n      _this = this;\n\n    this.demuxer = demuxer;\n    this.format = format;\n    list = new AV.BufferList;\n    this.stream = new AV.Stream(list);\n    this.bitstream = new AV.Bitstream(this.stream);\n    this.receivedFinalBuffer = false;\n    this.waiting = false;\n    this.demuxer.on('cookie', function(cookie) {\n      var error;\n\n      try {\n        return _this.setCookie(cookie);\n      } catch (_error) {\n        error = _error;\n        return _this.emit('error', error);\n      }\n    });\n    this.demuxer.on('data', function(chunk) {\n      list.append(chunk);\n      if (_this.waiting) {\n        return _this.decode();\n      }\n    });\n    this.demuxer.on('end', function() {\n      _this.receivedFinalBuffer = true;\n      if (_this.waiting) {\n        return _this.decode();\n      }\n    });\n    this.init();\n  }\n\n  Decoder.prototype.init = function() {};\n\n  Decoder.prototype.setCookie = function(cookie) {};\n\n  Decoder.prototype.readChunk = function() {};\n\n  Decoder.prototype.decode = function() {\n    var error, offset, packet;\n\n    this.waiting = false;\n    offset = this.bitstream.offset();\n    try {\n      packet = this.readChunk();\n    } catch (_error) {\n      error = _error;\n      if (!(error instanceof AV.UnderflowError)) {\n        this.emit('error', error);\n        return false;\n      }\n    }\n    if (packet) {\n      this.emit('data', packet);\n      return true;\n    } else if (!this.receivedFinalBuffer) {\n      this.bitstream.seek(offset);\n      this.waiting = true;\n    } else {\n      this.emit('end');\n    }\n    return false;\n  };\n\n  Decoder.prototype.seek = function(timestamp) {\n    var seekPoint;\n\n    seekPoint = this.demuxer.seek(timestamp);\n    this.stream.seek(seekPoint.offset);\n    return seekPoint.timestamp;\n  };\n\n  codecs = {};\n\n  Decoder.register = function(id, decoder) {\n    return codecs[id] = decoder;\n  };\n\n  Decoder.find = function(id) {\n    return codecs[id] || null;\n  };\n\n  return Decoder;\n\n})(AV.EventEmitter);\n//import \"decoder.coffee\";\n\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Queue = (function(_super) {\n  __extends(Queue, _super);\n\n  function Queue(asset) {\n    var _this = this;\n\n    this.asset = asset;\n    this.write = __bind(this.write, this);\n    this.readyMark = 64;\n    this.finished = false;\n    this.buffering = true;\n    this.ended = false;\n    this.buffers = [];\n    this.asset.on('data', this.write);\n    this.asset.on('end', function() {\n      return _this.ended = true;\n    });\n    this.asset.decodePacket();\n  }\n\n  Queue.prototype.write = function(buffer) {\n    if (buffer) {\n      this.buffers.push(buffer);\n    }\n    if (this.buffering) {\n      if (this.buffers.length >= this.readyMark || this.ended) {\n        this.buffering = false;\n        return this.emit('ready');\n      } else {\n        return this.asset.decodePacket();\n      }\n    }\n  };\n\n  Queue.prototype.read = function() {\n    if (this.buffers.length === 0) {\n      return null;\n    }\n    this.asset.decodePacket();\n    return this.buffers.shift();\n  };\n\n  Queue.prototype.reset = function() {\n    this.buffers.length = 0;\n    this.buffering = true;\n    return this.asset.decodePacket();\n  };\n\n  return Queue;\n\n})(AV.EventEmitter);\n//import \"queue.coffee\";\n\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.AudioDevice = (function(_super) {\n  var devices;\n\n  __extends(AudioDevice, _super);\n\n  function AudioDevice(sampleRate, channels) {\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.updateTime = __bind(this.updateTime, this);\n    this.playing = false;\n    this.currentTime = 0;\n    this._lastTime = 0;\n  }\n\n  AudioDevice.prototype.start = function() {\n    var _ref,\n      _this = this;\n\n    if (this.playing) {\n      return;\n    }\n    this.playing = true;\n    if ((_ref = this.device) == null) {\n\n      this.device = this._device = AV.AudioDevice.create(this.sampleRate, this.channels);\n    }\n    this._lastTime = this.device.getDeviceTime();\n    this._timer = setInterval(this.updateTime, 200);\n    return this.device.on('refill', this.refill = function(buffer) {\n      return _this.emit('refill', buffer);\n    });\n  };\n\n  AudioDevice.prototype.stop = function() {\n    if (!this.playing) {\n      return;\n    }\n    this.playing = false;\n    this.device.off('refill', this.refill);\n    return clearInterval(this._timer);\n  };\n\n  AudioDevice.prototype.destroy = function() {\n    this.stop();\n    return this.device.destroy();\n  };\n\n  AudioDevice.prototype.seek = function(currentTime) {\n    this.currentTime = currentTime;\n    if (this.playing) {\n      this._lastTime = this.device.getDeviceTime();\n    }\n    return this.emit('timeUpdate', this.currentTime);\n  };\n\n  AudioDevice.prototype.updateTime = function() {\n    var time;\n\n    time = this.device.getDeviceTime();\n    this.currentTime += (time - this._lastTime) / this.device.sampleRate * 1000 | 0;\n    this._lastTime = time;\n    return this.emit('timeUpdate', this.currentTime);\n  };\n\n  devices = [];\n\n  AudioDevice.register = function(device) {\n    return devices.push(device);\n  };\n\n  AudioDevice.create = function(sampleRate, channels) {\n    var device, _i, _len;\n\n    for (_i = 0, _len = devices.length; _i < _len; _i++) {\n      device = devices[_i];\n      if (device.supported) {\n        return new device(sampleRate, channels);\n      }\n    }\n    return null;\n  };\n\n  return AudioDevice;\n\n})(AV.EventEmitter);\n//import \"device.coffee\";\n\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Asset = (function(_super) {\n  __extends(Asset, _super);\n\n  function Asset(source) {\n    var _this = this;\n\n    this.source = source;\n    this._decode = __bind(this._decode, this);\n    this.findDecoder = __bind(this.findDecoder, this);\n    this.probe = __bind(this.probe, this);\n    this.buffered = 0;\n    this.duration = null;\n    this.format = null;\n    this.metadata = null;\n    this.active = false;\n    this.demuxer = null;\n    this.decoder = null;\n    this.source.once('data', this.probe);\n    this.source.on('error', function(err) {\n      _this.emit('error', err);\n      return _this.stop();\n    });\n    this.source.on('progress', function(buffered) {\n      _this.buffered = buffered;\n      return _this.emit('buffer', _this.buffered);\n    });\n  }\n\n  Asset.fromURL = function(url) {\n    var source;\n\n    source = new AV.HTTPSource(url);\n    return new AV.Asset(source);\n  };\n\n  Asset.fromFile = function(file) {\n    var source;\n\n    source = new AV.FileSource(file);\n    return new AV.Asset(source);\n  };\n\n  Asset.prototype.start = function(decode) {\n    var _ref;\n\n    if (this.active) {\n      return;\n    }\n    if (decode != null) {\n      this.shouldDecode = decode;\n    }\n    if ((_ref = this.shouldDecode) == null) {\n      this.shouldDecode = true;\n    }\n    this.active = true;\n    this.source.start();\n    if (this.decoder && this.shouldDecode) {\n      return this._decode();\n    }\n  };\n\n  Asset.prototype.stop = function() {\n    if (!this.active) {\n      return;\n    }\n    this.active = false;\n    return this.source.pause();\n  };\n\n  Asset.prototype.get = function(event, callback) {\n    var _this = this;\n\n    if (event !== 'format' && event !== 'duration' && event !== 'metadata') {\n      return;\n    }\n    if (this[event] != null) {\n      return callback(this[event]);\n    } else {\n      this.once(event, function(value) {\n        _this.stop();\n        return callback(value);\n      });\n      return this.start();\n    }\n  };\n\n  Asset.prototype.decodePacket = function() {\n    return this.decoder.decode();\n  };\n\n  Asset.prototype.probe = function(chunk) {\n    var demuxer,\n      _this = this;\n\n    if (!this.active) {\n      return;\n    }\n    demuxer = AV.Demuxer.find(chunk);\n    if (!demuxer) {\n      return this.emit('error', 'A demuxer for this container was not found.');\n    }\n    this.demuxer = new demuxer(this.source, chunk);\n    this.demuxer.on('format', this.findDecoder);\n    this.demuxer.on('duration', function(duration) {\n      _this.duration = duration;\n      return _this.emit('duration', _this.duration);\n    });\n    this.demuxer.on('metadata', function(metadata) {\n      _this.metadata = metadata;\n      return _this.emit('metadata', _this.metadata);\n    });\n    return this.demuxer.on('error', function(err) {\n      _this.emit('error', err);\n      return _this.stop();\n    });\n  };\n\n  Asset.prototype.findDecoder = function(format) {\n    var decoder,\n      _this = this;\n\n    this.format = format;\n    if (!this.active) {\n      return;\n    }\n    this.emit('format', this.format);\n    decoder = AV.Decoder.find(this.format.formatID);\n    if (!decoder) {\n      return this.emit('error', \"A decoder for \" + this.format.formatID + \" was not found.\");\n    }\n    this.decoder = new decoder(this.demuxer, this.format);\n    this.decoder.on('data', function(buffer) {\n      return _this.emit('data', buffer);\n    });\n    this.decoder.on('error', function(err) {\n      _this.emit('error', err);\n      return _this.stop();\n    });\n    this.decoder.on('end', function() {\n      return _this.emit('end');\n    });\n    this.emit('decodeStart');\n    if (this.shouldDecode) {\n      return this._decode();\n    }\n  };\n\n  Asset.prototype._decode = function() {\n    while (this.decoder.decode() && this.active) {\n      continue;\n    }\n    if (this.active) {\n      return this.decoder.once('data', this._decode);\n    }\n  };\n\n  return Asset;\n\n})(AV.EventEmitter);\n//import \"asset.coffee\";\n\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.Player = (function(_super) {\n  __extends(Player, _super);\n\n  function Player(asset) {\n    var _this = this;\n\n    this.asset = asset;\n    this.startPlaying = __bind(this.startPlaying, this);\n    this.playing = false;\n    this.buffered = 0;\n    this.currentTime = 0;\n    this.duration = 0;\n    this.volume = 100;\n    this.pan = 0;\n    this.metadata = {};\n    this.filters = [new AV.VolumeFilter(this, 'volume'), new AV.BalanceFilter(this, 'pan')];\n    this.asset.on('buffer', function(buffered) {\n      _this.buffered = buffered;\n      return _this.emit('buffer', _this.buffered);\n    });\n    this.asset.on('decodeStart', function() {\n      _this.queue = new AV.Queue(_this.asset);\n      return _this.queue.once('ready', _this.startPlaying);\n    });\n    this.asset.on('format', function(format) {\n      _this.format = format;\n      return _this.emit('format', _this.format);\n    });\n    this.asset.on('metadata', function(metadata) {\n      _this.metadata = metadata;\n      return _this.emit('metadata', _this.metadata);\n    });\n    this.asset.on('duration', function(duration) {\n      _this.duration = duration;\n      return _this.emit('duration', _this.duration);\n    });\n    this.asset.on('error', function(error) {\n      return _this.emit('error', error);\n    });\n  }\n\n  Player.fromURL = function(url) {\n    var asset;\n\n    asset = AV.Asset.fromURL(url);\n    return new AV.Player(asset);\n  };\n\n  Player.fromFile = function(file) {\n    var asset;\n\n    asset = AV.Asset.fromFile(file);\n    return new AV.Player(asset);\n  };\n\n  Player.prototype.preload = function() {\n    if (!this.asset) {\n      return;\n    }\n    this.startedPreloading = true;\n    return this.asset.start(false);\n  };\n\n  Player.prototype.play = function() {\n    var _ref;\n\n    if (this.playing) {\n      return;\n    }\n    if (!this.startedPreloading) {\n      this.preload();\n    }\n    this.playing = true;\n    return (_ref = this.device) != null ? _ref.start() : void 0;\n  };\n\n  Player.prototype.pause = function() {\n    var _ref;\n\n    if (!this.playing) {\n      return;\n    }\n    this.playing = false;\n    return (_ref = this.device) != null ? _ref.stop() : void 0;\n  };\n\n  Player.prototype.togglePlayback = function() {\n    if (this.playing) {\n      return this.pause();\n    } else {\n      return this.play();\n    }\n  };\n\n  Player.prototype.stop = function() {\n    var _ref;\n\n    this.pause();\n    this.asset.stop();\n    return (_ref = this.device) != null ? _ref.destroy() : void 0;\n  };\n\n  Player.prototype.seek = function(timestamp) {\n    var _ref,\n      _this = this;\n\n    if ((_ref = this.device) != null) {\n      _ref.stop();\n    }\n    this.queue.once('ready', function() {\n      var _ref1, _ref2;\n\n      if ((_ref1 = _this.device) != null) {\n        _ref1.seek(_this.currentTime);\n      }\n      if (_this.playing) {\n        return (_ref2 = _this.device) != null ? _ref2.start() : void 0;\n      }\n    });\n    timestamp = (timestamp / 1000) * this.format.sampleRate;\n    timestamp = this.asset.decoder.seek(timestamp);\n    this.currentTime = timestamp / this.format.sampleRate * 1000 | 0;\n    this.queue.reset();\n    return this.currentTime;\n  };\n\n  Player.prototype.startPlaying = function() {\n    var div, frame, frameOffset,\n      _this = this;\n\n    frame = this.queue.read();\n    frameOffset = 0;\n    div = this.format.floatingPoint ? 1 : Math.pow(2, this.format.bitsPerChannel - 1);\n    this.device = new AV.AudioDevice(this.format.sampleRate, this.format.channelsPerFrame);\n    this.device.on('timeUpdate', function(currentTime) {\n      _this.currentTime = currentTime;\n      return _this.emit('progress', _this.currentTime);\n    });\n    this.refill = function(buffer) {\n      var bufferOffset, filter, i, max, _i, _j, _len, _ref;\n\n      if (!_this.playing) {\n        return;\n      }\n      if (!frame) {\n        frame = _this.queue.read();\n        frameOffset = 0;\n      }\n      bufferOffset = 0;\n      while (frame && bufferOffset < buffer.length) {\n        max = Math.min(frame.length - frameOffset, buffer.length - bufferOffset);\n        for (i = _i = 0; _i < max; i = _i += 1) {\n          buffer[bufferOffset++] = frame[frameOffset++] / div;\n        }\n        if (frameOffset === frame.length) {\n          frame = _this.queue.read();\n          frameOffset = 0;\n        }\n      }\n      _ref = _this.filters;\n      for (_j = 0, _len = _ref.length; _j < _len; _j++) {\n        filter = _ref[_j];\n        filter.process(buffer);\n      }\n      if (!frame) {\n        if (_this.asset.ended) {\n          _this.currentTime = _this.duration;\n          _this.emit('progress', _this.currentTime);\n          _this.emit('end');\n          _this.stop();\n        } else {\n          _this.device.stop();\n        }\n      }\n    };\n    this.device.on('refill', this.refill);\n    if (this.playing) {\n      this.device.start();\n    }\n    return this.emit('ready');\n  };\n\n  return Player;\n\n})(AV.EventEmitter);\n//import \"player.coffee\";\n\n//import \"resampler.js\";\nvar WebKitAudioDevice,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nWebKitAudioDevice = (function(_super) {\n  var AudioContext, sharedContext;\n\n  __extends(WebKitAudioDevice, _super);\n\n  AV.AudioDevice.register(WebKitAudioDevice);\n\n  AudioContext = global.AudioContext || global.webkitAudioContext;\n\n  WebKitAudioDevice.supported = typeof (AudioContext != null ? AudioContext.prototype.createJavaScriptNode : void 0) === 'function';\n\n  sharedContext = null;\n\n  function WebKitAudioDevice(sampleRate, channels) {\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.refill = __bind(this.refill, this);\n    this.context = master != null ? master : sharedContext = new AudioContext;\n    this.deviceSampleRate = this.context.sampleRate;\n    this.bufferSize = Math.ceil(4096 / (this.deviceSampleRate / this.sampleRate) * this.channels);\n    this.bufferSize += this.bufferSize % this.channels;\n    if (this.deviceSampleRate !== this.sampleRate) {\n      this.resampler = new Resampler(this.sampleRate, this.deviceSampleRate, this.channels, 4096 * this.channels);\n    }\n    this.node = this.context.createJavaScriptNode(4096, this.channels, this.channels);\n    this.node.onaudioprocess = this.refill;\n//    this.node.connect(this.context.destination);\n  }\n\n  WebKitAudioDevice.prototype.refill = function(event) {\n    var channelCount, channels, data, i, n, outputBuffer, _i, _j, _k, _ref;\n\n    outputBuffer = event.outputBuffer;\n    channelCount = outputBuffer.numberOfChannels;\n    channels = new Array(channelCount);\n    for (i = _i = 0; _i < channelCount; i = _i += 1) {\n      channels[i] = outputBuffer.getChannelData(i);\n    }\n    data = new Float32Array(this.bufferSize);\n    this.emit('refill', data);\n    if (this.resampler) {\n      data = this.resampler.resampler(data);\n    }\n    for (i = _j = 0, _ref = outputBuffer.length; _j < _ref; i = _j += 1) {\n      for (n = _k = 0; _k < channelCount; n = _k += 1) {\n        channels[n][i] = data[i * channelCount + n];\n      }\n    }\n  };\n\n  WebKitAudioDevice.prototype.destroy = function() {\n    return this.node.disconnect(0);\n  };\n\n  WebKitAudioDevice.prototype.getDeviceTime = function() {\n    return this.context.currentTime * this.sampleRate;\n  };\n\n  return WebKitAudioDevice;\n\n})(AV.EventEmitter);\n//import \"devices/webkit.coffee\";\n\nvar MozillaAudioDevice,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nMozillaAudioDevice = (function(_super) {\n  var createTimer, destroyTimer;\n\n  __extends(MozillaAudioDevice, _super);\n\n  AV.AudioDevice.register(MozillaAudioDevice);\n\n  MozillaAudioDevice.supported = (typeof Audio !== \"undefined\" && Audio !== null) && 'mozWriteAudio' in new Audio;\n\n  function MozillaAudioDevice(sampleRate, channels) {\n    this.sampleRate = sampleRate;\n    this.channels = channels;\n    this.refill = __bind(this.refill, this);\n    this.audio = new Audio;\n    this.audio.mozSetup(this.channels, this.sampleRate);\n    this.writePosition = 0;\n    this.prebufferSize = this.sampleRate / 2;\n    this.tail = null;\n    this.timer = createTimer(this.refill, 100);\n  }\n\n  MozillaAudioDevice.prototype.refill = function() {\n    var available, buffer, currentPosition, written;\n\n    if (this.tail) {\n      written = this.audio.mozWriteAudio(this.tail);\n      this.writePosition += written;\n      if (this.writePosition < this.tail.length) {\n        this.tail = this.tail.subarray(written);\n      } else {\n        this.tail = null;\n      }\n    }\n    currentPosition = this.audio.mozCurrentSampleOffset();\n    available = currentPosition + this.prebufferSize - this.writePosition;\n    if (available > 0) {\n      buffer = new Float32Array(available);\n      this.emit('refill', buffer);\n      written = this.audio.mozWriteAudio(buffer);\n      if (written < buffer.length) {\n        this.tail = buffer.subarray(written);\n      }\n      this.writePosition += written;\n    }\n  };\n\n  MozillaAudioDevice.prototype.destroy = function() {\n    return destroyTimer(this.timer);\n  };\n\n  MozillaAudioDevice.prototype.getDeviceTime = function() {\n    return this.audio.mozCurrentSampleOffset() / this.channels;\n  };\n\n  createTimer = function(fn, interval) {\n    var url, worker;\n\n    url = AV.Buffer.makeBlobURL(\"setInterval(function() { postMessage('ping'); }, \" + interval + \");\");\n    if (url == null) {\n      return setInterval(fn, interval);\n    }\n    worker = new Worker(url);\n    worker.onmessage = fn;\n    worker.url = url;\n    return worker;\n  };\n\n  destroyTimer = function(timer) {\n    if (timer.terminate) {\n      timer.terminate();\n      return URL.revokeObjectURL(timer.url);\n    } else {\n      return clearInterval(timer);\n    }\n  };\n\n  return MozillaAudioDevice;\n\n})(AV.EventEmitter);\n//import \"devices/mozilla.coffee\";\n\nAV.Filter = (function() {\n  function Filter(context, key) {\n    if (context && key) {\n      Object.defineProperty(this, 'value', {\n        get: function() {\n          return context[key];\n        }\n      });\n    }\n  }\n\n  Filter.prototype.process = function(buffer) {};\n\n  return Filter;\n\n})();\n//import \"filter.coffee\";\n\nvar _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.VolumeFilter = (function(_super) {\n  __extends(VolumeFilter, _super);\n\n  function VolumeFilter() {\n    _ref = VolumeFilter.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  VolumeFilter.prototype.process = function(buffer) {\n    var i, vol, _i, _ref1;\n\n    if (this.value >= 100) {\n      return;\n    }\n    vol = Math.max(0, Math.min(100, this.value)) / 100;\n    for (i = _i = 0, _ref1 = buffer.length; _i < _ref1; i = _i += 1) {\n      buffer[i] *= vol;\n    }\n  };\n\n  return VolumeFilter;\n\n})(AV.Filter);\n//import \"filters/volume.coffee\";\n\nvar _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.BalanceFilter = (function(_super) {\n  __extends(BalanceFilter, _super);\n\n  function BalanceFilter() {\n    _ref = BalanceFilter.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  BalanceFilter.prototype.process = function(buffer) {\n    var i, pan, _i, _ref1;\n\n    if (this.value === 0) {\n      return;\n    }\n    pan = Math.max(-50, Math.min(50, this.value));\n    for (i = _i = 0, _ref1 = buffer.length; _i < _ref1; i = _i += 2) {\n      buffer[i] *= Math.min(1, (50 - pan) / 50);\n      buffer[i + 1] *= Math.min(1, (50 + pan) / 50);\n    }\n  };\n\n  return BalanceFilter;\n\n})(AV.Filter);\n//import \"filters/balance.coffee\";\n\nvar CAFDemuxer, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nCAFDemuxer = (function(_super) {\n  __extends(CAFDemuxer, _super);\n\n  function CAFDemuxer() {\n    _ref = CAFDemuxer.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Demuxer.register(CAFDemuxer);\n\n  CAFDemuxer.probe = function(buffer) {\n    return buffer.peekString(0, 4) === 'caff';\n  };\n\n  CAFDemuxer.prototype.readChunk = function() {\n    var buffer, byteOffset, cookie, entries, flags, i, key, metadata, offset, sampleOffset, value, _i, _j, _ref1;\n\n    if (!this.format && this.stream.available(64)) {\n      if (this.stream.readString(4) !== 'caff') {\n        return this.emit('error', \"Invalid CAF, does not begin with 'caff'\");\n      }\n      this.stream.advance(4);\n      if (this.stream.readString(4) !== 'desc') {\n        return this.emit('error', \"Invalid CAF, 'caff' is not followed by 'desc'\");\n      }\n      if (!(this.stream.readUInt32() === 0 && this.stream.readUInt32() === 32)) {\n        return this.emit('error', \"Invalid 'desc' size, should be 32\");\n      }\n      this.format = {};\n      this.format.sampleRate = this.stream.readFloat64();\n      this.format.formatID = this.stream.readString(4);\n      flags = this.stream.readUInt32();\n      if (this.format.formatID === 'lpcm') {\n        this.format.floatingPoint = Boolean(flags & 1);\n        this.format.littleEndian = Boolean(flags & 2);\n      }\n      this.format.bytesPerPacket = this.stream.readUInt32();\n      this.format.framesPerPacket = this.stream.readUInt32();\n      this.format.channelsPerFrame = this.stream.readUInt32();\n      this.format.bitsPerChannel = this.stream.readUInt32();\n      this.emit('format', this.format);\n    }\n    while (this.stream.available(1)) {\n      if (!this.headerCache) {\n        this.headerCache = {\n          type: this.stream.readString(4),\n          oversize: this.stream.readUInt32() !== 0,\n          size: this.stream.readUInt32()\n        };\n        if (this.headerCache.oversize) {\n          return this.emit('error', \"Holy Shit, an oversized file, not supported in JS\");\n        }\n      }\n      switch (this.headerCache.type) {\n        case 'kuki':\n          if (this.stream.available(this.headerCache.size)) {\n            if (this.format.formatID === 'aac ') {\n              offset = this.stream.offset + this.headerCache.size;\n              if (cookie = M4ADemuxer.readEsds(this.stream)) {\n                this.emit('cookie', cookie);\n              }\n              this.stream.seek(offset);\n            } else {\n              buffer = this.stream.readBuffer(this.headerCache.size);\n              this.emit('cookie', buffer);\n            }\n            this.headerCache = null;\n          }\n          break;\n        case 'pakt':\n          if (this.stream.available(this.headerCache.size)) {\n            if (this.stream.readUInt32() !== 0) {\n              return this.emit('error', 'Sizes greater than 32 bits are not supported.');\n            }\n            this.numPackets = this.stream.readUInt32();\n            if (this.stream.readUInt32() !== 0) {\n              return this.emit('error', 'Sizes greater than 32 bits are not supported.');\n            }\n            this.numFrames = this.stream.readUInt32();\n            this.primingFrames = this.stream.readUInt32();\n            this.remainderFrames = this.stream.readUInt32();\n            this.emit('duration', this.numFrames / this.format.sampleRate * 1000 | 0);\n            this.sentDuration = true;\n            byteOffset = 0;\n            sampleOffset = 0;\n            for (i = _i = 0, _ref1 = this.numPackets; _i < _ref1; i = _i += 1) {\n              this.addSeekPoint(byteOffset, sampleOffset);\n              byteOffset += this.format.bytesPerPacket || M4ADemuxer.readDescrLen(this.stream);\n              sampleOffset += this.format.framesPerPacket || M4ADemuxer.readDescrLen(this.stream);\n            }\n            this.headerCache = null;\n          }\n          break;\n        case 'info':\n          entries = this.stream.readUInt32();\n          metadata = {};\n          for (i = _j = 0; 0 <= entries ? _j < entries : _j > entries; i = 0 <= entries ? ++_j : --_j) {\n            key = this.stream.readString(null);\n            value = this.stream.readString(null);\n            metadata[key] = value;\n          }\n          this.emit('metadata', metadata);\n          this.headerCache = null;\n          break;\n        case 'data':\n          if (!this.sentFirstDataChunk) {\n            this.stream.advance(4);\n            this.headerCache.size -= 4;\n            if (this.format.bytesPerPacket !== 0 && !this.sentDuration) {\n              this.numFrames = this.headerCache.size / this.format.bytesPerPacket;\n              this.emit('duration', this.numFrames / this.format.sampleRate * 1000 | 0);\n            }\n            this.sentFirstDataChunk = true;\n          }\n          buffer = this.stream.readSingleBuffer(this.headerCache.size);\n          this.headerCache.size -= buffer.length;\n          this.emit('data', buffer);\n          if (this.headerCache.size <= 0) {\n            this.headerCache = null;\n          }\n          break;\n        default:\n          if (this.stream.available(this.headerCache.size)) {\n            this.stream.advance(this.headerCache.size);\n            this.headerCache = null;\n          }\n      }\n    }\n  };\n\n  return CAFDemuxer;\n\n})(AV.Demuxer);\n//import \"demuxers/caf.coffee\";\n\nvar M4ADemuxer, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nM4ADemuxer = (function(_super) {\n  var BITS_PER_CHANNEL, TYPES, after, atom, atoms, bool, containers, diskTrack, genres, meta, string;\n\n  __extends(M4ADemuxer, _super);\n\n  function M4ADemuxer() {\n    _ref = M4ADemuxer.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Demuxer.register(M4ADemuxer);\n\n  TYPES = ['M4A ', 'M4P ', 'M4B ', 'M4V ', 'isom', 'mp42', 'qt  '];\n\n  M4ADemuxer.probe = function(buffer) {\n    var _ref1;\n\n    return buffer.peekString(4, 4) === 'ftyp' && (_ref1 = buffer.peekString(8, 4), __indexOf.call(TYPES, _ref1) >= 0);\n  };\n\n  M4ADemuxer.prototype.init = function() {\n    this.atoms = [];\n    this.offsets = [];\n    this.track = null;\n    return this.tracks = [];\n  };\n\n  atoms = {};\n\n  containers = {};\n\n  atom = function(name, fn) {\n    var c, container, _i, _len, _ref1, _ref2;\n\n    c = [];\n    _ref1 = name.split('.').slice(0, -1);\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      container = _ref1[_i];\n      c.push(container);\n      containers[c.join('.')] = true;\n    }\n    if ((_ref2 = atoms[name]) == null) {\n      atoms[name] = {};\n    }\n    return atoms[name].fn = fn;\n  };\n\n  after = function(name, fn) {\n    var _ref1;\n\n    if ((_ref1 = atoms[name]) == null) {\n      atoms[name] = {};\n    }\n    return atoms[name].after = fn;\n  };\n\n  M4ADemuxer.prototype.readChunk = function() {\n    var handler, path, type;\n\n    this[\"break\"] = false;\n    while (this.stream.available(1) && !this[\"break\"]) {\n      if (!this.readHeaders) {\n        if (!this.stream.available(8)) {\n          return;\n        }\n        this.len = this.stream.readUInt32() - 8;\n        this.type = this.stream.readString(4);\n        if (this.len === 0) {\n          continue;\n        }\n        this.atoms.push(this.type);\n        this.offsets.push(this.stream.offset + this.len);\n        this.readHeaders = true;\n      }\n      path = this.atoms.join('.');\n      handler = atoms[path];\n      if (handler != null ? handler.fn : void 0) {\n        if (!(this.stream.available(this.len) || path === 'mdat')) {\n          return;\n        }\n        handler.fn.call(this);\n        if (path in containers) {\n          this.readHeaders = false;\n        }\n      } else if (path in containers) {\n        this.readHeaders = false;\n      } else {\n        if (!this.stream.available(this.len)) {\n          return;\n        }\n        this.stream.advance(this.len);\n      }\n      while (this.stream.offset >= this.offsets[this.offsets.length - 1]) {\n        handler = atoms[this.atoms.join('.')];\n        if (handler != null ? handler.after : void 0) {\n          handler.after.call(this);\n        }\n        type = this.atoms.pop();\n        this.offsets.pop();\n        this.readHeaders = false;\n      }\n    }\n  };\n\n  atom('ftyp', function() {\n    var _ref1;\n\n    if (_ref1 = this.stream.readString(4), __indexOf.call(TYPES, _ref1) < 0) {\n      return this.emit('error', 'Not a valid M4A file.');\n    }\n    return this.stream.advance(this.len - 4);\n  });\n\n  atom('moov.trak', function() {\n    this.track = {};\n    return this.tracks.push(this.track);\n  });\n\n  atom('moov.trak.tkhd', function() {\n    this.stream.advance(4);\n    this.stream.advance(8);\n    this.track.id = this.stream.readUInt32();\n    return this.stream.advance(this.len - 16);\n  });\n\n  atom('moov.trak.mdia.hdlr', function() {\n    this.stream.advance(4);\n    this.stream.advance(4);\n    this.track.type = this.stream.readString(4);\n    this.stream.advance(12);\n    return this.stream.advance(this.len - 24);\n  });\n\n  atom('moov.trak.mdia.mdhd', function() {\n    this.stream.advance(4);\n    this.stream.advance(8);\n    this.track.timeScale = this.stream.readUInt32();\n    this.track.duration = this.stream.readUInt32();\n    return this.stream.advance(4);\n  });\n\n  BITS_PER_CHANNEL = {\n    ulaw: 8,\n    alaw: 8,\n    in24: 24,\n    in32: 32,\n    fl32: 32,\n    fl64: 64\n  };\n\n  atom('moov.trak.mdia.minf.stbl.stsd', function() {\n    var format, numEntries, version, _ref1, _ref2;\n\n    this.stream.advance(4);\n    numEntries = this.stream.readUInt32();\n    if (this.track.type !== 'soun') {\n      return this.stream.advance(this.len - 8);\n    }\n    if (numEntries !== 1) {\n      return this.emit('error', \"Only expecting one entry in sample description atom!\");\n    }\n    this.stream.advance(4);\n    format = this.track.format = {};\n    format.formatID = this.stream.readString(4);\n    this.stream.advance(6);\n    this.stream.advance(2);\n    version = this.stream.readUInt16();\n    this.stream.advance(6);\n    format.channelsPerFrame = this.stream.readUInt16();\n    format.bitsPerChannel = this.stream.readUInt16();\n    this.stream.advance(4);\n    format.sampleRate = this.stream.readUInt16();\n    this.stream.advance(2);\n    if (version === 1) {\n      format.framesPerPacket = this.stream.readUInt32();\n      this.stream.advance(4);\n      format.bytesPerFrame = this.stream.readUInt32();\n      this.stream.advance(4);\n    } else if (version !== 0) {\n      this.emit('error', 'Unknown version in stsd atom');\n    }\n    if (BITS_PER_CHANNEL[format.formatID] != null) {\n      format.bitsPerChannel = BITS_PER_CHANNEL[format.formatID];\n    }\n    format.floatingPoint = (_ref1 = format.formatID) === 'fl32' || _ref1 === 'fl64';\n    format.littleEndian = format.formatID === 'sowt' && format.bitsPerChannel > 8;\n    if ((_ref2 = format.formatID) === 'twos' || _ref2 === 'sowt' || _ref2 === 'in24' || _ref2 === 'in32' || _ref2 === 'fl32' || _ref2 === 'fl64' || _ref2 === 'raw ' || _ref2 === 'NONE') {\n      return format.formatID = 'lpcm';\n    }\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stsd.alac', function() {\n    this.stream.advance(4);\n    return this.track.cookie = this.stream.readBuffer(this.len - 4);\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stsd.esds', function() {\n    var offset;\n\n    offset = this.stream.offset + this.len;\n    this.track.cookie = M4ADemuxer.readEsds(this.stream);\n    return this.stream.seek(offset);\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stsd.wave.enda', function() {\n    return this.track.format.littleEndian = !!this.stream.readUInt16();\n  });\n\n  M4ADemuxer.readDescrLen = function(stream) {\n    var c, count, len;\n\n    len = 0;\n    count = 4;\n    while (count--) {\n      c = stream.readUInt8();\n      len = (len << 7) | (c & 0x7f);\n      if (!(c & 0x80)) {\n        break;\n      }\n    }\n    return len;\n  };\n\n  M4ADemuxer.readEsds = function(stream) {\n    var codec_id, flags, len, tag;\n\n    stream.advance(4);\n    tag = stream.readUInt8();\n    len = M4ADemuxer.readDescrLen(stream);\n    if (tag === 0x03) {\n      stream.advance(2);\n      flags = stream.readUInt8();\n      if (flags & 0x80) {\n        stream.advance(2);\n      }\n      if (flags & 0x40) {\n        stream.advance(stream.readUInt8());\n      }\n      if (flags & 0x20) {\n        stream.advance(2);\n      }\n    } else {\n      stream.advance(2);\n    }\n    tag = stream.readUInt8();\n    len = M4ADemuxer.readDescrLen(stream);\n    if (tag === 0x04) {\n      codec_id = stream.readUInt8();\n      stream.advance(1);\n      stream.advance(3);\n      stream.advance(4);\n      stream.advance(4);\n      tag = stream.readUInt8();\n      len = M4ADemuxer.readDescrLen(stream);\n      if (tag === 0x05) {\n        return stream.readBuffer(len);\n      }\n    }\n    return null;\n  };\n\n  atom('moov.trak.mdia.minf.stbl.stts', function() {\n    var entries, i, _i;\n\n    this.stream.advance(4);\n    entries = this.stream.readUInt32();\n    this.track.stts = [];\n    for (i = _i = 0; _i < entries; i = _i += 1) {\n      this.track.stts[i] = {\n        count: this.stream.readUInt32(),\n        duration: this.stream.readUInt32()\n      };\n    }\n    return this.setupSeekPoints();\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stsc', function() {\n    var entries, i, _i;\n\n    this.stream.advance(4);\n    entries = this.stream.readUInt32();\n    this.track.stsc = [];\n    for (i = _i = 0; _i < entries; i = _i += 1) {\n      this.track.stsc[i] = {\n        first: this.stream.readUInt32(),\n        count: this.stream.readUInt32(),\n        id: this.stream.readUInt32()\n      };\n    }\n    return this.setupSeekPoints();\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stsz', function() {\n    var entries, i, _i;\n\n    this.stream.advance(4);\n    this.track.sampleSize = this.stream.readUInt32();\n    entries = this.stream.readUInt32();\n    if (this.track.sampleSize === 0 && entries > 0) {\n      this.track.sampleSizes = [];\n      for (i = _i = 0; _i < entries; i = _i += 1) {\n        this.track.sampleSizes[i] = this.stream.readUInt32();\n      }\n    }\n    return this.setupSeekPoints();\n  });\n\n  atom('moov.trak.mdia.minf.stbl.stco', function() {\n    var entries, i, _i;\n\n    this.stream.advance(4);\n    entries = this.stream.readUInt32();\n    this.track.chunkOffsets = [];\n    for (i = _i = 0; _i < entries; i = _i += 1) {\n      this.track.chunkOffsets[i] = this.stream.readUInt32();\n    }\n    return this.setupSeekPoints();\n  });\n\n  atom('moov.trak.tref.chap', function() {\n    var entries, i, _i;\n\n    entries = this.len >> 2;\n    this.track.chapterTracks = [];\n    for (i = _i = 0; _i < entries; i = _i += 1) {\n      this.track.chapterTracks[i] = this.stream.readUInt32();\n    }\n  });\n\n  M4ADemuxer.prototype.setupSeekPoints = function() {\n    var i, j, offset, position, sampleIndex, size, stscIndex, sttsIndex, sttsSample, timestamp, _i, _j, _len, _ref1, _ref2, _results;\n\n    if (!((this.track.chunkOffsets != null) && (this.track.stsc != null) && (this.track.sampleSize != null) && (this.track.stts != null))) {\n      return;\n    }\n    stscIndex = 0;\n    sttsIndex = 0;\n    sttsIndex = 0;\n    sttsSample = 0;\n    sampleIndex = 0;\n    offset = 0;\n    timestamp = 0;\n    this.track.seekPoints = [];\n    _ref1 = this.track.chunkOffsets;\n    _results = [];\n    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {\n      position = _ref1[i];\n      for (j = _j = 0, _ref2 = this.track.stsc[stscIndex].count; _j < _ref2; j = _j += 1) {\n        this.track.seekPoints.push({\n          offset: offset,\n          position: position,\n          timestamp: timestamp\n        });\n        size = this.track.sampleSize || this.track.sampleSizes[sampleIndex++];\n        offset += size;\n        position += size;\n        timestamp += this.track.stts[sttsIndex].duration;\n        if (sttsIndex + 1 < this.track.stts.length && ++sttsSample === this.track.stts[sttsIndex].count) {\n          sttsSample = 0;\n          sttsIndex++;\n        }\n      }\n      if (stscIndex + 1 < this.track.stsc.length && i + 1 === this.track.stsc[stscIndex + 1].first) {\n        _results.push(stscIndex++);\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  after('moov', function() {\n    var track, _i, _len, _ref1;\n\n    if (this.mdatOffset != null) {\n      this.stream.seek(this.mdatOffset - 8);\n    }\n    _ref1 = this.tracks;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      track = _ref1[_i];\n      if (!(track.type === 'soun')) {\n        continue;\n      }\n      this.track = track;\n      break;\n    }\n    if (this.track.type !== 'soun') {\n      this.track = null;\n      return this.emit('error', 'No audio tracks in m4a file.');\n    }\n    this.emit('format', this.track.format);\n    this.emit('duration', this.track.duration / this.track.timeScale * 1000 | 0);\n    if (this.track.cookie) {\n      this.emit('cookie', this.track.cookie);\n    }\n    return this.seekPoints = this.track.seekPoints;\n  });\n\n  atom('mdat', function() {\n    var bytes, chunkSize, length, numSamples, offset, sample, size, _i, _ref1;\n\n    if (!this.startedData) {\n      if ((_ref1 = this.mdatOffset) == null) {\n        this.mdatOffset = this.stream.offset;\n      }\n      if (this.tracks.length === 0) {\n        bytes = Math.min(this.stream.remainingBytes(), this.len);\n        this.stream.advance(bytes);\n        this.len -= bytes;\n        return;\n      }\n      this.chunkIndex = 0;\n      this.stscIndex = 0;\n      this.sampleIndex = 0;\n      this.tailOffset = 0;\n      this.tailSamples = 0;\n      this.startedData = true;\n    }\n    if (!this.readChapters) {\n      this.readChapters = this.parseChapters();\n      if (this[\"break\"] = !this.readChapters) {\n        return;\n      }\n      this.stream.seek(this.mdatOffset);\n    }\n    offset = this.track.chunkOffsets[this.chunkIndex] + this.tailOffset;\n    length = 0;\n    if (!this.stream.available(offset - this.stream.offset)) {\n      this[\"break\"] = true;\n      return;\n    }\n    this.stream.seek(offset);\n    while (this.chunkIndex < this.track.chunkOffsets.length) {\n      numSamples = this.track.stsc[this.stscIndex].count - this.tailSamples;\n      chunkSize = 0;\n      for (sample = _i = 0; _i < numSamples; sample = _i += 1) {\n        size = this.track.sampleSize || this.track.sampleSizes[this.sampleIndex];\n        if (!this.stream.available(length + size)) {\n          break;\n        }\n        length += size;\n        chunkSize += size;\n        this.sampleIndex++;\n      }\n      if (sample < numSamples) {\n        this.tailOffset += chunkSize;\n        this.tailSamples += sample;\n        break;\n      } else {\n        this.chunkIndex++;\n        this.tailOffset = 0;\n        this.tailSamples = 0;\n        if (this.stscIndex + 1 < this.track.stsc.length && this.chunkIndex + 1 === this.track.stsc[this.stscIndex + 1].first) {\n          this.stscIndex++;\n        }\n        if (offset + length !== this.track.chunkOffsets[this.chunkIndex]) {\n          break;\n        }\n      }\n    }\n    if (length > 0) {\n      this.emit('data', this.stream.readBuffer(length));\n      return this[\"break\"] = this.chunkIndex === this.track.chunkOffsets.length;\n    } else {\n      return this[\"break\"] = true;\n    }\n  });\n\n  M4ADemuxer.prototype.parseChapters = function() {\n    var bom, id, len, nextTimestamp, point, title, track, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;\n\n    if (!(((_ref1 = this.track.chapterTracks) != null ? _ref1.length : void 0) > 0)) {\n      return true;\n    }\n    id = this.track.chapterTracks[0];\n    _ref2 = this.tracks;\n    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n      track = _ref2[_i];\n      if (track.id === id) {\n        break;\n      }\n    }\n    if (track.id !== id) {\n      this.emit('error', 'Chapter track does not exist.');\n    }\n    if ((_ref3 = this.chapters) == null) {\n      this.chapters = [];\n    }\n    while (this.chapters.length < track.seekPoints.length) {\n      point = track.seekPoints[this.chapters.length];\n      if (!this.stream.available(point.position - this.stream.offset + 32)) {\n        return false;\n      }\n      this.stream.seek(point.position);\n      len = this.stream.readUInt16();\n      title = null;\n      if (!this.stream.available(len)) {\n        return false;\n      }\n      if (len > 2) {\n        bom = this.stream.peekUInt16();\n        if (bom === 0xfeff || bom === 0xfffe) {\n          title = this.stream.readString(len, 'utf16-bom');\n        }\n      }\n      if (title == null) {\n        title = this.stream.readString(len, 'utf8');\n      }\n      nextTimestamp = (_ref4 = (_ref5 = track.seekPoints[this.chapters.length + 1]) != null ? _ref5.timestamp : void 0) != null ? _ref4 : track.duration;\n      this.chapters.push({\n        title: title,\n        timestamp: point.timestamp / track.timeScale * 1000 | 0,\n        duration: (nextTimestamp - point.timestamp) / track.timeScale * 1000 | 0\n      });\n    }\n    this.emit('chapters', this.chapters);\n    return true;\n  };\n\n  atom('moov.udta.meta', function() {\n    this.metadata = {};\n    return this.stream.advance(4);\n  });\n\n  after('moov.udta.meta', function() {\n    return this.emit('metadata', this.metadata);\n  });\n\n  meta = function(field, name, fn) {\n    return atom(\"moov.udta.meta.ilst.\" + field + \".data\", function() {\n      this.stream.advance(8);\n      this.len -= 8;\n      return fn.call(this, name);\n    });\n  };\n\n  string = function(field) {\n    return this.metadata[field] = this.stream.readString(this.len, 'utf8');\n  };\n\n  meta('©alb', 'album', string);\n\n  meta('©arg', 'arranger', string);\n\n  meta('©art', 'artist', string);\n\n  meta('©ART', 'artist', string);\n\n  meta('aART', 'albumArtist', string);\n\n  meta('catg', 'category', string);\n\n  meta('©com', 'composer', string);\n\n  meta('©cpy', 'copyright', string);\n\n  meta('cprt', 'copyright', string);\n\n  meta('©cmt', 'comments', string);\n\n  meta('©day', 'releaseDate', string);\n\n  meta('desc', 'description', string);\n\n  meta('©gen', 'genre', string);\n\n  meta('©grp', 'grouping', string);\n\n  meta('©isr', 'ISRC', string);\n\n  meta('keyw', 'keywords', string);\n\n  meta('©lab', 'recordLabel', string);\n\n  meta('ldes', 'longDescription', string);\n\n  meta('©lyr', 'lyrics', string);\n\n  meta('©nam', 'title', string);\n\n  meta('©phg', 'recordingCopyright', string);\n\n  meta('©prd', 'producer', string);\n\n  meta('©prf', 'performers', string);\n\n  meta('purd', 'purchaseDate', string);\n\n  meta('purl', 'podcastURL', string);\n\n  meta('©swf', 'songwriter', string);\n\n  meta('©too', 'encoder', string);\n\n  meta('©wrt', 'composer', string);\n\n  meta('covr', 'coverArt', function(field) {\n    return this.metadata[field] = this.stream.readBuffer(this.len);\n  });\n\n  genres = [\"Blues\", \"Classic Rock\", \"Country\", \"Dance\", \"Disco\", \"Funk\", \"Grunge\", \"Hip-Hop\", \"Jazz\", \"Metal\", \"New Age\", \"Oldies\", \"Other\", \"Pop\", \"R&B\", \"Rap\", \"Reggae\", \"Rock\", \"Techno\", \"Industrial\", \"Alternative\", \"Ska\", \"Death Metal\", \"Pranks\", \"Soundtrack\", \"Euro-Techno\", \"Ambient\", \"Trip-Hop\", \"Vocal\", \"Jazz+Funk\", \"Fusion\", \"Trance\", \"Classical\", \"Instrumental\", \"Acid\", \"House\", \"Game\", \"Sound Clip\", \"Gospel\", \"Noise\", \"AlternRock\", \"Bass\", \"Soul\", \"Punk\", \"Space\", \"Meditative\", \"Instrumental Pop\", \"Instrumental Rock\", \"Ethnic\", \"Gothic\", \"Darkwave\", \"Techno-Industrial\", \"Electronic\", \"Pop-Folk\", \"Eurodance\", \"Dream\", \"Southern Rock\", \"Comedy\", \"Cult\", \"Gangsta\", \"Top 40\", \"Christian Rap\", \"Pop/Funk\", \"Jungle\", \"Native American\", \"Cabaret\", \"New Wave\", \"Psychadelic\", \"Rave\", \"Showtunes\", \"Trailer\", \"Lo-Fi\", \"Tribal\", \"Acid Punk\", \"Acid Jazz\", \"Polka\", \"Retro\", \"Musical\", \"Rock & Roll\", \"Hard Rock\", \"Folk\", \"Folk/Rock\", \"National Folk\", \"Swing\", \"Fast Fusion\", \"Bebob\", \"Latin\", \"Revival\", \"Celtic\", \"Bluegrass\", \"Avantgarde\", \"Gothic Rock\", \"Progressive Rock\", \"Psychedelic Rock\", \"Symphonic Rock\", \"Slow Rock\", \"Big Band\", \"Chorus\", \"Easy Listening\", \"Acoustic\", \"Humour\", \"Speech\", \"Chanson\", \"Opera\", \"Chamber Music\", \"Sonata\", \"Symphony\", \"Booty Bass\", \"Primus\", \"Porn Groove\", \"Satire\", \"Slow Jam\", \"Club\", \"Tango\", \"Samba\", \"Folklore\", \"Ballad\", \"Power Ballad\", \"Rhythmic Soul\", \"Freestyle\", \"Duet\", \"Punk Rock\", \"Drum Solo\", \"A Capella\", \"Euro-House\", \"Dance Hall\"];\n\n  meta('gnre', 'genre', function(field) {\n    return this.metadata[field] = genres[this.stream.readUInt16() - 1];\n  });\n\n  meta('tmpo', 'tempo', function(field) {\n    return this.metadata[field] = this.stream.readUInt16();\n  });\n\n  meta('rtng', 'rating', function(field) {\n    var rating;\n\n    rating = this.stream.readUInt8();\n    return this.metadata[field] = rating === 2 ? 'Clean' : rating !== 0 ? 'Explicit' : 'None';\n  });\n\n  diskTrack = function(field) {\n    this.stream.advance(2);\n    this.metadata[field] = this.stream.readUInt16() + ' of ' + this.stream.readUInt16();\n    return this.stream.advance(this.len - 6);\n  };\n\n  meta('disk', 'diskNumber', diskTrack);\n\n  meta('trkn', 'trackNumber', diskTrack);\n\n  bool = function(field) {\n    return this.metadata[field] = this.stream.readUInt8() === 1;\n  };\n\n  meta('cpil', 'compilation', bool);\n\n  meta('pcst', 'podcast', bool);\n\n  meta('pgap', 'gapless', bool);\n\n  return M4ADemuxer;\n\n})(AV.Demuxer);\n//import \"demuxers/m4a.coffee\";\n\nvar AIFFDemuxer, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAIFFDemuxer = (function(_super) {\n  __extends(AIFFDemuxer, _super);\n\n  function AIFFDemuxer() {\n    _ref = AIFFDemuxer.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Demuxer.register(AIFFDemuxer);\n\n  AIFFDemuxer.probe = function(buffer) {\n    var _ref1;\n\n    return buffer.peekString(0, 4) === 'FORM' && ((_ref1 = buffer.peekString(8, 4)) === 'AIFF' || _ref1 === 'AIFC');\n  };\n\n  AIFFDemuxer.prototype.readChunk = function() {\n    var buffer, format, offset, _ref1;\n\n    if (!this.readStart && this.stream.available(12)) {\n      if (this.stream.readString(4) !== 'FORM') {\n        return this.emit('error', 'Invalid AIFF.');\n      }\n      this.fileSize = this.stream.readUInt32();\n      this.fileType = this.stream.readString(4);\n      this.readStart = true;\n      if ((_ref1 = this.fileType) !== 'AIFF' && _ref1 !== 'AIFC') {\n        return this.emit('error', 'Invalid AIFF.');\n      }\n    }\n    while (this.stream.available(1)) {\n      if (!this.readHeaders && this.stream.available(8)) {\n        this.type = this.stream.readString(4);\n        this.len = this.stream.readUInt32();\n      }\n      switch (this.type) {\n        case 'COMM':\n          if (!this.stream.available(this.len)) {\n            return;\n          }\n          this.format = {\n            formatID: 'lpcm',\n            channelsPerFrame: this.stream.readUInt16(),\n            sampleCount: this.stream.readUInt32(),\n            bitsPerChannel: this.stream.readUInt16(),\n            sampleRate: this.stream.readFloat80(),\n            framesPerPacket: 1,\n            littleEndian: false,\n            floatingPoint: false\n          };\n          this.format.bytesPerPacket = (this.format.bitsPerChannel / 8) * this.format.channelsPerFrame;\n          if (this.fileType === 'AIFC') {\n            format = this.stream.readString(4);\n            this.format.littleEndian = format === 'sowt' && this.format.bitsPerChannel > 8;\n            this.format.floatingPoint = format === 'fl32' || format === 'fl64';\n            if (format === 'twos' || format === 'sowt' || format === 'fl32' || format === 'fl64' || format === 'NONE') {\n              format = 'lpcm';\n            }\n            this.format.formatID = format;\n            this.len -= 4;\n          }\n          this.stream.advance(this.len - 18);\n          this.emit('format', this.format);\n          this.emit('duration', this.format.sampleCount / this.format.sampleRate * 1000 | 0);\n          break;\n        case 'SSND':\n          if (!(this.readSSNDHeader && this.stream.available(4))) {\n            offset = this.stream.readUInt32();\n            this.stream.advance(4);\n            this.stream.advance(offset);\n            this.readSSNDHeader = true;\n          }\n          buffer = this.stream.readSingleBuffer(this.len);\n          this.len -= buffer.length;\n          this.readHeaders = this.len > 0;\n          this.emit('data', buffer);\n          break;\n        default:\n          if (!this.stream.available(this.len)) {\n            return;\n          }\n          this.stream.advance(this.len);\n      }\n      if (this.type !== 'SSND') {\n        this.readHeaders = false;\n      }\n    }\n  };\n\n  return AIFFDemuxer;\n\n})(AV.Demuxer);\n//import \"demuxers/aiff.coffee\";\n\nvar WAVEDemuxer, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nWAVEDemuxer = (function(_super) {\n  var formats;\n\n  __extends(WAVEDemuxer, _super);\n\n  function WAVEDemuxer() {\n    _ref = WAVEDemuxer.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Demuxer.register(WAVEDemuxer);\n\n  WAVEDemuxer.probe = function(buffer) {\n    return buffer.peekString(0, 4) === 'RIFF' && buffer.peekString(8, 4) === 'WAVE';\n  };\n\n  formats = {\n    0x0001: 'lpcm',\n    0x0003: 'lpcm',\n    0x0006: 'alaw',\n    0x0007: 'ulaw'\n  };\n\n  WAVEDemuxer.prototype.readChunk = function() {\n    var buffer, bytes, encoding;\n\n    if (!this.readStart && this.stream.available(12)) {\n      if (this.stream.readString(4) !== 'RIFF') {\n        return this.emit('error', 'Invalid WAV file.');\n      }\n      this.fileSize = this.stream.readUInt32(true);\n      this.readStart = true;\n      if (this.stream.readString(4) !== 'WAVE') {\n        return this.emit('error', 'Invalid WAV file.');\n      }\n    }\n    while (this.stream.available(1)) {\n      if (!this.readHeaders && this.stream.available(8)) {\n        this.type = this.stream.readString(4);\n        this.len = this.stream.readUInt32(true);\n      }\n      switch (this.type) {\n        case 'fmt ':\n          encoding = this.stream.readUInt16(true);\n          if (!(encoding in formats)) {\n            return this.emit('error', 'Unsupported format in WAV file.');\n          }\n          this.format = {\n            formatID: formats[encoding],\n            floatingPoint: encoding === 0x0003,\n            littleEndian: formats[encoding] === 'lpcm',\n            channelsPerFrame: this.stream.readUInt16(true),\n            sampleRate: this.stream.readUInt32(true),\n            framesPerPacket: 1\n          };\n          this.stream.advance(4);\n          this.stream.advance(2);\n          this.format.bitsPerChannel = this.stream.readUInt16(true);\n          this.format.bytesPerPacket = (this.format.bitsPerChannel / 8) * this.format.channelsPerFrame;\n          this.emit('format', this.format);\n          break;\n        case 'data':\n          if (!this.sentDuration) {\n            bytes = this.format.bitsPerChannel / 8;\n            this.emit('duration', this.len / bytes / this.format.channelsPerFrame / this.format.sampleRate * 1000 | 0);\n            this.sentDuration = true;\n          }\n          buffer = this.stream.readSingleBuffer(this.len);\n          this.len -= buffer.length;\n          this.readHeaders = this.len > 0;\n          this.emit('data', buffer);\n          break;\n        default:\n          if (!this.stream.available(this.len)) {\n            return;\n          }\n          this.stream.advance(this.len);\n      }\n      if (this.type !== 'data') {\n        this.readHeaders = false;\n      }\n    }\n  };\n\n  return WAVEDemuxer;\n\n})(AV.Demuxer);\n//import \"demuxers/wave.coffee\";\n\nvar AUDemuxer, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAUDemuxer = (function(_super) {\n  var bps, formats;\n\n  __extends(AUDemuxer, _super);\n\n  function AUDemuxer() {\n    _ref = AUDemuxer.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Demuxer.register(AUDemuxer);\n\n  AUDemuxer.probe = function(buffer) {\n    return buffer.peekString(0, 4) === '.snd';\n  };\n\n  bps = [8, 8, 16, 24, 32, 32, 64];\n\n  bps[26] = 8;\n\n  formats = {\n    1: 'ulaw',\n    27: 'alaw'\n  };\n\n  AUDemuxer.prototype.readChunk = function() {\n    var bytes, dataSize, encoding, size;\n\n    if (!this.readHeader && this.stream.available(24)) {\n      if (this.stream.readString(4) !== '.snd') {\n        return this.emit('error', 'Invalid AU file.');\n      }\n      size = this.stream.readUInt32();\n      dataSize = this.stream.readUInt32();\n      encoding = this.stream.readUInt32();\n      this.format = {\n        formatID: formats[encoding] || 'lpcm',\n        littleEndian: false,\n        floatingPoint: encoding === 6 || encoding === 7,\n        bitsPerChannel: bps[encoding - 1],\n        sampleRate: this.stream.readUInt32(),\n        channelsPerFrame: this.stream.readUInt32(),\n        framesPerPacket: 1\n      };\n      if (this.format.bitsPerChannel == null) {\n        return this.emit('error', 'Unsupported encoding in AU file.');\n      }\n      this.format.bytesPerPacket = (this.format.bitsPerChannel / 8) * this.format.channelsPerFrame;\n      if (dataSize !== 0xffffffff) {\n        bytes = this.format.bitsPerChannel / 8;\n        this.emit('duration', dataSize / bytes / this.format.channelsPerFrame / this.format.sampleRate * 1000 | 0);\n      }\n      this.emit('format', this.format);\n      this.readHeader = true;\n    }\n    if (this.readHeader) {\n      while (this.stream.available(1)) {\n        this.emit('data', this.stream.readSingleBuffer(this.stream.remainingBytes()));\n      }\n    }\n  };\n\n  return AUDemuxer;\n\n})(AV.Demuxer);\n//import \"demuxers/au.coffee\";\n\nvar LPCMDecoder, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nLPCMDecoder = (function(_super) {\n  __extends(LPCMDecoder, _super);\n\n  function LPCMDecoder() {\n    this.readChunk = __bind(this.readChunk, this);    _ref = LPCMDecoder.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Decoder.register('lpcm', LPCMDecoder);\n\n  LPCMDecoder.prototype.readChunk = function() {\n    var chunkSize, i, littleEndian, output, samples, stream, _i, _j, _k, _l, _m, _n;\n\n    stream = this.stream;\n    littleEndian = this.format.littleEndian;\n    chunkSize = Math.min(4096, stream.remainingBytes());\n    samples = chunkSize / (this.format.bitsPerChannel / 8) | 0;\n    if (chunkSize < this.format.bitsPerChannel / 8) {\n      return null;\n    }\n    if (this.format.floatingPoint) {\n      switch (this.format.bitsPerChannel) {\n        case 32:\n          output = new Float32Array(samples);\n          for (i = _i = 0; _i < samples; i = _i += 1) {\n            output[i] = stream.readFloat32(littleEndian);\n          }\n          break;\n        case 64:\n          output = new Float64Array(samples);\n          for (i = _j = 0; _j < samples; i = _j += 1) {\n            output[i] = stream.readFloat64(littleEndian);\n          }\n          break;\n        default:\n          throw new Error('Unsupported bit depth.');\n      }\n    } else {\n      switch (this.format.bitsPerChannel) {\n        case 8:\n          output = new Int8Array(samples);\n          for (i = _k = 0; _k < samples; i = _k += 1) {\n            output[i] = stream.readInt8();\n          }\n          break;\n        case 16:\n          output = new Int16Array(samples);\n          for (i = _l = 0; _l < samples; i = _l += 1) {\n            output[i] = stream.readInt16(littleEndian);\n          }\n          break;\n        case 24:\n          output = new Int32Array(samples);\n          for (i = _m = 0; _m < samples; i = _m += 1) {\n            output[i] = stream.readInt24(littleEndian);\n          }\n          break;\n        case 32:\n          output = new Int32Array(samples);\n          for (i = _n = 0; _n < samples; i = _n += 1) {\n            output[i] = stream.readInt32(littleEndian);\n          }\n          break;\n        default:\n          throw new Error('Unsupported bit depth.');\n      }\n    }\n    return output;\n  };\n\n  return LPCMDecoder;\n\n})(AV.Decoder);\n//import \"decoders/lpcm.coffee\";\n\nvar XLAWDecoder, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nXLAWDecoder = (function(_super) {\n  var BIAS, QUANT_MASK, SEG_MASK, SEG_SHIFT, SIGN_BIT;\n\n  __extends(XLAWDecoder, _super);\n\n  function XLAWDecoder() {\n    this.readChunk = __bind(this.readChunk, this);    _ref = XLAWDecoder.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  AV.Decoder.register('ulaw', XLAWDecoder);\n\n  AV.Decoder.register('alaw', XLAWDecoder);\n\n  SIGN_BIT = 0x80;\n\n  QUANT_MASK = 0xf;\n\n  SEG_SHIFT = 4;\n\n  SEG_MASK = 0x70;\n\n  BIAS = 0x84;\n\n  XLAWDecoder.prototype.init = function() {\n    var i, seg, t, table, val, _i, _j;\n\n    this.format.bitsPerChannel = 16;\n    this.table = table = new Int16Array(256);\n    if (this.format.formatID === 'ulaw') {\n      for (i = _i = 0; _i < 256; i = ++_i) {\n        val = ~i;\n        t = ((val & QUANT_MASK) << 3) + BIAS;\n        t <<= (val & SEG_MASK) >>> SEG_SHIFT;\n        table[i] = val & SIGN_BIT ? BIAS - t : t - BIAS;\n      }\n    } else {\n      for (i = _j = 0; _j < 256; i = ++_j) {\n        val = i ^ 0x55;\n        t = val & QUANT_MASK;\n        seg = (val & SEG_MASK) >>> SEG_SHIFT;\n        if (seg) {\n          t = (t + t + 1 + 32) << (seg + 2);\n        } else {\n          t = (t + t + 1) << 3;\n        }\n        table[i] = val & SIGN_BIT ? t : -t;\n      }\n    }\n  };\n\n  XLAWDecoder.prototype.readChunk = function() {\n    var i, output, samples, stream, table, _i;\n\n    stream = this.stream, table = this.table;\n    samples = Math.min(4096, this.stream.remainingBytes());\n    if (samples === 0) {\n      return;\n    }\n    output = new Int16Array(samples);\n    for (i = _i = 0; _i < samples; i = _i += 1) {\n      output[i] = table[stream.readUInt8()];\n    }\n    return output;\n  };\n\n  return XLAWDecoder;\n\n})(AV.Decoder);\n//import \"decoders/xlaw.coffee\";\n//import \"src/aurora.coffee\";\n  var __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.HTTPSource = (function(_super) {\n  __extends(HTTPSource, _super);\n\n  function HTTPSource(url) {\n    this.url = url;\n    this.chunkSize = 1 << 20;\n    this.inflight = false;\n    this.reset();\n  }\n\n  HTTPSource.prototype.start = function() {\n    var _this = this;\n\n    if (this.length) {\n      if (!this.inflight) {\n        return this.loop();\n      }\n    }\n    this.inflight = true;\n    this.xhr = new XMLHttpRequest();\n    this.xhr.onload = function(event) {\n      _this.length = parseInt(_this.xhr.getResponseHeader(\"Content-Length\"));\n      _this.inflight = false;\n      return _this.loop();\n    };\n    this.xhr.onerror = function(err) {\n      _this.pause();\n      return _this.emit('error', err);\n    };\n    this.xhr.onabort = function(event) {\n      return _this.inflight = false;\n    };\n    this.xhr.open(\"HEAD\", this.url, true);\n    return this.xhr.send(null);\n  };\n\n  HTTPSource.prototype.loop = function() {\n    var endPos,\n      _this = this;\n\n    if (this.inflight || !this.length) {\n      return this.emit('error', 'Something is wrong in HTTPSource.loop');\n    }\n    this.inflight = true;\n    this.xhr = new XMLHttpRequest();\n    this.xhr.onload = function(event) {\n      var buf, buffer, i, txt, _i, _ref;\n\n      if (_this.xhr.response) {\n        buf = new Uint8Array(_this.xhr.response);\n      } else {\n        txt = _this.xhr.responseText;\n        buf = new Uint8Array(txt.length);\n        for (i = _i = 0, _ref = txt.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\n          buf[i] = txt.charCodeAt(i) & 0xff;\n        }\n      }\n      buffer = new AV.Buffer(buf);\n      _this.offset += buffer.length;\n      _this.emit('data', buffer);\n      if (_this.offset >= _this.length) {\n        _this.emit('end');\n      }\n      _this.inflight = false;\n      if (!(_this.offset >= _this.length)) {\n        return _this.loop();\n      }\n    };\n    this.xhr.onprogress = function(event) {\n      return _this.emit('progress', (_this.offset + event.loaded) / _this.length * 100);\n    };\n    this.xhr.onerror = function(err) {\n      _this.emit('error', err);\n      return _this.pause();\n    };\n    this.xhr.onabort = function(event) {\n      return _this.inflight = false;\n    };\n    this.xhr.open(\"GET\", this.url, true);\n    this.xhr.responseType = \"arraybuffer\";\n    endPos = Math.min(this.offset + this.chunkSize, this.length);\n    this.xhr.setRequestHeader(\"Range\", \"bytes=\" + this.offset + \"-\" + endPos);\n    this.xhr.overrideMimeType('text/plain; charset=x-user-defined');\n    return this.xhr.send(null);\n  };\n\n  HTTPSource.prototype.pause = function() {\n    var _ref;\n\n    this.inflight = false;\n    return (_ref = this.xhr) != null ? _ref.abort() : void 0;\n  };\n\n  HTTPSource.prototype.reset = function() {\n    this.pause();\n    return this.offset = 0;\n  };\n\n  return HTTPSource;\n\n})(AV.EventEmitter);\n//import \"src/sources/browser/http.coffee\";\n  var __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nAV.FileSource = (function(_super) {\n  __extends(FileSource, _super);\n\n  function FileSource(file) {\n    this.file = file;\n    if (typeof FileReader === \"undefined\" || FileReader === null) {\n      return this.emit('error', 'This browser does not have FileReader support.');\n    }\n    this.offset = 0;\n    this.length = this.file.size;\n    this.chunkSize = 1 << 20;\n  }\n\n  FileSource.prototype.start = function() {\n    var _this = this;\n\n    if (this.reader) {\n      if (!this.active) {\n        return this.loop();\n      }\n    }\n    this.reader = new FileReader;\n    this.active = true;\n    this.reader.onload = function(e) {\n      var buf;\n\n      buf = new AV.Buffer(new Uint8Array(e.target.result));\n      _this.offset += buf.length;\n      _this.emit('data', buf);\n      _this.active = false;\n      if (_this.offset < _this.length) {\n        return _this.loop();\n      }\n    };\n    this.reader.onloadend = function() {\n      if (_this.offset === _this.length) {\n        _this.emit('end');\n        return _this.reader = null;\n      }\n    };\n    this.reader.onerror = function(e) {\n      return _this.emit('error', e);\n    };\n    this.reader.onprogress = function(e) {\n      return _this.emit('progress', (_this.offset + e.loaded) / _this.length * 100);\n    };\n    return this.loop();\n  };\n\n  FileSource.prototype.loop = function() {\n    var blob, endPos, slice;\n\n    this.active = true;\n    this.file[slice = 'slice'] || this.file[slice = 'webkitSlice'] || this.file[slice = 'mozSlice'];\n    endPos = Math.min(this.offset + this.chunkSize, this.length);\n    blob = this.file[slice](this.offset, endPos);\n    return this.reader.readAsArrayBuffer(blob);\n  };\n\n  FileSource.prototype.pause = function() {\n    var _ref;\n\n    this.active = false;\n    return (_ref = this.reader) != null ? _ref.abort() : void 0;\n  };\n\n  FileSource.prototype.reset = function() {\n    this.pause();\n    return this.offset = 0;\n  };\n\n  return FileSource;\n\n})(AV.EventEmitter);\n//import \"src/sources/browser/file.coffee\";\n  return global.AV = AV;\n})();\n";
var aac = "/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \nconst SAMPLE_RATES = new Int32Array([\n    96000, 88200, 64000, 48000, 44100, 32000,\n    24000, 22050, 16000, 12000, 11025, 8000, 7350    \n]);\n    \nvar ADTSDemuxer = AV.Demuxer.extend(function() {\n    AV.Demuxer.register(this);\n    \n    this.probe = function(stream) {\n        var offset = stream.offset;\n        \n        // attempt to find ADTS syncword\n        while (stream.available(2)) {\n            if ((stream.readUInt16() & 0xfff6) === 0xfff0) {\n                stream.seek(offset);\n                return true;\n            }\n        }\n        \n        stream.seek(offset);\n        return false;\n    };\n        \n    this.prototype.init = function() {\n        this.bitstream = new AV.Bitstream(this.stream);\n    };\n    \n    // Reads an ADTS header\n    // See http://wiki.multimedia.cx/index.php?title=ADTS\n    this.readHeader = function(stream) {\n        if (stream.read(12) !== 0xfff)\n            throw new Error('Invalid ADTS header.');\n            \n        var ret = {};\n        stream.advance(3); // mpeg version and layer\n        var protectionAbsent = !!stream.read(1);\n        \n        ret.profile = stream.read(2) + 1;\n        ret.samplingIndex = stream.read(4);\n        \n        stream.advance(1); // private\n        ret.chanConfig = stream.read(3);\n        stream.advance(4); // original/copy, home, copywrite, and copywrite start\n        \n        ret.frameLength = stream.read(13);\n        stream.advance(11); // fullness\n        \n        ret.numFrames = stream.read(2) + 1;\n        \n        if (!protectionAbsent)\n            stream.advance(16);\n        \n        return ret;\n    };\n    \n    this.prototype.readChunk = function() {\n        if (!this.sentHeader) {\n            var offset = this.stream.offset;\n            var header = ADTSDemuxer.readHeader(this.bitstream);\n            \n            this.emit('format', {\n                formatID: 'aac ',\n                sampleRate: SAMPLE_RATES[header.samplingIndex],\n                channelsPerFrame: header.chanConfig,\n                bitsPerChannel: 16,\n            });\n            \n            // generate a magic cookie from the ADTS header\n            var cookie = new Uint8Array(2);\n            cookie[0] = (header.profile << 3) | ((header.samplingIndex >> 1) & 7);\n            cookie[1] = ((header.samplingIndex & 1) << 7) | (header.chanConfig << 3);\n            this.emit('cookie', new AV.Buffer(cookie));\n            \n            this.stream.seek(offset);\n            this.sentHeader = true;\n        }\n        \n        while (this.stream.available(1)) {\n            var buffer = this.stream.readSingleBuffer(this.stream.remainingBytes());\n            this.emit('data', buffer);\n        }\n    };\n});//import \"adts_demuxer.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n/********************************************************************************\n * Sample offset into the window indicating the beginning of a scalefactor\n * window band\n *\n * scalefactor window band - term for scalefactor bands within a window,\n * given in Table 4.110 to Table 4.128.\n *\n * scalefactor band - a set of spectral coefficients which are scaled by one\n * scalefactor. In case of EIGHT_SHORT_SEQUENCE and grouping a scalefactor band\n * may contain several scalefactor window bands of corresponding frequency. For\n * all other window_sequences scalefactor bands and scalefactor window bands are\n * identical.\n *******************************************************************************/\nconst SWB_OFFSET_1024_96 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  48,  52,  56,  64,\n     72,  80,  88,  96, 108, 120, 132, 144,\n    156, 172, 188, 212, 240, 276, 320, 384,\n    448, 512, 576, 640, 704, 768, 832, 896,\n    960, 1024\n]);\n\nconst SWB_OFFSET_128_96 = new Uint16Array([\n    0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\n]);\n\nconst SWB_OFFSET_1024_64 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  48,  52,  56,  64,\n     72,  80,  88, 100, 112, 124, 140, 156,\n    172, 192, 216, 240, 268, 304, 344, 384,\n    424, 464, 504, 544, 584, 624, 664, 704,\n    744, 784, 824, 864, 904, 944, 984, 1024\n]);\n\nconst SWB_OFFSET_128_64 = new Uint16Array([\n    0, 4, 8, 12, 16, 20, 24, 32, 40, 48, 64, 92, 128\n]);\n\nconst SWB_OFFSET_1024_48 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  48,  56,  64,  72,  80,\n     88,  96, 108, 120, 132, 144, 160, 176,\n    196, 216, 240, 264, 292, 320, 352, 384,\n    416, 448, 480, 512, 544, 576, 608, 640,\n    672, 704, 736, 768, 800, 832, 864, 896,\n    928, 1024\n]);\n\nconst SWB_OFFSET_128_48 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  28,  36,\n    44,  56,  68,  80,  96, 112, 128\n]);\n\nconst SWB_OFFSET_1024_32 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  48,  56,  64,  72,  80,\n     88,  96, 108, 120, 132, 144, 160, 176,\n    196, 216, 240, 264, 292, 320, 352, 384,\n    416, 448, 480, 512, 544, 576, 608, 640,\n    672, 704, 736, 768, 800, 832, 864, 896,\n    928, 960, 992, 1024\n]);\n\nconst SWB_OFFSET_1024_24 = new Uint16Array([\n      0,   4,   8,  12,  16,  20,  24,  28,\n     32,  36,  40,  44,  52,  60,  68,  76,\n     84,  92, 100, 108, 116, 124, 136, 148,\n    160, 172, 188, 204, 220, 240, 260, 284,\n    308, 336, 364, 396, 432, 468, 508, 552,\n    600, 652, 704, 768, 832, 896, 960, 1024\n]);\n\nconst SWB_OFFSET_128_24 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    36,  44,  52,  64,  76,  92, 108, 128\n]);\n\nconst SWB_OFFSET_1024_16 = new Uint16Array([\n      0,   8,  16,  24,  32,  40,  48,  56,\n     64,  72,  80,  88, 100, 112, 124, 136,\n    148, 160, 172, 184, 196, 212, 228, 244,\n    260, 280, 300, 320, 344, 368, 396, 424,\n    456, 492, 532, 572, 616, 664, 716, 772,\n    832, 896, 960, 1024\n]);\n\nconst SWB_OFFSET_128_16 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    32,  40,  48,  60,  72,  88, 108, 128\n]);\n\nconst SWB_OFFSET_1024_8 = new Uint16Array([\n      0,  12,  24,  36,  48,  60,  72,  84,\n     96, 108, 120, 132, 144, 156, 172, 188,\n    204, 220, 236, 252, 268, 288, 308, 328,\n    348, 372, 396, 420, 448, 476, 508, 544,\n    580, 620, 664, 712, 764, 820, 880, 944,\n    1024\n]);\n\nconst SWB_OFFSET_128_8 = new Uint16Array([\n     0,   4,   8,  12,  16,  20,  24,  28,\n    36,  44,  52,  60,  72,  88, 108, 128\n]);\n\nconst SWB_OFFSET_1024 = [\n    SWB_OFFSET_1024_96,\n    SWB_OFFSET_1024_96,\n    SWB_OFFSET_1024_64,\n    SWB_OFFSET_1024_48,\n    SWB_OFFSET_1024_48,\n    SWB_OFFSET_1024_32,\n    SWB_OFFSET_1024_24,\n    SWB_OFFSET_1024_24,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_16,\n    SWB_OFFSET_1024_8\n];\n\nconst SWB_OFFSET_128 = [\n    SWB_OFFSET_128_96,\n    SWB_OFFSET_128_96,\n    SWB_OFFSET_128_64,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_48,\n    SWB_OFFSET_128_24,\n    SWB_OFFSET_128_24,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_16,\n    SWB_OFFSET_128_8\n];\n\nconst SWB_SHORT_WINDOW_COUNT = new Uint8Array([\n    12, 12, 12, 14, 14, 14, 15, 15, 15, 15, 15, 15\n]);\n\nconst SWB_LONG_WINDOW_COUNT = new Uint8Array([\n    41, 41, 47, 49, 49, 51, 47, 47, 43, 43, 43, 40\n]);\n\n/*\n * Scalefactor lookup table\n */\nconst SCALEFACTOR_TABLE = (function() {\n    var table = new Float32Array(428);\n    \n    for (var i = 0; i < 428; i++) {\n        table[i] = Math.pow(2, (i - 200) / 4);\n    }\n    \n    return table;\n})();\n\n\n/**\n * Inverse quantization lookup table\n */\nconst IQ_TABLE = (function() {\n    var table = new Float32Array(8191),\n        four_thirds = 4/3;\n        \n    for (var i = 0; i < 8191; i++) {\n        table[i] = Math.pow(i, four_thirds);\n    }\n    \n    return table;\n})();//import \"tables.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar Huffman = (function() {\n\n    // [bit length, codeword, values...]\n    const HCB1 = [\n        [1, 0, 0, 0, 0, 0],\n        [5, 16, 1, 0, 0, 0],\n        [5, 17, -1, 0, 0, 0],\n        [5, 18, 0, 0, 0, -1],\n        [5, 19, 0, 1, 0, 0],\n        [5, 20, 0, 0, 0, 1],\n        [5, 21, 0, 0, -1, 0],\n        [5, 22, 0, 0, 1, 0],\n        [5, 23, 0, -1, 0, 0],\n        [7, 96, 1, -1, 0, 0],\n        [7, 97, -1, 1, 0, 0],\n        [7, 98, 0, 0, -1, 1],\n        [7, 99, 0, 1, -1, 0],\n        [7, 100, 0, -1, 1, 0],\n        [7, 101, 0, 0, 1, -1],\n        [7, 102, 1, 1, 0, 0],\n        [7, 103, 0, 0, -1, -1],\n        [7, 104, -1, -1, 0, 0],\n        [7, 105, 0, -1, -1, 0],\n        [7, 106, 1, 0, -1, 0],\n        [7, 107, 0, 1, 0, -1],\n        [7, 108, -1, 0, 1, 0],\n        [7, 109, 0, 0, 1, 1],\n        [7, 110, 1, 0, 1, 0],\n        [7, 111, 0, -1, 0, 1],\n        [7, 112, 0, 1, 1, 0],\n        [7, 113, 0, 1, 0, 1],\n        [7, 114, -1, 0, -1, 0],\n        [7, 115, 1, 0, 0, 1],\n        [7, 116, -1, 0, 0, -1],\n        [7, 117, 1, 0, 0, -1],\n        [7, 118, -1, 0, 0, 1],\n        [7, 119, 0, -1, 0, -1],\n        [9, 480, 1, 1, -1, 0],\n        [9, 481, -1, 1, -1, 0],\n        [9, 482, 1, -1, 1, 0],\n        [9, 483, 0, 1, 1, -1],\n        [9, 484, 0, 1, -1, 1],\n        [9, 485, 0, -1, 1, 1],\n        [9, 486, 0, -1, 1, -1],\n        [9, 487, 1, -1, -1, 0],\n        [9, 488, 1, 0, -1, 1],\n        [9, 489, 0, 1, -1, -1],\n        [9, 490, -1, 1, 1, 0],\n        [9, 491, -1, 0, 1, -1],\n        [9, 492, -1, -1, 1, 0],\n        [9, 493, 0, -1, -1, 1],\n        [9, 494, 1, -1, 0, 1],\n        [9, 495, 1, -1, 0, -1],\n        [9, 496, -1, 1, 0, -1],\n        [9, 497, -1, -1, -1, 0],\n        [9, 498, 0, -1, -1, -1],\n        [9, 499, 0, 1, 1, 1],\n        [9, 500, 1, 0, 1, -1],\n        [9, 501, 1, 1, 0, 1],\n        [9, 502, -1, 1, 0, 1],\n        [9, 503, 1, 1, 1, 0],\n        [10, 1008, -1, -1, 0, 1],\n        [10, 1009, -1, 0, -1, -1],\n        [10, 1010, 1, 1, 0, -1],\n        [10, 1011, 1, 0, -1, -1],\n        [10, 1012, -1, 0, -1, 1],\n        [10, 1013, -1, -1, 0, -1],\n        [10, 1014, -1, 0, 1, 1],\n        [10, 1015, 1, 0, 1, 1],\n        [11, 2032, 1, -1, 1, -1],\n        [11, 2033, -1, 1, -1, 1],\n        [11, 2034, -1, 1, 1, -1],\n        [11, 2035, 1, -1, -1, 1],\n        [11, 2036, 1, 1, 1, 1],\n        [11, 2037, -1, -1, 1, 1],\n        [11, 2038, 1, 1, -1, -1],\n        [11, 2039, -1, -1, 1, -1],\n        [11, 2040, -1, -1, -1, -1],\n        [11, 2041, 1, 1, -1, 1],\n        [11, 2042, 1, -1, 1, 1],\n        [11, 2043, -1, 1, 1, 1],\n        [11, 2044, -1, 1, -1, -1],\n        [11, 2045, -1, -1, -1, 1],\n        [11, 2046, 1, -1, -1, -1],\n        [11, 2047, 1, 1, 1, -1]\n    ];\n    \n    const HCB2 = [\n        [3, 0, 0, 0, 0, 0],\n        [4, 2, 1, 0, 0, 0],\n        [5, 6, -1, 0, 0, 0],\n        [5, 7, 0, 0, 0, 1],\n        [5, 8, 0, 0, -1, 0],\n        [5, 9, 0, 0, 0, -1],\n        [5, 10, 0, -1, 0, 0],\n        [5, 11, 0, 0, 1, 0],\n        [5, 12, 0, 1, 0, 0],\n        [6, 26, 0, -1, 1, 0],\n        [6, 27, -1, 1, 0, 0],\n        [6, 28, 0, 1, -1, 0],\n        [6, 29, 0, 0, 1, -1],\n        [6, 30, 0, 1, 0, -1],\n        [6, 31, 0, 0, -1, 1],\n        [6, 32, -1, 0, 0, -1],\n        [6, 33, 1, -1, 0, 0],\n        [6, 34, 1, 0, -1, 0],\n        [6, 35, -1, -1, 0, 0],\n        [6, 36, 0, 0, -1, -1],\n        [6, 37, 1, 0, 1, 0],\n        [6, 38, 1, 0, 0, 1],\n        [6, 39, 0, -1, 0, 1],\n        [6, 40, -1, 0, 1, 0],\n        [6, 41, 0, 1, 0, 1],\n        [6, 42, 0, -1, -1, 0],\n        [6, 43, -1, 0, 0, 1],\n        [6, 44, 0, -1, 0, -1],\n        [6, 45, -1, 0, -1, 0],\n        [6, 46, 1, 1, 0, 0],\n        [6, 47, 0, 1, 1, 0],\n        [6, 48, 0, 0, 1, 1],\n        [6, 49, 1, 0, 0, -1],\n        [7, 100, 0, 1, -1, 1],\n        [7, 101, 1, 0, -1, 1],\n        [7, 102, -1, 1, -1, 0],\n        [7, 103, 0, -1, 1, -1],\n        [7, 104, 1, -1, 1, 0],\n        [7, 105, 1, 1, 0, -1],\n        [7, 106, 1, 0, 1, 1],\n        [7, 107, -1, 1, 1, 0],\n        [7, 108, 0, -1, -1, 1],\n        [7, 109, 1, 1, 1, 0],\n        [7, 110, -1, 0, 1, -1],\n        [7, 111, -1, -1, -1, 0],\n        [7, 112, -1, 0, -1, 1],\n        [7, 113, 1, -1, -1, 0],\n        [7, 114, 1, 1, -1, 0],\n        [8, 230, 1, -1, 0, 1],\n        [8, 231, -1, 1, 0, -1],\n        [8, 232, -1, -1, 1, 0],\n        [8, 233, -1, 0, 1, 1],\n        [8, 234, -1, -1, 0, 1],\n        [8, 235, -1, -1, 0, -1],\n        [8, 236, 0, -1, -1, -1],\n        [8, 237, 1, 0, 1, -1],\n        [8, 238, 1, 0, -1, -1],\n        [8, 239, 0, 1, -1, -1],\n        [8, 240, 0, 1, 1, 1],\n        [8, 241, -1, 1, 0, 1],\n        [8, 242, -1, 0, -1, -1],\n        [8, 243, 0, 1, 1, -1],\n        [8, 244, 1, -1, 0, -1],\n        [8, 245, 0, -1, 1, 1],\n        [8, 246, 1, 1, 0, 1],\n        [8, 247, 1, -1, 1, -1],\n        [8, 248, -1, 1, -1, 1],\n        [9, 498, 1, -1, -1, 1],\n        [9, 499, -1, -1, -1, -1],\n        [9, 500, -1, 1, 1, -1],\n        [9, 501, -1, 1, 1, 1],\n        [9, 502, 1, 1, 1, 1],\n        [9, 503, -1, -1, 1, -1],\n        [9, 504, 1, -1, 1, 1],\n        [9, 505, -1, 1, -1, -1],\n        [9, 506, -1, -1, 1, 1],\n        [9, 507, 1, 1, -1, -1],\n        [9, 508, 1, -1, -1, -1],\n        [9, 509, -1, -1, -1, 1],\n        [9, 510, 1, 1, -1, 1],\n        [9, 511, 1, 1, 1, -1]\n    ];\n    \n    const HCB3 = [\n        [1, 0, 0, 0, 0, 0],\n        [4, 8, 1, 0, 0, 0],\n        [4, 9, 0, 0, 0, 1],\n        [4, 10, 0, 1, 0, 0],\n        [4, 11, 0, 0, 1, 0],\n        [5, 24, 1, 1, 0, 0],\n        [5, 25, 0, 0, 1, 1],\n        [6, 52, 0, 1, 1, 0],\n        [6, 53, 0, 1, 0, 1],\n        [6, 54, 1, 0, 1, 0],\n        [6, 55, 0, 1, 1, 1],\n        [6, 56, 1, 0, 0, 1],\n        [6, 57, 1, 1, 1, 0],\n        [7, 116, 1, 1, 1, 1],\n        [7, 117, 1, 0, 1, 1],\n        [7, 118, 1, 1, 0, 1],\n        [8, 238, 2, 0, 0, 0],\n        [8, 239, 0, 0, 0, 2],\n        [8, 240, 0, 0, 1, 2],\n        [8, 241, 2, 1, 0, 0],\n        [8, 242, 1, 2, 1, 0],\n        [9, 486, 0, 0, 2, 1],\n        [9, 487, 0, 1, 2, 1],\n        [9, 488, 1, 2, 0, 0],\n        [9, 489, 0, 1, 1, 2],\n        [9, 490, 2, 1, 1, 0],\n        [9, 491, 0, 0, 2, 0],\n        [9, 492, 0, 2, 1, 0],\n        [9, 493, 0, 1, 2, 0],\n        [9, 494, 0, 2, 0, 0],\n        [9, 495, 0, 1, 0, 2],\n        [9, 496, 2, 0, 1, 0],\n        [9, 497, 1, 2, 1, 1],\n        [9, 498, 0, 2, 1, 1],\n        [9, 499, 1, 1, 2, 0],\n        [9, 500, 1, 1, 2, 1],\n        [10, 1002, 1, 2, 0, 1],\n        [10, 1003, 1, 0, 2, 0],\n        [10, 1004, 1, 0, 2, 1],\n        [10, 1005, 0, 2, 0, 1],\n        [10, 1006, 2, 1, 1, 1],\n        [10, 1007, 1, 1, 1, 2],\n        [10, 1008, 2, 1, 0, 1],\n        [10, 1009, 1, 0, 1, 2],\n        [10, 1010, 0, 0, 2, 2],\n        [10, 1011, 0, 1, 2, 2],\n        [10, 1012, 2, 2, 1, 0],\n        [10, 1013, 1, 2, 2, 0],\n        [10, 1014, 1, 0, 0, 2],\n        [10, 1015, 2, 0, 0, 1],\n        [10, 1016, 0, 2, 2, 1],\n        [11, 2034, 2, 2, 0, 0],\n        [11, 2035, 1, 2, 2, 1],\n        [11, 2036, 1, 1, 0, 2],\n        [11, 2037, 2, 0, 1, 1],\n        [11, 2038, 1, 1, 2, 2],\n        [11, 2039, 2, 2, 1, 1],\n        [11, 2040, 0, 2, 2, 0],\n        [11, 2041, 0, 2, 1, 2],\n        [12, 4084, 1, 0, 2, 2],\n        [12, 4085, 2, 2, 0, 1],\n        [12, 4086, 2, 1, 2, 0],\n        [12, 4087, 2, 2, 2, 0],\n        [12, 4088, 0, 2, 2, 2],\n        [12, 4089, 2, 2, 2, 1],\n        [12, 4090, 2, 1, 2, 1],\n        [12, 4091, 1, 2, 1, 2],\n        [12, 4092, 1, 2, 2, 2],\n        [13, 8186, 0, 2, 0, 2],\n        [13, 8187, 2, 0, 2, 0],\n        [13, 8188, 1, 2, 0, 2],\n        [14, 16378, 2, 0, 2, 1],\n        [14, 16379, 2, 1, 1, 2],\n        [14, 16380, 2, 1, 0, 2],\n        [15, 32762, 2, 2, 2, 2],\n        [15, 32763, 2, 2, 1, 2],\n        [15, 32764, 2, 1, 2, 2],\n        [15, 32765, 2, 0, 1, 2],\n        [15, 32766, 2, 0, 0, 2],\n        [16, 65534, 2, 2, 0, 2],\n        [16, 65535, 2, 0, 2, 2]\n    ];\n    \n    const HCB4 = [\n        [4, 0, 1, 1, 1, 1],\n        [4, 1, 0, 1, 1, 1],\n        [4, 2, 1, 1, 0, 1],\n        [4, 3, 1, 1, 1, 0],\n        [4, 4, 1, 0, 1, 1],\n        [4, 5, 1, 0, 0, 0],\n        [4, 6, 1, 1, 0, 0],\n        [4, 7, 0, 0, 0, 0],\n        [4, 8, 0, 0, 1, 1],\n        [4, 9, 1, 0, 1, 0],\n        [5, 20, 1, 0, 0, 1],\n        [5, 21, 0, 1, 1, 0],\n        [5, 22, 0, 0, 0, 1],\n        [5, 23, 0, 1, 0, 1],\n        [5, 24, 0, 0, 1, 0],\n        [5, 25, 0, 1, 0, 0],\n        [7, 104, 2, 1, 1, 1],\n        [7, 105, 1, 1, 2, 1],\n        [7, 106, 1, 2, 1, 1],\n        [7, 107, 1, 1, 1, 2],\n        [7, 108, 2, 1, 1, 0],\n        [7, 109, 2, 1, 0, 1],\n        [7, 110, 1, 2, 1, 0],\n        [7, 111, 2, 0, 1, 1],\n        [7, 112, 0, 1, 2, 1],\n        [8, 226, 0, 1, 1, 2],\n        [8, 227, 1, 1, 2, 0],\n        [8, 228, 0, 2, 1, 1],\n        [8, 229, 1, 0, 1, 2],\n        [8, 230, 1, 2, 0, 1],\n        [8, 231, 1, 1, 0, 2],\n        [8, 232, 1, 0, 2, 1],\n        [8, 233, 2, 1, 0, 0],\n        [8, 234, 2, 0, 1, 0],\n        [8, 235, 1, 2, 0, 0],\n        [8, 236, 2, 0, 0, 1],\n        [8, 237, 0, 1, 0, 2],\n        [8, 238, 0, 2, 1, 0],\n        [8, 239, 0, 0, 1, 2],\n        [8, 240, 0, 1, 2, 0],\n        [8, 241, 0, 2, 0, 1],\n        [8, 242, 1, 0, 0, 2],\n        [8, 243, 0, 0, 2, 1],\n        [8, 244, 1, 0, 2, 0],\n        [8, 245, 2, 0, 0, 0],\n        [8, 246, 0, 0, 0, 2],\n        [9, 494, 0, 2, 0, 0],\n        [9, 495, 0, 0, 2, 0],\n        [9, 496, 1, 2, 2, 1],\n        [9, 497, 2, 2, 1, 1],\n        [9, 498, 2, 1, 2, 1],\n        [9, 499, 1, 1, 2, 2],\n        [9, 500, 1, 2, 1, 2],\n        [9, 501, 2, 1, 1, 2],\n        [10, 1004, 1, 2, 2, 0],\n        [10, 1005, 2, 2, 1, 0],\n        [10, 1006, 2, 1, 2, 0],\n        [10, 1007, 0, 2, 2, 1],\n        [10, 1008, 0, 1, 2, 2],\n        [10, 1009, 2, 2, 0, 1],\n        [10, 1010, 0, 2, 1, 2],\n        [10, 1011, 2, 0, 2, 1],\n        [10, 1012, 1, 0, 2, 2],\n        [10, 1013, 2, 2, 2, 1],\n        [10, 1014, 1, 2, 0, 2],\n        [10, 1015, 2, 0, 1, 2],\n        [10, 1016, 2, 1, 0, 2],\n        [10, 1017, 1, 2, 2, 2],\n        [11, 2036, 2, 1, 2, 2],\n        [11, 2037, 2, 2, 1, 2],\n        [11, 2038, 0, 2, 2, 0],\n        [11, 2039, 2, 2, 0, 0],\n        [11, 2040, 0, 0, 2, 2],\n        [11, 2041, 2, 0, 2, 0],\n        [11, 2042, 0, 2, 0, 2],\n        [11, 2043, 2, 0, 0, 2],\n        [11, 2044, 2, 2, 2, 2],\n        [11, 2045, 0, 2, 2, 2],\n        [11, 2046, 2, 2, 2, 0],\n        [12, 4094, 2, 2, 0, 2],\n        [12, 4095, 2, 0, 2, 2]\n    ];\n    \n    const HCB5 = [\n        [1, 0, 0, 0],\n        [4, 8, -1, 0],\n        [4, 9, 1, 0],\n        [4, 10, 0, 1],\n        [4, 11, 0, -1],\n        [5, 24, 1, -1],\n        [5, 25, -1, 1],\n        [5, 26, -1, -1],\n        [5, 27, 1, 1],\n        [7, 112, -2, 0],\n        [7, 113, 0, 2],\n        [7, 114, 2, 0],\n        [7, 115, 0, -2],\n        [8, 232, -2, -1],\n        [8, 233, 2, 1],\n        [8, 234, -1, -2],\n        [8, 235, 1, 2],\n        [8, 236, -2, 1],\n        [8, 237, 2, -1],\n        [8, 238, -1, 2],\n        [8, 239, 1, -2],\n        [8, 240, -3, 0],\n        [8, 241, 3, 0],\n        [8, 242, 0, -3],\n        [8, 243, 0, 3],\n        [9, 488, -3, -1],\n        [9, 489, 1, 3],\n        [9, 490, 3, 1],\n        [9, 491, -1, -3],\n        [9, 492, -3, 1],\n        [9, 493, 3, -1],\n        [9, 494, 1, -3],\n        [9, 495, -1, 3],\n        [9, 496, -2, 2],\n        [9, 497, 2, 2],\n        [9, 498, -2, -2],\n        [9, 499, 2, -2],\n        [10, 1000, -3, -2],\n        [10, 1001, 3, -2],\n        [10, 1002, -2, 3],\n        [10, 1003, 2, -3],\n        [10, 1004, 3, 2],\n        [10, 1005, 2, 3],\n        [10, 1006, -3, 2],\n        [10, 1007, -2, -3],\n        [10, 1008, 0, -4],\n        [10, 1009, -4, 0],\n        [10, 1010, 4, 1],\n        [10, 1011, 4, 0],\n        [11, 2024, -4, -1],\n        [11, 2025, 0, 4],\n        [11, 2026, 4, -1],\n        [11, 2027, -1, -4],\n        [11, 2028, 1, 4],\n        [11, 2029, -1, 4],\n        [11, 2030, -4, 1],\n        [11, 2031, 1, -4],\n        [11, 2032, 3, -3],\n        [11, 2033, -3, -3],\n        [11, 2034, -3, 3],\n        [11, 2035, -2, 4],\n        [11, 2036, -4, -2],\n        [11, 2037, 4, 2],\n        [11, 2038, 2, -4],\n        [11, 2039, 2, 4],\n        [11, 2040, 3, 3],\n        [11, 2041, -4, 2],\n        [12, 4084, -2, -4],\n        [12, 4085, 4, -2],\n        [12, 4086, 3, -4],\n        [12, 4087, -4, -3],\n        [12, 4088, -4, 3],\n        [12, 4089, 3, 4],\n        [12, 4090, -3, 4],\n        [12, 4091, 4, 3],\n        [12, 4092, 4, -3],\n        [12, 4093, -3, -4],\n        [13, 8188, 4, -4],\n        [13, 8189, -4, 4],\n        [13, 8190, 4, 4],\n        [13, 8191, -4, -4]\n    ];\n    \n    const HCB6 = [\n        [4, 0, 0, 0],\n        [4, 1, 1, 0],\n        [4, 2, 0, -1],\n        [4, 3, 0, 1],\n        [4, 4, -1, 0],\n        [4, 5, 1, 1],\n        [4, 6, -1, 1],\n        [4, 7, 1, -1],\n        [4, 8, -1, -1],\n        [6, 36, 2, -1],\n        [6, 37, 2, 1],\n        [6, 38, -2, 1],\n        [6, 39, -2, -1],\n        [6, 40, -2, 0],\n        [6, 41, -1, 2],\n        [6, 42, 2, 0],\n        [6, 43, 1, -2],\n        [6, 44, 1, 2],\n        [6, 45, 0, -2],\n        [6, 46, -1, -2],\n        [6, 47, 0, 2],\n        [6, 48, 2, -2],\n        [6, 49, -2, 2],\n        [6, 50, -2, -2],\n        [6, 51, 2, 2],\n        [7, 104, -3, 1],\n        [7, 105, 3, 1],\n        [7, 106, 3, -1],\n        [7, 107, -1, 3],\n        [7, 108, -3, -1],\n        [7, 109, 1, 3],\n        [7, 110, 1, -3],\n        [7, 111, -1, -3],\n        [7, 112, 3, 0],\n        [7, 113, -3, 0],\n        [7, 114, 0, -3],\n        [7, 115, 0, 3],\n        [7, 116, 3, 2],\n        [8, 234, -3, -2],\n        [8, 235, -2, 3],\n        [8, 236, 2, 3],\n        [8, 237, 3, -2],\n        [8, 238, 2, -3],\n        [8, 239, -2, -3],\n        [8, 240, -3, 2],\n        [8, 241, 3, 3],\n        [9, 484, 3, -3],\n        [9, 485, -3, -3],\n        [9, 486, -3, 3],\n        [9, 487, 1, -4],\n        [9, 488, -1, -4],\n        [9, 489, 4, 1],\n        [9, 490, -4, 1],\n        [9, 491, -4, -1],\n        [9, 492, 1, 4],\n        [9, 493, 4, -1],\n        [9, 494, -1, 4],\n        [9, 495, 0, -4],\n        [9, 496, -4, 2],\n        [9, 497, -4, -2],\n        [9, 498, 2, 4],\n        [9, 499, -2, -4],\n        [9, 500, -4, 0],\n        [9, 501, 4, 2],\n        [9, 502, 4, -2],\n        [9, 503, -2, 4],\n        [9, 504, 4, 0],\n        [9, 505, 2, -4],\n        [9, 506, 0, 4],\n        [10, 1014, -3, -4],\n        [10, 1015, -3, 4],\n        [10, 1016, 3, -4],\n        [10, 1017, 4, -3],\n        [10, 1018, 3, 4],\n        [10, 1019, 4, 3],\n        [10, 1020, -4, 3],\n        [10, 1021, -4, -3],\n        [11, 2044, 4, 4],\n        [11, 2045, -4, 4],\n        [11, 2046, -4, -4],\n        [11, 2047, 4, -4]\n    ];\n    \n    const HCB7 = [\n        [1, 0, 0, 0],\n        [3, 4, 1, 0],\n        [3, 5, 0, 1],\n        [4, 12, 1, 1],\n        [6, 52, 2, 1],\n        [6, 53, 1, 2],\n        [6, 54, 2, 0],\n        [6, 55, 0, 2],\n        [7, 112, 3, 1],\n        [7, 113, 1, 3],\n        [7, 114, 2, 2],\n        [7, 115, 3, 0],\n        [7, 116, 0, 3],\n        [8, 234, 2, 3],\n        [8, 235, 3, 2],\n        [8, 236, 1, 4],\n        [8, 237, 4, 1],\n        [8, 238, 1, 5],\n        [8, 239, 5, 1],\n        [8, 240, 3, 3],\n        [8, 241, 2, 4],\n        [8, 242, 0, 4],\n        [8, 243, 4, 0],\n        [9, 488, 4, 2],\n        [9, 489, 2, 5],\n        [9, 490, 5, 2],\n        [9, 491, 0, 5],\n        [9, 492, 6, 1],\n        [9, 493, 5, 0],\n        [9, 494, 1, 6],\n        [9, 495, 4, 3],\n        [9, 496, 3, 5],\n        [9, 497, 3, 4],\n        [9, 498, 5, 3],\n        [9, 499, 2, 6],\n        [9, 500, 6, 2],\n        [9, 501, 1, 7],\n        [10, 1004, 3, 6],\n        [10, 1005, 0, 6],\n        [10, 1006, 6, 0],\n        [10, 1007, 4, 4],\n        [10, 1008, 7, 1],\n        [10, 1009, 4, 5],\n        [10, 1010, 7, 2],\n        [10, 1011, 5, 4],\n        [10, 1012, 6, 3],\n        [10, 1013, 2, 7],\n        [10, 1014, 7, 3],\n        [10, 1015, 6, 4],\n        [10, 1016, 5, 5],\n        [10, 1017, 4, 6],\n        [10, 1018, 3, 7],\n        [11, 2038, 7, 0],\n        [11, 2039, 0, 7],\n        [11, 2040, 6, 5],\n        [11, 2041, 5, 6],\n        [11, 2042, 7, 4],\n        [11, 2043, 4, 7],\n        [11, 2044, 5, 7],\n        [11, 2045, 7, 5],\n        [12, 4092, 7, 6],\n        [12, 4093, 6, 6],\n        [12, 4094, 6, 7],\n        [12, 4095, 7, 7]\n    ];\n    \n    const HCB8 = [\n        [3, 0, 1, 1],\n        [4, 2, 2, 1],\n        [4, 3, 1, 0],\n        [4, 4, 1, 2],\n        [4, 5, 0, 1],\n        [4, 6, 2, 2],\n        [5, 14, 0, 0],\n        [5, 15, 2, 0],\n        [5, 16, 0, 2],\n        [5, 17, 3, 1],\n        [5, 18, 1, 3],\n        [5, 19, 3, 2],\n        [5, 20, 2, 3],\n        [6, 42, 3, 3],\n        [6, 43, 4, 1],\n        [6, 44, 1, 4],\n        [6, 45, 4, 2],\n        [6, 46, 2, 4],\n        [6, 47, 3, 0],\n        [6, 48, 0, 3],\n        [6, 49, 4, 3],\n        [6, 50, 3, 4],\n        [6, 51, 5, 2],\n        [7, 104, 5, 1],\n        [7, 105, 2, 5],\n        [7, 106, 1, 5],\n        [7, 107, 5, 3],\n        [7, 108, 3, 5],\n        [7, 109, 4, 4],\n        [7, 110, 5, 4],\n        [7, 111, 0, 4],\n        [7, 112, 4, 5],\n        [7, 113, 4, 0],\n        [7, 114, 2, 6],\n        [7, 115, 6, 2],\n        [7, 116, 6, 1],\n        [7, 117, 1, 6],\n        [8, 236, 3, 6],\n        [8, 237, 6, 3],\n        [8, 238, 5, 5],\n        [8, 239, 5, 0],\n        [8, 240, 6, 4],\n        [8, 241, 0, 5],\n        [8, 242, 4, 6],\n        [8, 243, 7, 1],\n        [8, 244, 7, 2],\n        [8, 245, 2, 7],\n        [8, 246, 6, 5],\n        [8, 247, 7, 3],\n        [8, 248, 1, 7],\n        [8, 249, 5, 6],\n        [8, 250, 3, 7],\n        [9, 502, 6, 6],\n        [9, 503, 7, 4],\n        [9, 504, 6, 0],\n        [9, 505, 4, 7],\n        [9, 506, 0, 6],\n        [9, 507, 7, 5],\n        [9, 508, 7, 6],\n        [9, 509, 6, 7],\n        [10, 1020, 5, 7],\n        [10, 1021, 7, 0],\n        [10, 1022, 0, 7],\n        [10, 1023, 7, 7]\n    ];\n    \n    const HCB9 = [\n        [1, 0, 0, 0],\n        [3, 4, 1, 0],\n        [3, 5, 0, 1],\n        [4, 12, 1, 1],\n        [6, 52, 2, 1],\n        [6, 53, 1, 2],\n        [6, 54, 2, 0],\n        [6, 55, 0, 2],\n        [7, 112, 3, 1],\n        [7, 113, 2, 2],\n        [7, 114, 1, 3],\n        [8, 230, 3, 0],\n        [8, 231, 0, 3],\n        [8, 232, 2, 3],\n        [8, 233, 3, 2],\n        [8, 234, 1, 4],\n        [8, 235, 4, 1],\n        [8, 236, 2, 4],\n        [8, 237, 1, 5],\n        [9, 476, 4, 2],\n        [9, 477, 3, 3],\n        [9, 478, 0, 4],\n        [9, 479, 4, 0],\n        [9, 480, 5, 1],\n        [9, 481, 2, 5],\n        [9, 482, 1, 6],\n        [9, 483, 3, 4],\n        [9, 484, 5, 2],\n        [9, 485, 6, 1],\n        [9, 486, 4, 3],\n        [10, 974, 0, 5],\n        [10, 975, 2, 6],\n        [10, 976, 5, 0],\n        [10, 977, 1, 7],\n        [10, 978, 3, 5],\n        [10, 979, 1, 8],\n        [10, 980, 8, 1],\n        [10, 981, 4, 4],\n        [10, 982, 5, 3],\n        [10, 983, 6, 2],\n        [10, 984, 7, 1],\n        [10, 985, 0, 6],\n        [10, 986, 8, 2],\n        [10, 987, 2, 8],\n        [10, 988, 3, 6],\n        [10, 989, 2, 7],\n        [10, 990, 4, 5],\n        [10, 991, 9, 1],\n        [10, 992, 1, 9],\n        [10, 993, 7, 2],\n        [11, 1988, 6, 0],\n        [11, 1989, 5, 4],\n        [11, 1990, 6, 3],\n        [11, 1991, 8, 3],\n        [11, 1992, 0, 7],\n        [11, 1993, 9, 2],\n        [11, 1994, 3, 8],\n        [11, 1995, 4, 6],\n        [11, 1996, 3, 7],\n        [11, 1997, 0, 8],\n        [11, 1998, 10, 1],\n        [11, 1999, 6, 4],\n        [11, 2000, 2, 9],\n        [11, 2001, 5, 5],\n        [11, 2002, 8, 0],\n        [11, 2003, 7, 0],\n        [11, 2004, 7, 3],\n        [11, 2005, 10, 2],\n        [11, 2006, 9, 3],\n        [11, 2007, 8, 4],\n        [11, 2008, 1, 10],\n        [11, 2009, 7, 4],\n        [11, 2010, 6, 5],\n        [11, 2011, 5, 6],\n        [11, 2012, 4, 8],\n        [11, 2013, 4, 7],\n        [11, 2014, 3, 9],\n        [11, 2015, 11, 1],\n        [11, 2016, 5, 8],\n        [11, 2017, 9, 0],\n        [11, 2018, 8, 5],\n        [12, 4038, 10, 3],\n        [12, 4039, 2, 10],\n        [12, 4040, 0, 9],\n        [12, 4041, 11, 2],\n        [12, 4042, 9, 4],\n        [12, 4043, 6, 6],\n        [12, 4044, 12, 1],\n        [12, 4045, 4, 9],\n        [12, 4046, 8, 6],\n        [12, 4047, 1, 11],\n        [12, 4048, 9, 5],\n        [12, 4049, 10, 4],\n        [12, 4050, 5, 7],\n        [12, 4051, 7, 5],\n        [12, 4052, 2, 11],\n        [12, 4053, 1, 12],\n        [12, 4054, 12, 2],\n        [12, 4055, 11, 3],\n        [12, 4056, 3, 10],\n        [12, 4057, 5, 9],\n        [12, 4058, 6, 7],\n        [12, 4059, 8, 7],\n        [12, 4060, 11, 4],\n        [12, 4061, 0, 10],\n        [12, 4062, 7, 6],\n        [12, 4063, 12, 3],\n        [12, 4064, 10, 0],\n        [12, 4065, 10, 5],\n        [12, 4066, 4, 10],\n        [12, 4067, 6, 8],\n        [12, 4068, 2, 12],\n        [12, 4069, 9, 6],\n        [12, 4070, 9, 7],\n        [12, 4071, 4, 11],\n        [12, 4072, 11, 0],\n        [12, 4073, 6, 9],\n        [12, 4074, 3, 11],\n        [12, 4075, 5, 10],\n        [13, 8152, 8, 8],\n        [13, 8153, 7, 8],\n        [13, 8154, 12, 5],\n        [13, 8155, 3, 12],\n        [13, 8156, 11, 5],\n        [13, 8157, 7, 7],\n        [13, 8158, 12, 4],\n        [13, 8159, 11, 6],\n        [13, 8160, 10, 6],\n        [13, 8161, 4, 12],\n        [13, 8162, 7, 9],\n        [13, 8163, 5, 11],\n        [13, 8164, 0, 11],\n        [13, 8165, 12, 6],\n        [13, 8166, 6, 10],\n        [13, 8167, 12, 0],\n        [13, 8168, 10, 7],\n        [13, 8169, 5, 12],\n        [13, 8170, 7, 10],\n        [13, 8171, 9, 8],\n        [13, 8172, 0, 12],\n        [13, 8173, 11, 7],\n        [13, 8174, 8, 9],\n        [13, 8175, 9, 9],\n        [13, 8176, 10, 8],\n        [13, 8177, 7, 11],\n        [13, 8178, 12, 7],\n        [13, 8179, 6, 11],\n        [13, 8180, 8, 11],\n        [13, 8181, 11, 8],\n        [13, 8182, 7, 12],\n        [13, 8183, 6, 12],\n        [14, 16368, 8, 10],\n        [14, 16369, 10, 9],\n        [14, 16370, 8, 12],\n        [14, 16371, 9, 10],\n        [14, 16372, 9, 11],\n        [14, 16373, 9, 12],\n        [14, 16374, 10, 11],\n        [14, 16375, 12, 9],\n        [14, 16376, 10, 10],\n        [14, 16377, 11, 9],\n        [14, 16378, 12, 8],\n        [14, 16379, 11, 10],\n        [14, 16380, 12, 10],\n        [14, 16381, 12, 11],\n        [15, 32764, 10, 12],\n        [15, 32765, 11, 11],\n        [15, 32766, 11, 12],\n        [15, 32767, 12, 12]\n    ];\n    \n    const HCB10 = [\n        [4, 0, 1, 1],\n        [4, 1, 1, 2],\n        [4, 2, 2, 1],\n        [5, 6, 2, 2],\n        [5, 7, 1, 0],\n        [5, 8, 0, 1],\n        [5, 9, 1, 3],\n        [5, 10, 3, 2],\n        [5, 11, 3, 1],\n        [5, 12, 2, 3],\n        [5, 13, 3, 3],\n        [6, 28, 2, 0],\n        [6, 29, 0, 2],\n        [6, 30, 2, 4],\n        [6, 31, 4, 2],\n        [6, 32, 1, 4],\n        [6, 33, 4, 1],\n        [6, 34, 0, 0],\n        [6, 35, 4, 3],\n        [6, 36, 3, 4],\n        [6, 37, 3, 0],\n        [6, 38, 0, 3],\n        [6, 39, 4, 4],\n        [6, 40, 2, 5],\n        [6, 41, 5, 2],\n        [7, 84, 1, 5],\n        [7, 85, 5, 1],\n        [7, 86, 5, 3],\n        [7, 87, 3, 5],\n        [7, 88, 5, 4],\n        [7, 89, 4, 5],\n        [7, 90, 6, 2],\n        [7, 91, 2, 6],\n        [7, 92, 6, 3],\n        [7, 93, 4, 0],\n        [7, 94, 6, 1],\n        [7, 95, 0, 4],\n        [7, 96, 1, 6],\n        [7, 97, 3, 6],\n        [7, 98, 5, 5],\n        [7, 99, 6, 4],\n        [7, 100, 4, 6],\n        [8, 202, 6, 5],\n        [8, 203, 7, 2],\n        [8, 204, 3, 7],\n        [8, 205, 2, 7],\n        [8, 206, 5, 6],\n        [8, 207, 8, 2],\n        [8, 208, 7, 3],\n        [8, 209, 5, 0],\n        [8, 210, 7, 1],\n        [8, 211, 0, 5],\n        [8, 212, 8, 1],\n        [8, 213, 1, 7],\n        [8, 214, 8, 3],\n        [8, 215, 7, 4],\n        [8, 216, 4, 7],\n        [8, 217, 2, 8],\n        [8, 218, 6, 6],\n        [8, 219, 7, 5],\n        [8, 220, 1, 8],\n        [8, 221, 3, 8],\n        [8, 222, 8, 4],\n        [8, 223, 4, 8],\n        [8, 224, 5, 7],\n        [8, 225, 8, 5],\n        [8, 226, 5, 8],\n        [9, 454, 7, 6],\n        [9, 455, 6, 7],\n        [9, 456, 9, 2],\n        [9, 457, 6, 0],\n        [9, 458, 6, 8],\n        [9, 459, 9, 3],\n        [9, 460, 3, 9],\n        [9, 461, 9, 1],\n        [9, 462, 2, 9],\n        [9, 463, 0, 6],\n        [9, 464, 8, 6],\n        [9, 465, 9, 4],\n        [9, 466, 4, 9],\n        [9, 467, 10, 2],\n        [9, 468, 1, 9],\n        [9, 469, 7, 7],\n        [9, 470, 8, 7],\n        [9, 471, 9, 5],\n        [9, 472, 7, 8],\n        [9, 473, 10, 3],\n        [9, 474, 5, 9],\n        [9, 475, 10, 4],\n        [9, 476, 2, 10],\n        [9, 477, 10, 1],\n        [9, 478, 3, 10],\n        [9, 479, 9, 6],\n        [9, 480, 6, 9],\n        [9, 481, 8, 0],\n        [9, 482, 4, 10],\n        [9, 483, 7, 0],\n        [9, 484, 11, 2],\n        [10, 970, 7, 9],\n        [10, 971, 11, 3],\n        [10, 972, 10, 6],\n        [10, 973, 1, 10],\n        [10, 974, 11, 1],\n        [10, 975, 9, 7],\n        [10, 976, 0, 7],\n        [10, 977, 8, 8],\n        [10, 978, 10, 5],\n        [10, 979, 3, 11],\n        [10, 980, 5, 10],\n        [10, 981, 8, 9],\n        [10, 982, 11, 5],\n        [10, 983, 0, 8],\n        [10, 984, 11, 4],\n        [10, 985, 2, 11],\n        [10, 986, 7, 10],\n        [10, 987, 6, 10],\n        [10, 988, 10, 7],\n        [10, 989, 4, 11],\n        [10, 990, 1, 11],\n        [10, 991, 12, 2],\n        [10, 992, 9, 8],\n        [10, 993, 12, 3],\n        [10, 994, 11, 6],\n        [10, 995, 5, 11],\n        [10, 996, 12, 4],\n        [10, 997, 11, 7],\n        [10, 998, 12, 5],\n        [10, 999, 3, 12],\n        [10, 1000, 6, 11],\n        [10, 1001, 9, 0],\n        [10, 1002, 10, 8],\n        [10, 1003, 10, 0],\n        [10, 1004, 12, 1],\n        [10, 1005, 0, 9],\n        [10, 1006, 4, 12],\n        [10, 1007, 9, 9],\n        [10, 1008, 12, 6],\n        [10, 1009, 2, 12],\n        [10, 1010, 8, 10],\n        [11, 2022, 9, 10],\n        [11, 2023, 1, 12],\n        [11, 2024, 11, 8],\n        [11, 2025, 12, 7],\n        [11, 2026, 7, 11],\n        [11, 2027, 5, 12],\n        [11, 2028, 6, 12],\n        [11, 2029, 10, 9],\n        [11, 2030, 8, 11],\n        [11, 2031, 12, 8],\n        [11, 2032, 0, 10],\n        [11, 2033, 7, 12],\n        [11, 2034, 11, 0],\n        [11, 2035, 10, 10],\n        [11, 2036, 11, 9],\n        [11, 2037, 11, 10],\n        [11, 2038, 0, 11],\n        [11, 2039, 11, 11],\n        [11, 2040, 9, 11],\n        [11, 2041, 10, 11],\n        [11, 2042, 12, 0],\n        [11, 2043, 8, 12],\n        [12, 4088, 12, 9],\n        [12, 4089, 10, 12],\n        [12, 4090, 9, 12],\n        [12, 4091, 11, 12],\n        [12, 4092, 12, 11],\n        [12, 4093, 0, 12],\n        [12, 4094, 12, 10],\n        [12, 4095, 12, 12]\n    ];\n    \n    const HCB11 = [\n        [4, 0, 0, 0],\n        [4, 1, 1, 1],\n        [5, 4, 16, 16],\n        [5, 5, 1, 0],\n        [5, 6, 0, 1],\n        [5, 7, 2, 1],\n        [5, 8, 1, 2],\n        [5, 9, 2, 2],\n        [6, 20, 1, 3],\n        [6, 21, 3, 1],\n        [6, 22, 3, 2],\n        [6, 23, 2, 0],\n        [6, 24, 2, 3],\n        [6, 25, 0, 2],\n        [6, 26, 3, 3],\n        [7, 54, 4, 1],\n        [7, 55, 1, 4],\n        [7, 56, 4, 2],\n        [7, 57, 2, 4],\n        [7, 58, 4, 3],\n        [7, 59, 3, 4],\n        [7, 60, 3, 0],\n        [7, 61, 0, 3],\n        [7, 62, 5, 1],\n        [7, 63, 5, 2],\n        [7, 64, 2, 5],\n        [7, 65, 4, 4],\n        [7, 66, 1, 5],\n        [7, 67, 5, 3],\n        [7, 68, 3, 5],\n        [7, 69, 5, 4],\n        [8, 140, 4, 5],\n        [8, 141, 6, 2],\n        [8, 142, 2, 6],\n        [8, 143, 6, 1],\n        [8, 144, 6, 3],\n        [8, 145, 3, 6],\n        [8, 146, 1, 6],\n        [8, 147, 4, 16],\n        [8, 148, 3, 16],\n        [8, 149, 16, 5],\n        [8, 150, 16, 3],\n        [8, 151, 16, 4],\n        [8, 152, 6, 4],\n        [8, 153, 16, 6],\n        [8, 154, 4, 0],\n        [8, 155, 4, 6],\n        [8, 156, 0, 4],\n        [8, 157, 2, 16],\n        [8, 158, 5, 5],\n        [8, 159, 5, 16],\n        [8, 160, 16, 7],\n        [8, 161, 16, 2],\n        [8, 162, 16, 8],\n        [8, 163, 2, 7],\n        [8, 164, 7, 2],\n        [8, 165, 3, 7],\n        [8, 166, 6, 5],\n        [8, 167, 5, 6],\n        [8, 168, 6, 16],\n        [8, 169, 16, 10],\n        [8, 170, 7, 3],\n        [8, 171, 7, 1],\n        [8, 172, 16, 9],\n        [8, 173, 7, 16],\n        [8, 174, 1, 16],\n        [8, 175, 1, 7],\n        [8, 176, 4, 7],\n        [8, 177, 16, 11],\n        [8, 178, 7, 4],\n        [8, 179, 16, 12],\n        [8, 180, 8, 16],\n        [8, 181, 16, 1],\n        [8, 182, 6, 6],\n        [8, 183, 9, 16],\n        [8, 184, 2, 8],\n        [8, 185, 5, 7],\n        [8, 186, 10, 16],\n        [8, 187, 16, 13],\n        [8, 188, 8, 3],\n        [8, 189, 8, 2],\n        [8, 190, 3, 8],\n        [8, 191, 5, 0],\n        [8, 192, 16, 14],\n        [8, 193, 11, 16],\n        [8, 194, 7, 5],\n        [8, 195, 4, 8],\n        [8, 196, 6, 7],\n        [8, 197, 7, 6],\n        [8, 198, 0, 5],\n        [9, 398, 8, 4],\n        [9, 399, 16, 15],\n        [9, 400, 12, 16],\n        [9, 401, 1, 8],\n        [9, 402, 8, 1],\n        [9, 403, 14, 16],\n        [9, 404, 5, 8],\n        [9, 405, 13, 16],\n        [9, 406, 3, 9],\n        [9, 407, 8, 5],\n        [9, 408, 7, 7],\n        [9, 409, 2, 9],\n        [9, 410, 8, 6],\n        [9, 411, 9, 2],\n        [9, 412, 9, 3],\n        [9, 413, 15, 16],\n        [9, 414, 4, 9],\n        [9, 415, 6, 8],\n        [9, 416, 6, 0],\n        [9, 417, 9, 4],\n        [9, 418, 5, 9],\n        [9, 419, 8, 7],\n        [9, 420, 7, 8],\n        [9, 421, 1, 9],\n        [9, 422, 10, 3],\n        [9, 423, 0, 6],\n        [9, 424, 10, 2],\n        [9, 425, 9, 1],\n        [9, 426, 9, 5],\n        [9, 427, 4, 10],\n        [9, 428, 2, 10],\n        [9, 429, 9, 6],\n        [9, 430, 3, 10],\n        [9, 431, 6, 9],\n        [9, 432, 10, 4],\n        [9, 433, 8, 8],\n        [9, 434, 10, 5],\n        [9, 435, 9, 7],\n        [9, 436, 11, 3],\n        [9, 437, 1, 10],\n        [9, 438, 7, 0],\n        [9, 439, 10, 6],\n        [9, 440, 7, 9],\n        [9, 441, 3, 11],\n        [9, 442, 5, 10],\n        [9, 443, 10, 1],\n        [9, 444, 4, 11],\n        [9, 445, 11, 2],\n        [9, 446, 13, 2],\n        [9, 447, 6, 10],\n        [9, 448, 13, 3],\n        [9, 449, 2, 11],\n        [9, 450, 16, 0],\n        [9, 451, 5, 11],\n        [9, 452, 11, 5],\n        [10, 906, 11, 4],\n        [10, 907, 9, 8],\n        [10, 908, 7, 10],\n        [10, 909, 8, 9],\n        [10, 910, 0, 16],\n        [10, 911, 4, 13],\n        [10, 912, 0, 7],\n        [10, 913, 3, 13],\n        [10, 914, 11, 6],\n        [10, 915, 13, 1],\n        [10, 916, 13, 4],\n        [10, 917, 12, 3],\n        [10, 918, 2, 13],\n        [10, 919, 13, 5],\n        [10, 920, 8, 10],\n        [10, 921, 6, 11],\n        [10, 922, 10, 8],\n        [10, 923, 10, 7],\n        [10, 924, 14, 2],\n        [10, 925, 12, 4],\n        [10, 926, 1, 11],\n        [10, 927, 4, 12],\n        [10, 928, 11, 1],\n        [10, 929, 3, 12],\n        [10, 930, 1, 13],\n        [10, 931, 12, 2],\n        [10, 932, 7, 11],\n        [10, 933, 3, 14],\n        [10, 934, 5, 12],\n        [10, 935, 5, 13],\n        [10, 936, 14, 4],\n        [10, 937, 4, 14],\n        [10, 938, 11, 7],\n        [10, 939, 14, 3],\n        [10, 940, 12, 5],\n        [10, 941, 13, 6],\n        [10, 942, 12, 6],\n        [10, 943, 8, 0],\n        [10, 944, 11, 8],\n        [10, 945, 2, 12],\n        [10, 946, 9, 9],\n        [10, 947, 14, 5],\n        [10, 948, 6, 13],\n        [10, 949, 10, 10],\n        [10, 950, 15, 2],\n        [10, 951, 8, 11],\n        [10, 952, 9, 10],\n        [10, 953, 14, 6],\n        [10, 954, 10, 9],\n        [10, 955, 5, 14],\n        [10, 956, 11, 9],\n        [10, 957, 14, 1],\n        [10, 958, 2, 14],\n        [10, 959, 6, 12],\n        [10, 960, 1, 12],\n        [10, 961, 13, 8],\n        [10, 962, 0, 8],\n        [10, 963, 13, 7],\n        [10, 964, 7, 12],\n        [10, 965, 12, 7],\n        [10, 966, 7, 13],\n        [10, 967, 15, 3],\n        [10, 968, 12, 1],\n        [10, 969, 6, 14],\n        [10, 970, 2, 15],\n        [10, 971, 15, 5],\n        [10, 972, 15, 4],\n        [10, 973, 1, 14],\n        [10, 974, 9, 11],\n        [10, 975, 4, 15],\n        [10, 976, 14, 7],\n        [10, 977, 8, 13],\n        [10, 978, 13, 9],\n        [10, 979, 8, 12],\n        [10, 980, 5, 15],\n        [10, 981, 3, 15],\n        [10, 982, 10, 11],\n        [10, 983, 11, 10],\n        [10, 984, 12, 8],\n        [10, 985, 15, 6],\n        [10, 986, 15, 7],\n        [10, 987, 8, 14],\n        [10, 988, 15, 1],\n        [10, 989, 7, 14],\n        [10, 990, 9, 0],\n        [10, 991, 0, 9],\n        [10, 992, 9, 13],\n        [10, 993, 9, 12],\n        [10, 994, 12, 9],\n        [10, 995, 14, 8],\n        [10, 996, 10, 13],\n        [10, 997, 14, 9],\n        [10, 998, 12, 10],\n        [10, 999, 6, 15],\n        [10, 1000, 7, 15],\n        [11, 2002, 9, 14],\n        [11, 2003, 15, 8],\n        [11, 2004, 11, 11],\n        [11, 2005, 11, 14],\n        [11, 2006, 1, 15],\n        [11, 2007, 10, 12],\n        [11, 2008, 10, 14],\n        [11, 2009, 13, 11],\n        [11, 2010, 13, 10],\n        [11, 2011, 11, 13],\n        [11, 2012, 11, 12],\n        [11, 2013, 8, 15],\n        [11, 2014, 14, 11],\n        [11, 2015, 13, 12],\n        [11, 2016, 12, 13],\n        [11, 2017, 15, 9],\n        [11, 2018, 14, 10],\n        [11, 2019, 10, 0],\n        [11, 2020, 12, 11],\n        [11, 2021, 9, 15],\n        [11, 2022, 0, 10],\n        [11, 2023, 12, 12],\n        [11, 2024, 11, 0],\n        [11, 2025, 12, 14],\n        [11, 2026, 10, 15],\n        [11, 2027, 13, 13],\n        [11, 2028, 0, 13],\n        [11, 2029, 14, 12],\n        [11, 2030, 15, 10],\n        [11, 2031, 15, 11],\n        [11, 2032, 11, 15],\n        [11, 2033, 14, 13],\n        [11, 2034, 13, 0],\n        [11, 2035, 0, 11],\n        [11, 2036, 13, 14],\n        [11, 2037, 15, 12],\n        [11, 2038, 15, 13],\n        [11, 2039, 12, 15],\n        [11, 2040, 14, 0],\n        [11, 2041, 14, 14],\n        [11, 2042, 13, 15],\n        [11, 2043, 12, 0],\n        [11, 2044, 14, 15],\n        [12, 4090, 0, 14],\n        [12, 4091, 0, 12],\n        [12, 4092, 15, 14],\n        [12, 4093, 15, 0],\n        [12, 4094, 0, 15],\n        [12, 4095, 15, 15]\n    ];\n    \n    const HCB_SF = [\n        [1, 0, 60],\n        [3, 4, 59],\n        [4, 10, 61],\n        [4, 11, 58],\n        [4, 12, 62],\n        [5, 26, 57],\n        [5, 27, 63],\n        [6, 56, 56],\n        [6, 57, 64],\n        [6, 58, 55],\n        [6, 59, 65],\n        [7, 120, 66],\n        [7, 121, 54],\n        [7, 122, 67],\n        [8, 246, 53],\n        [8, 247, 68],\n        [8, 248, 52],\n        [8, 249, 69],\n        [8, 250, 51],\n        [9, 502, 70],\n        [9, 503, 50],\n        [9, 504, 49],\n        [9, 505, 71],\n        [10, 1012, 72],\n        [10, 1013, 48],\n        [10, 1014, 73],\n        [10, 1015, 47],\n        [10, 1016, 74],\n        [10, 1017, 46],\n        [11, 2036, 76],\n        [11, 2037, 75],\n        [11, 2038, 77],\n        [11, 2039, 78],\n        [11, 2040, 45],\n        [11, 2041, 43],\n        [12, 4084, 44],\n        [12, 4085, 79],\n        [12, 4086, 42],\n        [12, 4087, 41],\n        [12, 4088, 80],\n        [12, 4089, 40],\n        [13, 8180, 81],\n        [13, 8181, 39],\n        [13, 8182, 82],\n        [13, 8183, 38],\n        [13, 8184, 83],\n        [14, 16370, 37],\n        [14, 16371, 35],\n        [14, 16372, 85],\n        [14, 16373, 33],\n        [14, 16374, 36],\n        [14, 16375, 34],\n        [14, 16376, 84],\n        [14, 16377, 32],\n        [15, 32756, 87],\n        [15, 32757, 89],\n        [15, 32758, 30],\n        [15, 32759, 31],\n        [16, 65520, 86],\n        [16, 65521, 29],\n        [16, 65522, 26],\n        [16, 65523, 27],\n        [16, 65524, 28],\n        [16, 65525, 24],\n        [16, 65526, 88],\n        [17, 131054, 25],\n        [17, 131055, 22],\n        [17, 131056, 23],\n        [18, 262114, 90],\n        [18, 262115, 21],\n        [18, 262116, 19],\n        [18, 262117, 3],\n        [18, 262118, 1],\n        [18, 262119, 2],\n        [18, 262120, 0],\n        [19, 524242, 98],\n        [19, 524243, 99],\n        [19, 524244, 100],\n        [19, 524245, 101],\n        [19, 524246, 102],\n        [19, 524247, 117],\n        [19, 524248, 97],\n        [19, 524249, 91],\n        [19, 524250, 92],\n        [19, 524251, 93],\n        [19, 524252, 94],\n        [19, 524253, 95],\n        [19, 524254, 96],\n        [19, 524255, 104],\n        [19, 524256, 111],\n        [19, 524257, 112],\n        [19, 524258, 113],\n        [19, 524259, 114],\n        [19, 524260, 115],\n        [19, 524261, 116],\n        [19, 524262, 110],\n        [19, 524263, 105],\n        [19, 524264, 106],\n        [19, 524265, 107],\n        [19, 524266, 108],\n        [19, 524267, 109],\n        [19, 524268, 118],\n        [19, 524269, 6],\n        [19, 524270, 8],\n        [19, 524271, 9],\n        [19, 524272, 10],\n        [19, 524273, 5],\n        [19, 524274, 103],\n        [19, 524275, 120],\n        [19, 524276, 119],\n        [19, 524277, 4],\n        [19, 524278, 7],\n        [19, 524279, 15],\n        [19, 524280, 16],\n        [19, 524281, 18],\n        [19, 524282, 20],\n        [19, 524283, 17],\n        [19, 524284, 11],\n        [19, 524285, 12],\n        [19, 524286, 14],\n        [19, 524287, 13]\n    ];\n    \n    const CODEBOOKS = [HCB1, HCB2, HCB3, HCB4, HCB5, HCB6, HCB7, HCB8, HCB9, HCB10, HCB11];\n    const UNSIGNED = [false, false, true, true, false, false, true, true, true, true, true],\n          QUAD_LEN = 4, \n          PAIR_LEN = 2;\n    \n    var Huffman = {\n        findOffset: function(stream, table) {\n            var off = 0,\n                len = table[off][0],\n                cw = stream.read(len);\n                \n            while (cw !== table[off][1]) {\n                var j = table[++off][0] - len;\n                len = table[off][0];\n                cw <<= j;\n                cw |= stream.read(j);\n            }\n            \n            return off;\n        },\n        \n        signValues: function(stream, data, off, len) {\n            for (var i = off; i < off + len; i++) {\n                if (data[i] && stream.read(1))\n                    data[i] = -data[i];\n            }\n        },\n        \n        getEscape: function(stream, s) {\n            var i = 4;\n            while (stream.read(1))\n                i++;\n                \n            var j = stream.read(i) | (1 << i);\n            return s < 0 ? -j : j;\n        },\n        \n        decodeScaleFactor: function(stream) {\n            var offset = this.findOffset(stream, HCB_SF);\n            return HCB_SF[offset][2];\n        },\n        \n        decodeSpectralData: function(stream, cb, data, off) {\n            var HCB = CODEBOOKS[cb - 1],\n                offset = this.findOffset(stream, HCB);\n                \n            data[off] = HCB[offset][2];\n            data[off + 1] = HCB[offset][3];\n            \n            if (cb < 5) {\n                data[off + 2] = HCB[offset][4];\n                data[off + 3] = HCB[offset][5];\n            }\n            \n            // sign and escape\n            if (cb < 11) {\n                if (UNSIGNED[cb - 1])\n                    this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\n                    \n            } else if (cb === 11 || cb > 15) {\n                this.signValues(stream, data, off, cb < 5 ? QUAD_LEN : PAIR_LEN);\n                \n                if (Math.abs(data[off]) === 16) \n                    data[off] = this.getEscape(stream, data[off]);\n                    \n                if (Math.abs(data[off + 1]) === 16)\n                    data[off + 1] = this.getEscape(stream, data[off + 1]);\n            } else {\n                throw new Error(\"Huffman: unknown spectral codebook: \" + cb);\n            }\n        }\n    };\n    \n    return Huffman;\n    \n})();//import \"huffman.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar TNS = (function() {\n    \n    // Temporal Noise Shaping\n    function TNS(config) {\n        this.maxBands = TNS_MAX_BANDS_1024[config.sampleIndex]\n        this.nFilt = new Int32Array(8);\n        this.length = new Array(8);\n        this.direction = new Array(8);\n        this.order = new Array(8);\n        this.coef = new Array(8);\n        \n        // Probably could allocate these as needed\n        for (var w = 0; w < 8; w++) {\n            this.length[w] = new Int32Array(4);\n            this.direction[w] = new Array(4);\n            this.order[w] = new Int32Array(4);\n            this.coef[w] = new Array(4);\n            \n            for (var filt = 0; filt < 4; filt++) {\n                this.coef[w][filt] = new Float32Array(TNS_MAX_ORDER);\n            }\n        }\n        \n        this.lpc = new Float32Array(TNS_MAX_ORDER);\n        this.tmp = new Float32Array(TNS_MAX_ORDER);\n    }\n\n    const TNS_MAX_ORDER = 20,\n          SHORT_BITS = [1, 4, 3],\n          LONG_BITS = [2, 6, 5];\n          \n    const TNS_COEF_1_3 = [0.00000000, -0.43388373, 0.64278758, 0.34202015],\n\n          TNS_COEF_0_3 = [0.00000000, -0.43388373, -0.78183150, -0.97492790,\n                          0.98480773, 0.86602539, 0.64278758, 0.34202015],\n                          \n          TNS_COEF_1_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\n                          0.67369562, 0.52643216, 0.36124167, 0.18374951],\n                          \n          TNS_COEF_0_4 = [0.00000000, -0.20791170, -0.40673664, -0.58778524,\n                          -0.74314481, -0.86602539, -0.95105654, -0.99452192,\n                          0.99573416, 0.96182561, 0.89516330, 0.79801720,\n                          0.67369562, 0.52643216, 0.36124167, 0.18374951],\n                          \n          TNS_TABLES = [TNS_COEF_0_3, TNS_COEF_0_4, TNS_COEF_1_3, TNS_COEF_1_4];\n          \n    const TNS_MAX_BANDS_1024 = [31, 31, 34, 40, 42, 51, 46, 46, 42, 42, 42, 39, 39],\n          TNS_MAX_BANDS_128 = [9, 9, 10, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14];\n    \n    TNS.prototype.decode = function(stream, info) {\n        var windowCount = info.windowCount,\n            bits = info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE ? SHORT_BITS : LONG_BITS;\n        \n        for (var w = 0; w < windowCount; w++) {\n            if (this.nFilt[w] = stream.read(bits[0])) {\n                var coefRes = stream.read(1),\n                    nFilt_w = this.nFilt[w],\n                    length_w = this.length[w],\n                    order_w = this.order[w],\n                    direction_w = this.direction[w],\n                    coef_w = this.coef[w];\n                \n                for (var filt = 0; filt < nFilt_w; filt++) {\n                    length_w[filt] = stream.read(bits[1]);\n                    \n                    if ((order_w[filt] = stream.read(bits[2])) > 20)\n                        throw new Error(\"TNS filter out of range: \" + order_w[filt]);\n                    \n                    if (order_w[filt]) {\n                        direction_w[filt] = !!stream.read(1);\n                        var coefCompress = stream.read(1),\n                            coefLen = coefRes + 3 - coefCompress,\n                            tmp = 2 * coefCompress + coefRes,\n                            table = TNS_TABLES[tmp],\n                            order_w_filt = order_w[filt],\n                            coef_w_filt = coef_w[filt];\n                            \n                        for (var i = 0; i < order_w_filt; i++)\n                            coef_w_filt[i] = table[stream.read(coefLen)];\n                    }\n                        \n                }\n            }\n        }\n    };\n    \n    TNS.prototype.process = function(ics, data, decode) {\n        var mmm = Math.min(this.maxBands, ics.maxSFB),\n            lpc = this.lpc,\n            tmp = this.tmp,\n            info = ics.info,\n            windowCount = info.windowCount;\n            \n        for (var w = 0; w < windowCount; w++) {\n            var bottom = info.swbCount,\n                nFilt_w = this.nFilt[w],\n                length_w = this.length[w],\n                order_w = this.order[w],\n                coef_w = this.coef[w],\n                direction_w = this.direction[w];\n            \n            for (var filt = 0; filt < nFilt_w; filt++) {\n                var top = bottom,\n                    bottom = Math.max(0, tmp - length_w[filt]),\n                    order = order_w[filt];\n                    \n                if (order === 0) continue;\n                \n                // calculate lpc coefficients\n                var autoc = coef_w[filt];\n                for (var i = 0; i < order; i++) {\n                    var r = -autoc[i];\n                    lpc[i] = r;\n    \n                    for (var j = 0, len = (i + 1) >> 1; j < len; j++) {\n                        var f = lpc[j],\n                            b = lpc[i - 1 - j];\n    \n                        lpc[j] = f + r * b;\n                        lpc[i - 1 - j] = b + r * f;\n                    }\n                }\n                \n                var start = info.swbOffsets[Math.min(bottom, mmm)],\n                    end = info.swbOffsets[Math.min(top, mmm)],\n                    size,\n                    inc = 1;\n                    \n                if ((size = end - start) <= 0) continue;\n                \n                if (direction_w[filt]) {\n                    inc = -1;\n                    start = end - 1;\n                }\n                \n                start += w * 128;\n                \n                if (decode) {\n                    // ar filter\n                    for (var m = 0; m < size; m++, start += inc) {\n                        for (var i = 1; i <= Math.min(m, order); i++) {\n                            data[start] -= data[start - i * inc] * lpc[i - 1];\n                        }\n                    }\n                } else {\n                    // ma filter\n                    for (var m = 0; m < size; m++, start += inc) {\n                        tmp[0] = data[start];\n                        \n                        for (var i = 1; i <= Math.min(m, order); i++)\n                            data[start] += tmp[i] * lpc[i - 1];\n                        \n                        for (var i = order; i > 0; i--)\n                            tmp[i] = tmp[i - 1];\n                    }\n                }\n            }\n        }\n    };\n    \n    return TNS;\n\n})();//import \"tns.js\"\n\nvar ICStream = (function() {\n    \n    // Individual Channel Stream\n    function ICStream(config) {\n        this.info = new ICSInfo();\n        this.bandTypes = new Int32Array(MAX_SECTIONS);\n        this.sectEnd = new Int32Array(MAX_SECTIONS);\n        this.data = new Float32Array(config.frameLength);\n        this.scaleFactors = new Float32Array(MAX_SECTIONS);\n        this.randomState = 0x1F2E3D4C;\n        this.tns = new TNS(config);\n        this.specBuf = new Int32Array(4);\n    }\n          \n    ICStream.ZERO_BT = 0;         // Scalefactors and spectral data are all zero.\n    ICStream.FIRST_PAIR_BT = 5;   // This and later band types encode two values (rather than four) with one code word.\n    ICStream.ESC_BT = 11;         // Spectral data are coded with an escape sequence.\n    ICStream.NOISE_BT = 13;       // Spectral data are scaled white noise not coded in the bitstream.\n    ICStream.INTENSITY_BT2 = 14;  // Scalefactor data are intensity stereo positions.\n    ICStream.INTENSITY_BT = 15;   // Scalefactor data are intensity stereo positions.\n    \n    ICStream.ONLY_LONG_SEQUENCE = 0;\n    ICStream.LONG_START_SEQUENCE = 1;\n    ICStream.EIGHT_SHORT_SEQUENCE = 2;\n    ICStream.LONG_STOP_SEQUENCE = 3;\n    \n    const MAX_SECTIONS = 120,\n          MAX_WINDOW_GROUP_COUNT = 8;\n    \n    const SF_DELTA = 60,\n          SF_OFFSET = 200;\n    \n    ICStream.prototype = {\n        decode: function(stream, config, commonWindow) {\n            this.globalGain = stream.read(8);\n            \n            if (!commonWindow)\n                this.info.decode(stream, config, commonWindow);\n                \n            this.decodeBandTypes(stream, config);\n            this.decodeScaleFactors(stream);\n            \n            if (this.pulsePresent = stream.read(1)) {\n                if (this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE)\n                    throw new Error(\"Pulse tool not allowed in eight short sequence.\");\n                    \n                this.decodePulseData(stream);\n            }\n            \n            if (this.tnsPresent = stream.read(1)) {\n                this.tns.decode(stream, this.info);\n            }\n            \n            if (this.gainPresent = stream.read(1)) {\n                throw new Error(\"TODO: decode gain control/SSR\");\n            }\n            \n            this.decodeSpectralData(stream);\n        },\n        \n        decodeBandTypes: function(stream, config) {\n            var bits = this.info.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE ? 3 : 5,\n                groupCount = this.info.groupCount,\n                maxSFB = this.info.maxSFB,\n                bandTypes = this.bandTypes,\n                sectEnd = this.sectEnd,\n                idx = 0,\n                escape = (1 << bits) - 1;\n            \n            for (var g = 0; g < groupCount; g++) {\n                var k = 0;\n                while (k < maxSFB) {\n                    var end = k,\n                        bandType = stream.read(4);\n                        \n                    if (bandType === 12)\n                        throw new Error(\"Invalid band type: 12\");\n                        \n                    var incr;\n                    while ((incr = stream.read(bits)) === escape)\n                        end += incr;\n                        \n                    end += incr;\n                    \n                    if (end > maxSFB)\n                        throw new Error(\"Too many bands (\" + end + \" > \" + maxSFB + \")\");\n                        \n                    for (; k < end; k++) {\n                        bandTypes[idx] = bandType;\n                        sectEnd[idx++] = end;\n                    }\n                }\n            }\n        },\n        \n        decodeScaleFactors: function(stream) {\n            var groupCount = this.info.groupCount,\n                maxSFB = this.info.maxSFB,\n                offset = [this.globalGain, this.globalGain - 90, 0], // spectrum, noise, intensity\n                idx = 0,\n                noiseFlag = true,\n                scaleFactors = this.scaleFactors,\n                sectEnd = this.sectEnd,\n                bandTypes = this.bandTypes;\n                            \n            for (var g = 0; g < groupCount; g++) {\n                for (var i = 0; i < maxSFB;) {\n                    var runEnd = sectEnd[idx];\n                    \n                    switch (bandTypes[idx]) {\n                        case ICStream.ZERO_BT:\n                            for (; i < runEnd; i++, idx++) {\n                                scaleFactors[idx] = 0;\n                            }\n                            break;\n                            \n                        case ICStream.INTENSITY_BT:\n                        case ICStream.INTENSITY_BT2:\n                            for(; i < runEnd; i++, idx++) {\n                                offset[2] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                                var tmp = Math.min(Math.max(offset[2], -155), 100);\n                                scaleFactors[idx] = SCALEFACTOR_TABLE[-tmp + SF_OFFSET];\n                            }\n                            break;\n                            \n                        case ICStream.NOISE_BT:\n                            for(; i < runEnd; i++, idx++) {\n                                if (noiseFlag) {\n                                    offset[1] += stream.read(9) - 256;\n                                    noiseFlag = false;\n                                } else {\n                                    offset[1] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                                }\n                                var tmp = Math.min(Math.max(offset[1], -100), 155);\n                                scaleFactors[idx] = -SCALEFACTOR_TABLE[tmp + SF_OFFSET];\n                            }\n                            break;\n                            \n                        default:\n                            for(; i < runEnd; i++, idx++) {\n                                offset[0] += Huffman.decodeScaleFactor(stream) - SF_DELTA;\n                                if(offset[0] > 255) \n                                    throw new Error(\"Scalefactor out of range: \" + offset[0]);\n                                    \n                                scaleFactors[idx] = SCALEFACTOR_TABLE[offset[0] - 100 + SF_OFFSET];\n                            }\n                            break;\n                    }\n                }\n            }\n        },\n        \n        decodePulseData: function(stream) {\n            var pulseCount = stream.read(2) + 1,\n                pulseSWB = stream.read(6);\n                \n            if (pulseSWB >= this.info.swbCount)\n                throw new Error(\"Pulse SWB out of range: \" + pulseSWB);\n                \n            if (!this.pulseOffset || this.pulseOffset.length !== pulseCount) {\n                // only reallocate if needed\n                this.pulseOffset = new Int32Array(pulseCount);\n                this.pulseAmp = new Int32Array(pulseCount);\n            }\n            \n            this.pulseOffset[0] = this.info.swbOffsets[pulseSWB] + stream.read(5);\n            this.pulseAmp[0] = stream.read(4);\n            \n            if (this.pulseOffset[0] > 1023)\n                throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[0]);\n            \n            for (var i = 1; i < pulseCount; i++) {\n                this.pulseOffset[i] = stream.read(5) + this.pulseOffset[i - 1];\n                if (this.pulseOffset[i] > 1023)\n                    throw new Error(\"Pulse offset out of range: \" + this.pulseOffset[i]);\n                    \n                this.pulseAmp[i] = stream.read(4);\n            }\n        },\n        \n        decodeSpectralData: function(stream) {\n            var data = this.data,\n                info = this.info,\n                maxSFB = info.maxSFB,\n                windowGroups = info.groupCount,\n                offsets = info.swbOffsets,\n                bandTypes = this.bandTypes,\n                scaleFactors = this.scaleFactors,\n                buf = this.specBuf;\n                \n            var groupOff = 0, idx = 0;\n            for (var g = 0; g < windowGroups; g++) {\n                var groupLen = info.groupLength[g];\n                \n                for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\n                    var hcb = bandTypes[idx],\n                        off = groupOff + offsets[sfb],\n                        width = offsets[sfb + 1] - offsets[sfb];\n                        \n                    if (hcb === ICStream.ZERO_BT || hcb === ICStream.INTENSITY_BT || hcb === ICStream.INTENSITY_BT2) {\n                        for (var group = 0; group < groupLen; group++, off += 128) {\n                            for (var i = off; i < off + width; i++) {\n                                data[i] = 0;\n                            }\n                        }\n                    } else if (hcb === ICStream.NOISE_BT) {\n                        // fill with random values\n                        for (var group = 0; group < groupLen; group++, off += 128) {\n                            var energy = 0;\n                            \n                            for (var k = 0; k < width; k++) {\n                                this.randomState *= 1664525 + 1013904223;\n                                data[off + k] = this.randomState;\n                                energy += data[off + k] * data[off + k];\n                            }\n                            \n                            var scale = scaleFactors[idx] / Math.sqrt(energy);\n                            for (var k = 0; k < width; k++) {\n                                data[off + k] *= scale;\n                            }\n                        }\n                    } else {\n                        for (var group = 0; group < groupLen; group++, off += 128) {\n                            var num = (hcb >= ICStream.FIRST_PAIR_BT) ? 2 : 4;\n                            for (var k = 0; k < width; k += num) {\n                                Huffman.decodeSpectralData(stream, hcb, buf, 0);\n                                \n                                // inverse quantization & scaling\n                                for (var j = 0; j < num; j++) {\n                                    data[off + k + j] = (buf[j] > 0) ? IQ_TABLE[buf[j]] : -IQ_TABLE[-buf[j]];\n                                    data[off + k + j] *= scaleFactors[idx];\n                                }\n                            }\n                        }\n                    }\n                }\n                groupOff += groupLen << 7;\n            }\n            \n            // add pulse data, if present\n            if (this.pulsePresent) {\n                throw new Error('TODO: add pulse data');\n            }\n        }\n    }\n    \n    // Individual Channel Stream Info\n    function ICSInfo() {\n        this.windowShape = new Int32Array(2);\n        this.windowSequence = ICStream.ONLY_LONG_SEQUENCE;\n        this.groupLength = new Int32Array(MAX_WINDOW_GROUP_COUNT);\n        this.ltpData1Present = false;\n        this.ltpData2Present = false;\n    }\n    \n    ICSInfo.prototype = {\n        decode: function(stream, config, commonWindow) {\n            stream.advance(1); // reserved\n            \n            this.windowSequence = stream.read(2);\n            this.windowShape[0] = this.windowShape[1];\n            this.windowShape[1] = stream.read(1);\n            \n            this.groupCount = 1;\n            this.groupLength[0] = 1;\n            \n            if (this.windowSequence === ICStream.EIGHT_SHORT_SEQUENCE) {\n                this.maxSFB = stream.read(4);\n                for (var i = 0; i < 7; i++) {\n                    if (stream.read(1)) {\n                        this.groupLength[this.groupCount - 1]++;\n                    } else {\n                        this.groupCount++;\n                        this.groupLength[this.groupCount - 1] = 1;\n                    }\n                }\n                \n                this.windowCount = 8;\n                this.swbOffsets = SWB_OFFSET_128[config.sampleIndex];\n                this.swbCount = SWB_SHORT_WINDOW_COUNT[config.sampleIndex];\n                this.predictorPresent = false;\n            } else {\n                this.maxSFB = stream.read(6);\n                this.windowCount = 1;\n                this.swbOffsets = SWB_OFFSET_1024[config.sampleIndex];\n                this.swbCount = SWB_LONG_WINDOW_COUNT[config.sampleIndex];\n                this.predictorPresent = !!stream.read(1);\n                \n                if (this.predictorPresent)\n                    this.decodePrediction(stream, config, commonWindow);\n            }\n        },\n        \n        decodePrediction: function(stream, config, commonWindow) {\n            throw new Error('Prediction not implemented.');\n            \n            switch (config.profile) {\n                case AOT_AAC_MAIN:\n                    throw new Error('Prediction not implemented.');\n                    break;\n                    \n                case AOT_AAC_LTP:\n                    throw new Error('LTP prediction not implemented.');\n                    break;\n                    \n                default:\n                    throw new Error('Unsupported profile for prediction ' + config.profile);\n            }\n        }\n    };\n    \n    return ICStream;\n    \n})();//import \"ics.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n//import \"ics.js\"\n\nvar CPEElement = (function() {\n    \n    // Channel Pair Element\n    function CPEElement(config) {\n        this.ms_used = [];\n        this.left = new ICStream(config);\n        this.right = new ICStream(config);\n    }\n    \n    const MAX_MS_MASK = 128;\n    \n    const MASK_TYPE_ALL_0 = 0,\n          MASK_TYPE_USED = 1,\n          MASK_TYPE_ALL_1 = 2,\n          MASK_TYPE_RESERVED = 3;\n    \n    CPEElement.prototype.decode = function(stream, config) {\n        var left = this.left,\n            right = this.right,\n            ms_used = this.ms_used;\n            \n        if (this.commonWindow = !!stream.read(1)) {\n            left.info.decode(stream, config, true);\n            right.info = left.info;\n    \n            var mask = stream.read(2);\n            this.maskPresent = !!mask;\n            \n            switch (mask) {\n                case MASK_TYPE_USED:\n                    var len = left.info.groupCount * left.info.maxSFB;\n                    for (var i = 0; i < len; i++) {\n                        ms_used[i] = !!stream.read(1);\n                    }\n                    break;\n                \n                case MASK_TYPE_ALL_0:    \n                case MASK_TYPE_ALL_1:\n                    var val = !!mask;\n                    for (var i = 0; i < MAX_MS_MASK; i++) {\n                        ms_used[i] = val;\n                    }\n                    break;\n                    \n                default:\n                    throw new Error(\"Reserved ms mask type: \" + mask);\n            }\n        } else {\n            for (var i = 0; i < MAX_MS_MASK; i++)\n                ms_used[i] = false;\n        }\n        \n        left.decode(stream, config, this.commonWindow);\n        right.decode(stream, config, this.commonWindow);\n    };\n    \n    return CPEElement;\n    \n})();//import \"cpe.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar CCEElement = (function() {\n    \n    // Channel Coupling Element\n    function CCEElement(config) {\n        this.ics = new ICStream(config);\n        this.channelPair = new Array(8);\n        this.idSelect = new Int32Array(8);\n        this.chSelect = new Int32Array(8);\n        this.gain = new Array(16);\n    }\n    \n    CCEElement.BEFORE_TNS = 0;\n    CCEElement.AFTER_TNS = 1;\n    CCEElement.AFTER_IMDCT = 2;\n    \n    const CCE_SCALE = new Float32Array([\n        1.09050773266525765921,\n        1.18920711500272106672,\n        1.4142135623730950488016887,\n        2.0\n    ]);\n    \n    CCEElement.prototype = {\n        decode: function(stream, config) {\n            var channelPair = this.channelPair,\n                idSelect = this.idSelect,\n                chSelect = this.chSelect;\n    \n            this.couplingPoint = 2 * stream.read(1);\n            this.coupledCount = stream.read(3);\n    \n            var gainCount = 0;\n            for (var i = 0; i <= this.coupledCount; i++) {\n                gainCount++;\n                channelPair[i] = stream.read(1);\n                idSelect[i] = stream.read(4);\n    \n                if (channelPair[i]) {\n                    chSelect[i] = stream.read(2);\n                    if (chSelect[i] === 3)\n                        gainCount++;\n    \n                } else {\n                    chSelect[i] = 2;\n                }\n            }\n    \n            this.couplingPoint += stream.read(1) || (this.couplingPoint >>> 1);\n    \n            var sign = stream.read(1),\n                scale = CCE_SCALE[stream.read(2)];\n    \n            this.ics.decode(stream, config, false);\n    \n            var groupCount = this.ics.info.groupCount,\n                maxSFB = this.ics.info.maxSFB,\n                bandTypes = this.ics.bandTypes;\n    \n            for (var i = 0; i < gainCount; i++) {\n                var idx = 0,\n                    cge = 1,\n                    gain = 0,\n                    gainCache = 1;\n    \n                if (i > 0) {\n                    cge = this.couplingPoint === CCEElement.AFTER_IMDCT ? 1 : stream.read(1);\n                    gain = cge ? Huffman.decodeScaleFactor(stream) - 60 : 0;\n                    gainCache = Math.pow(scale, -gain);\n                }\n    \n                var gain_i = this.gain[i] = new Float32Array(120);\n    \n                if (this.couplingPoint === CCEElement.AFTER_IMDCT) {\n                    gain_i[0] = gainCache;\n                } else {\n                    for (var g = 0; g < groupCount; g++) {\n                        for (var sfb = 0; sfb < maxSFB; sfb++) {\n                            if (bandTypes[idx] !== ICStream.ZERO_BT) {\n                                if (cge === 0) {\n                                    var t = Huffman.decodeScaleFactor(stream) - 60;\n                                    if (t !== 0) {\n                                        var s = 1;\n                                        t = gain += t;\n                                        if (sign) {\n                                            s -= 2 * (t * 0x1);\n                                            t >>>= 1;\n                                        }\n                                        gainCache = Math.pow(scale, -t) * s;\n                                    }\n                                }\n                                gain_i[idx++] = gainCache;\n                            }\n                        }\n                    }\n                }\n            }\n        },\n    \n        applyIndependentCoupling: function(index, data) {\n            var gain = this.gain[index][0],\n                iqData = this.ics.data;\n    \n            for (var i = 0; i < data.length; i++) {\n                data[i] += gain * iqData[i];\n            }\n        },\n    \n        applyDependentCoupling: function(index, data) {\n            var info = this.ics.info,\n                swbOffsets = info.swbOffsets,\n                groupCount = info.groupCount,\n                maxSFB = info.maxSFB,\n                bandTypes = this.ics.bandTypes,\n                iqData = this.ics.data;\n    \n            var idx = 0,\n                offset = 0,\n                gains = this.gain[index];\n    \n            for (var g = 0; g < groupCount; g++) {\n                var len = info.groupLength[g];\n    \n                for (var sfb = 0; sfb < maxSFB; sfb++, idx++) {\n                    if (bandTypes[idx] !== ICStream.ZERO_BT) {\n                        var gain = gains[idx];\n                        for (var group = 0; group < len; group++) {\n                            for (var k = swbOffsets[sfb]; k < swbOffsets[swb + 1]; k++) {\n                                data[offset + group * 128 + k] += gain * iqData[offset + group * 128 + k];\n                            }\n                        }\n                    }\n                }\n    \n                offset += len * 128;\n            }\n        }\n    };\n    \n    return CCEElement;\n    \n})();//import \"cce.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nconst MDCT_TABLE_2048 = [\n    [0.031249997702054, 0.000011984224612],\n    [0.031249813866531, 0.000107857810004],\n    [0.031249335895858, 0.000203730380198],\n    [0.031248563794535, 0.000299601032804],\n    [0.031247497569829, 0.000395468865451],\n    [0.031246137231775, 0.000491332975794],\n    [0.031244482793177, 0.000587192461525],\n    [0.031242534269608, 0.000683046420376],\n    [0.031240291679407, 0.000778893950134],\n    [0.031237755043684, 0.000874734148645],\n    [0.031234924386313, 0.000970566113826],\n    [0.031231799733938, 0.001066388943669],\n    [0.031228381115970, 0.001162201736253],\n    [0.031224668564585, 0.001258003589751],\n    [0.031220662114728, 0.001353793602441],\n    [0.031216361804108, 0.001449570872710],\n    [0.031211767673203, 0.001545334499065],\n    [0.031206879765253, 0.001641083580144],\n    [0.031201698126266, 0.001736817214719],\n    [0.031196222805014, 0.001832534501709],\n    [0.031190453853031, 0.001928234540186],\n    [0.031184391324617, 0.002023916429386],\n    [0.031178035276836, 0.002119579268713],\n    [0.031171385769513, 0.002215222157753],\n    [0.031164442865236, 0.002310844196278],\n    [0.031157206629353, 0.002406444484258],\n    [0.031149677129975, 0.002502022121865],\n    [0.031141854437973, 0.002597576209488],\n    [0.031133738626977, 0.002693105847734],\n    [0.031125329773375, 0.002788610137442],\n    [0.031116627956316, 0.002884088179689],\n    [0.031107633257703, 0.002979539075801],\n    [0.031098345762200, 0.003074961927355],\n    [0.031088765557222, 0.003170355836197],\n    [0.031078892732942, 0.003265719904442],\n    [0.031068727382288, 0.003361053234488],\n    [0.031058269600939, 0.003456354929021],\n    [0.031047519487329, 0.003551624091024],\n    [0.031036477142640, 0.003646859823790],\n    [0.031025142670809, 0.003742061230921],\n    [0.031013516178519, 0.003837227416347],\n    [0.031001597775203, 0.003932357484328],\n    [0.030989387573042, 0.004027450539462],\n    [0.030976885686963, 0.004122505686697],\n    [0.030964092234638, 0.004217522031340],\n    [0.030951007336485, 0.004312498679058],\n    [0.030937631115663, 0.004407434735897],\n    [0.030923963698074, 0.004502329308281],\n    [0.030910005212362, 0.004597181503027],\n    [0.030895755789908, 0.004691990427350],\n    [0.030881215564835, 0.004786755188872],\n    [0.030866384674000, 0.004881474895632],\n    [0.030851263256996, 0.004976148656090],\n    [0.030835851456154, 0.005070775579142],\n    [0.030820149416533, 0.005165354774124],\n    [0.030804157285929, 0.005259885350819],\n    [0.030787875214864, 0.005354366419469],\n    [0.030771303356593, 0.005448797090784],\n    [0.030754441867095, 0.005543176475946],\n    [0.030737290905077, 0.005637503686619],\n    [0.030719850631972, 0.005731777834961],\n    [0.030702121211932, 0.005825998033626],\n    [0.030684102811835, 0.005920163395780],\n    [0.030665795601276, 0.006014273035101],\n    [0.030647199752570, 0.006108326065793],\n    [0.030628315440748, 0.006202321602594],\n    [0.030609142843557, 0.006296258760782],\n    [0.030589682141455, 0.006390136656185],\n    [0.030569933517616, 0.006483954405188],\n    [0.030549897157919, 0.006577711124743],\n    [0.030529573250956, 0.006671405932375],\n    [0.030508961988022, 0.006765037946194],\n    [0.030488063563118, 0.006858606284900],\n    [0.030466878172949, 0.006952110067791],\n    [0.030445406016919, 0.007045548414774],\n    [0.030423647297133, 0.007138920446372],\n    [0.030401602218392, 0.007232225283733],\n    [0.030379270988192, 0.007325462048634],\n    [0.030356653816724, 0.007418629863497],\n    [0.030333750916869, 0.007511727851390],\n    [0.030310562504198, 0.007604755136040],\n    [0.030287088796968, 0.007697710841838],\n    [0.030263330016124, 0.007790594093851],\n    [0.030239286385293, 0.007883404017824],\n    [0.030214958130781, 0.007976139740197],\n    [0.030190345481576, 0.008068800388104],\n    [0.030165448669342, 0.008161385089390],\n    [0.030140267928416, 0.008253892972610],\n    [0.030114803495809, 0.008346323167047],\n    [0.030089055611203, 0.008438674802711],\n    [0.030063024516947, 0.008530947010354],\n    [0.030036710458054, 0.008623138921475],\n    [0.030010113682202, 0.008715249668328],\n    [0.029983234439732, 0.008807278383932],\n    [0.029956072983640, 0.008899224202078],\n    [0.029928629569580, 0.008991086257336],\n    [0.029900904455860, 0.009082863685067],\n    [0.029872897903441, 0.009174555621425],\n    [0.029844610175929, 0.009266161203371],\n    [0.029816041539579, 0.009357679568679],\n    [0.029787192263292, 0.009449109855944],\n    [0.029758062618606, 0.009540451204587],\n    [0.029728652879702, 0.009631702754871],\n    [0.029698963323395, 0.009722863647900],\n    [0.029668994229134, 0.009813933025633],\n    [0.029638745879000, 0.009904910030891],\n    [0.029608218557702, 0.009995793807363],\n    [0.029577412552575, 0.010086583499618],\n    [0.029546328153577, 0.010177278253107],\n    [0.029514965653285, 0.010267877214177],\n    [0.029483325346896, 0.010358379530076],\n    [0.029451407532220, 0.010448784348962],\n    [0.029419212509679, 0.010539090819911],\n    [0.029386740582307, 0.010629298092923],\n    [0.029353992055740, 0.010719405318933],\n    [0.029320967238220, 0.010809411649818],\n    [0.029287666440590, 0.010899316238403],\n    [0.029254089976290, 0.010989118238474],\n    [0.029220238161353, 0.011078816804778],\n    [0.029186111314406, 0.011168411093039],\n    [0.029151709756664, 0.011257900259961],\n    [0.029117033811927, 0.011347283463239],\n    [0.029082083806579, 0.011436559861563],\n    [0.029046860069582, 0.011525728614630],\n    [0.029011362932476, 0.011614788883150],\n    [0.028975592729373, 0.011703739828853],\n    [0.028939549796957, 0.011792580614500],\n    [0.028903234474475, 0.011881310403886],\n    [0.028866647103744, 0.011969928361855],\n    [0.028829788029135, 0.012058433654299],\n    [0.028792657597583, 0.012146825448172],\n    [0.028755256158571, 0.012235102911499],\n    [0.028717584064137, 0.012323265213377],\n    [0.028679641668864, 0.012411311523990],\n    [0.028641429329882, 0.012499241014612],\n    [0.028602947406859, 0.012587052857618],\n    [0.028564196262001, 0.012674746226488],\n    [0.028525176260050, 0.012762320295819],\n    [0.028485887768276, 0.012849774241331],\n    [0.028446331156478, 0.012937107239875],\n    [0.028406506796976, 0.013024318469437],\n    [0.028366415064615, 0.013111407109155],\n    [0.028326056336751, 0.013198372339315],\n    [0.028285430993258, 0.013285213341368],\n    [0.028244539416515, 0.013371929297933],\n    [0.028203381991411, 0.013458519392807],\n    [0.028161959105334, 0.013544982810971],\n    [0.028120271148172, 0.013631318738598],\n    [0.028078318512309, 0.013717526363062],\n    [0.028036101592619, 0.013803604872943],\n    [0.027993620786463, 0.013889553458039],\n    [0.027950876493687, 0.013975371309367],\n    [0.027907869116616, 0.014061057619178],\n    [0.027864599060052, 0.014146611580959],\n    [0.027821066731270, 0.014232032389445],\n    [0.027777272540012, 0.014317319240622],\n    [0.027733216898487, 0.014402471331737],\n    [0.027688900221361, 0.014487487861307],\n    [0.027644322925762, 0.014572368029123],\n    [0.027599485431266, 0.014657111036262],\n    [0.027554388159903, 0.014741716085090],\n    [0.027509031536144, 0.014826182379271],\n    [0.027463415986904, 0.014910509123778],\n    [0.027417541941533, 0.014994695524894],\n    [0.027371409831816, 0.015078740790225],\n    [0.027325020091965, 0.015162644128704],\n    [0.027278373158618, 0.015246404750603],\n    [0.027231469470833, 0.015330021867534],\n    [0.027184309470088, 0.015413494692460],\n    [0.027136893600268, 0.015496822439704],\n    [0.027089222307671, 0.015580004324954],\n    [0.027041296040997, 0.015663039565269],\n    [0.026993115251345, 0.015745927379091],\n    [0.026944680392213, 0.015828666986247],\n    [0.026895991919487, 0.015911257607961],\n    [0.026847050291442, 0.015993698466859],\n    [0.026797855968734, 0.016075988786976],\n    [0.026748409414401, 0.016158127793763],\n    [0.026698711093851, 0.016240114714099],\n    [0.026648761474864, 0.016321948776289],\n    [0.026598561027585, 0.016403629210082],\n    [0.026548110224519, 0.016485155246669],\n    [0.026497409540530, 0.016566526118696],\n    [0.026446459452830, 0.016647741060271],\n    [0.026395260440982, 0.016728799306966],\n    [0.026343812986890, 0.016809700095831],\n    [0.026292117574797, 0.016890442665397],\n    [0.026240174691280, 0.016971026255683],\n    [0.026187984825246, 0.017051450108208],\n    [0.026135548467924, 0.017131713465990],\n    [0.026082866112867, 0.017211815573560],\n    [0.026029938255941, 0.017291755676967],\n    [0.025976765395322, 0.017371533023784],\n    [0.025923348031494, 0.017451146863116],\n    [0.025869686667242, 0.017530596445607],\n    [0.025815781807646, 0.017609881023449],\n    [0.025761633960080, 0.017688999850383],\n    [0.025707243634204, 0.017767952181715],\n    [0.025652611341960, 0.017846737274313],\n    [0.025597737597568, 0.017925354386623],\n    [0.025542622917522, 0.018003802778671],\n    [0.025487267820581, 0.018082081712071],\n    [0.025431672827768, 0.018160190450031],\n    [0.025375838462365, 0.018238128257362],\n    [0.025319765249906, 0.018315894400484],\n    [0.025263453718173, 0.018393488147432],\n    [0.025206904397193, 0.018470908767865],\n    [0.025150117819228, 0.018548155533070],\n    [0.025093094518776, 0.018625227715971],\n    [0.025035835032562, 0.018702124591135],\n    [0.024978339899534, 0.018778845434780],\n    [0.024920609660858, 0.018855389524780],\n    [0.024862644859912, 0.018931756140672],\n    [0.024804446042284, 0.019007944563666],\n    [0.024746013755764, 0.019083954076646],\n    [0.024687348550337, 0.019159783964183],\n    [0.024628450978184, 0.019235433512536],\n    [0.024569321593670, 0.019310902009663],\n    [0.024509960953345, 0.019386188745225],\n    [0.024450369615932, 0.019461293010596],\n    [0.024390548142329, 0.019536214098866],\n    [0.024330497095598, 0.019610951304848],\n    [0.024270217040961, 0.019685503925087],\n    [0.024209708545799, 0.019759871257867],\n    [0.024148972179639, 0.019834052603212],\n    [0.024088008514157, 0.019908047262901],\n    [0.024026818123164, 0.019981854540467],\n    [0.023965401582609, 0.020055473741208],\n    [0.023903759470567, 0.020128904172192],\n    [0.023841892367236, 0.020202145142264],\n    [0.023779800854935, 0.020275195962052],\n    [0.023717485518092, 0.020348055943974],\n    [0.023654946943242, 0.020420724402244],\n    [0.023592185719023, 0.020493200652878],\n    [0.023529202436167, 0.020565484013703],\n    [0.023465997687496, 0.020637573804361],\n    [0.023402572067918, 0.020709469346314],\n    [0.023338926174419, 0.020781169962854],\n    [0.023275060606058, 0.020852674979108],\n    [0.023210975963963, 0.020923983722044],\n    [0.023146672851322, 0.020995095520475],\n    [0.023082151873380, 0.021066009705072],\n    [0.023017413637435, 0.021136725608363],\n    [0.022952458752826, 0.021207242564742],\n    [0.022887287830934, 0.021277559910478],\n    [0.022821901485173, 0.021347676983716],\n    [0.022756300330983, 0.021417593124488],\n    [0.022690484985827, 0.021487307674717],\n    [0.022624456069185, 0.021556819978223],\n    [0.022558214202547, 0.021626129380729],\n    [0.022491760009405, 0.021695235229869],\n    [0.022425094115252, 0.021764136875192],\n    [0.022358217147572, 0.021832833668171],\n    [0.022291129735838, 0.021901324962204],\n    [0.022223832511501, 0.021969610112625],\n    [0.022156326107988, 0.022037688476709],\n    [0.022088611160696, 0.022105559413676],\n    [0.022020688306983, 0.022173222284699],\n    [0.021952558186166, 0.022240676452909],\n    [0.021884221439510, 0.022307921283403],\n    [0.021815678710228, 0.022374956143245],\n    [0.021746930643469, 0.022441780401478],\n    [0.021677977886316, 0.022508393429127],\n    [0.021608821087780, 0.022574794599206],\n    [0.021539460898790, 0.022640983286719],\n    [0.021469897972190, 0.022706958868676],\n    [0.021400132962735, 0.022772720724087],\n    [0.021330166527077, 0.022838268233979],\n    [0.021259999323769, 0.022903600781391],\n    [0.021189632013250, 0.022968717751391],\n    [0.021119065257845, 0.023033618531071],\n    [0.021048299721754, 0.023098302509561],\n    [0.020977336071050, 0.023162769078031],\n    [0.020906174973670, 0.023227017629698],\n    [0.020834817099409, 0.023291047559828],\n    [0.020763263119915, 0.023354858265748],\n    [0.020691513708680, 0.023418449146848],\n    [0.020619569541038, 0.023481819604585],\n    [0.020547431294155, 0.023544969042494],\n    [0.020475099647023, 0.023607896866186],\n    [0.020402575280455, 0.023670602483363],\n    [0.020329858877078, 0.023733085303813],\n    [0.020256951121327, 0.023795344739427],\n    [0.020183852699437, 0.023857380204193],\n    [0.020110564299439, 0.023919191114211],\n    [0.020037086611150, 0.023980776887692],\n    [0.019963420326171, 0.024042136944968],\n    [0.019889566137877, 0.024103270708495],\n    [0.019815524741412, 0.024164177602859],\n    [0.019741296833681, 0.024224857054779],\n    [0.019666883113346, 0.024285308493120],\n    [0.019592284280817, 0.024345531348888],\n    [0.019517501038246, 0.024405525055242],\n    [0.019442534089523, 0.024465289047500],\n    [0.019367384140264, 0.024524822763141],\n    [0.019292051897809, 0.024584125641809],\n    [0.019216538071215, 0.024643197125323],\n    [0.019140843371246, 0.024702036657681],\n    [0.019064968510369, 0.024760643685063],\n    [0.018988914202748, 0.024819017655836],\n    [0.018912681164234, 0.024877158020562],\n    [0.018836270112363, 0.024935064232003],\n    [0.018759681766343, 0.024992735745123],\n    [0.018682916847054, 0.025050172017095],\n    [0.018605976077037, 0.025107372507308],\n    [0.018528860180486, 0.025164336677369],\n    [0.018451569883247, 0.025221063991110],\n    [0.018374105912805, 0.025277553914591],\n    [0.018296468998280, 0.025333805916107],\n    [0.018218659870421, 0.025389819466194],\n    [0.018140679261596, 0.025445594037630],\n    [0.018062527905790, 0.025501129105445],\n    [0.017984206538592, 0.025556424146920],\n    [0.017905715897192, 0.025611478641598],\n    [0.017827056720375, 0.025666292071285],\n    [0.017748229748511, 0.025720863920056],\n    [0.017669235723550, 0.025775193674260],\n    [0.017590075389012, 0.025829280822525],\n    [0.017510749489986, 0.025883124855762],\n    [0.017431258773116, 0.025936725267170],\n    [0.017351603986600, 0.025990081552242],\n    [0.017271785880180, 0.026043193208768],\n    [0.017191805205132, 0.026096059736841],\n    [0.017111662714267, 0.026148680638861],\n    [0.017031359161915, 0.026201055419541],\n    [0.016950895303924, 0.026253183585908],\n    [0.016870271897651, 0.026305064647313],\n    [0.016789489701954, 0.026356698115431],\n    [0.016708549477186, 0.026408083504269],\n    [0.016627451985187, 0.026459220330167],\n    [0.016546197989277, 0.026510108111806],\n    [0.016464788254250, 0.026560746370212],\n    [0.016383223546365, 0.026611134628757],\n    [0.016301504633341, 0.026661272413168],\n    [0.016219632284346, 0.026711159251530],\n    [0.016137607269996, 0.026760794674288],\n    [0.016055430362340, 0.026810178214254],\n    [0.015973102334858, 0.026859309406613],\n    [0.015890623962454, 0.026908187788922],\n    [0.015807996021446, 0.026956812901119],\n    [0.015725219289558, 0.027005184285527],\n    [0.015642294545918, 0.027053301486856],\n    [0.015559222571044, 0.027101164052208],\n    [0.015476004146842, 0.027148771531083],\n    [0.015392640056594, 0.027196123475380],\n    [0.015309131084956, 0.027243219439406],\n    [0.015225478017946, 0.027290058979875],\n    [0.015141681642938, 0.027336641655915],\n    [0.015057742748656, 0.027382967029073],\n    [0.014973662125164, 0.027429034663317],\n    [0.014889440563862, 0.027474844125040],\n    [0.014805078857474, 0.027520394983066],\n    [0.014720577800046, 0.027565686808654],\n    [0.014635938186934, 0.027610719175499],\n    [0.014551160814797, 0.027655491659740],\n    [0.014466246481592, 0.027700003839960],\n    [0.014381195986567, 0.027744255297195],\n    [0.014296010130247, 0.027788245614933],\n    [0.014210689714436, 0.027831974379120],\n    [0.014125235542201, 0.027875441178165],\n    [0.014039648417870, 0.027918645602941],\n    [0.013953929147020, 0.027961587246792],\n    [0.013868078536476, 0.028004265705534],\n    [0.013782097394294, 0.028046680577462],\n    [0.013695986529763, 0.028088831463351],\n    [0.013609746753390, 0.028130717966461],\n    [0.013523378876898, 0.028172339692540],\n    [0.013436883713214, 0.028213696249828],\n    [0.013350262076462, 0.028254787249062],\n    [0.013263514781960, 0.028295612303478],\n    [0.013176642646205, 0.028336171028814],\n    [0.013089646486871, 0.028376463043317],\n    [0.013002527122799, 0.028416487967743],\n    [0.012915285373990, 0.028456245425361],\n    [0.012827922061597, 0.028495735041960],\n    [0.012740438007915, 0.028534956445849],\n    [0.012652834036379, 0.028573909267859],\n    [0.012565110971550, 0.028612593141354],\n    [0.012477269639111, 0.028651007702224],\n    [0.012389310865858, 0.028689152588899],\n    [0.012301235479693, 0.028727027442343],\n    [0.012213044309615, 0.028764631906065],\n    [0.012124738185712, 0.028801965626115],\n    [0.012036317939156, 0.028839028251097],\n    [0.011947784402191, 0.028875819432161],\n    [0.011859138408130, 0.028912338823015],\n    [0.011770380791341, 0.028948586079925],\n    [0.011681512387245, 0.028984560861718],\n    [0.011592534032306, 0.029020262829785],\n    [0.011503446564022, 0.029055691648087],\n    [0.011414250820918, 0.029090846983152],\n    [0.011324947642537, 0.029125728504087],\n    [0.011235537869437, 0.029160335882573],\n    [0.011146022343175, 0.029194668792871],\n    [0.011056401906305, 0.029228726911828],\n    [0.010966677402371, 0.029262509918876],\n    [0.010876849675891, 0.029296017496036],\n    [0.010786919572361, 0.029329249327922],\n    [0.010696887938235, 0.029362205101743],\n    [0.010606755620926, 0.029394884507308],\n    [0.010516523468793, 0.029427287237024],\n    [0.010426192331137, 0.029459412985906],\n    [0.010335763058187, 0.029491261451573],\n    [0.010245236501099, 0.029522832334255],\n    [0.010154613511943, 0.029554125336796],\n    [0.010063894943698, 0.029585140164654],\n    [0.009973081650240, 0.029615876525905],\n    [0.009882174486340, 0.029646334131247],\n    [0.009791174307650, 0.029676512694001],\n    [0.009700081970699, 0.029706411930116],\n    [0.009608898332881, 0.029736031558168],\n    [0.009517624252453, 0.029765371299366],\n    [0.009426260588521, 0.029794430877553],\n    [0.009334808201034, 0.029823210019210],\n    [0.009243267950778, 0.029851708453456],\n    [0.009151640699363, 0.029879925912053],\n    [0.009059927309220, 0.029907862129408],\n    [0.008968128643591, 0.029935516842573],\n    [0.008876245566520, 0.029962889791254],\n    [0.008784278942845, 0.029989980717805],\n    [0.008692229638191, 0.030016789367235],\n    [0.008600098518961, 0.030043315487212],\n    [0.008507886452329, 0.030069558828062],\n    [0.008415594306230, 0.030095519142772],\n    [0.008323222949351, 0.030121196186994],\n    [0.008230773251129, 0.030146589719046],\n    [0.008138246081733, 0.030171699499915],\n    [0.008045642312067, 0.030196525293257],\n    [0.007952962813750, 0.030221066865402],\n    [0.007860208459119, 0.030245323985357],\n    [0.007767380121212, 0.030269296424803],\n    [0.007674478673766, 0.030292983958103],\n    [0.007581504991203, 0.030316386362302],\n    [0.007488459948628, 0.030339503417126],\n    [0.007395344421816, 0.030362334904989],\n    [0.007302159287206, 0.030384880610993],\n    [0.007208905421891, 0.030407140322928],\n    [0.007115583703613, 0.030429113831278],\n    [0.007022195010752, 0.030450800929220],\n    [0.006928740222316, 0.030472201412626],\n    [0.006835220217939, 0.030493315080068],\n    [0.006741635877866, 0.030514141732814],\n    [0.006647988082948, 0.030534681174838],\n    [0.006554277714635, 0.030554933212813],\n    [0.006460505654964, 0.030574897656119],\n    [0.006366672786553, 0.030594574316845],\n    [0.006272779992593, 0.030613963009786],\n    [0.006178828156839, 0.030633063552447],\n    [0.006084818163601, 0.030651875765048],\n    [0.005990750897737, 0.030670399470520],\n    [0.005896627244644, 0.030688634494512],\n    [0.005802448090250, 0.030706580665388],\n    [0.005708214321004, 0.030724237814232],\n    [0.005613926823871, 0.030741605774849],\n    [0.005519586486321, 0.030758684383764],\n    [0.005425194196321, 0.030775473480228],\n    [0.005330750842327, 0.030791972906214],\n    [0.005236257313276, 0.030808182506425],\n    [0.005141714498576, 0.030824102128288],\n    [0.005047123288102, 0.030839731621963],\n    [0.004952484572181, 0.030855070840339],\n    [0.004857799241589, 0.030870119639036],\n    [0.004763068187541, 0.030884877876411],\n    [0.004668292301681, 0.030899345413553],\n    [0.004573472476075, 0.030913522114288],\n    [0.004478609603205, 0.030927407845180],\n    [0.004383704575956, 0.030941002475530],\n    [0.004288758287610, 0.030954305877381],\n    [0.004193771631837, 0.030967317925516],\n    [0.004098745502689, 0.030980038497461],\n    [0.004003680794587, 0.030992467473486],\n    [0.003908578402316, 0.031004604736602],\n    [0.003813439221017, 0.031016450172571],\n    [0.003718264146176, 0.031028003669899],\n    [0.003623054073616, 0.031039265119839],\n    [0.003527809899492, 0.031050234416394],\n    [0.003432532520278, 0.031060911456318],\n    [0.003337222832760, 0.031071296139114],\n    [0.003241881734029, 0.031081388367037],\n    [0.003146510121474, 0.031091188045095],\n    [0.003051108892766, 0.031100695081051],\n    [0.002955678945860, 0.031109909385419],\n    [0.002860221178978, 0.031118830871473],\n    [0.002764736490604, 0.031127459455239],\n    [0.002669225779478, 0.031135795055501],\n    [0.002573689944583, 0.031143837593803],\n    [0.002478129885137, 0.031151586994444],\n    [0.002382546500589, 0.031159043184484],\n    [0.002286940690606, 0.031166206093743],\n    [0.002191313355067, 0.031173075654800],\n    [0.002095665394051, 0.031179651802998],\n    [0.001999997707835, 0.031185934476438],\n    [0.001904311196878, 0.031191923615985],\n    [0.001808606761820, 0.031197619165268],\n    [0.001712885303465, 0.031203021070678],\n    [0.001617147722782, 0.031208129281370],\n    [0.001521394920889, 0.031212943749264],\n    [0.001425627799047, 0.031217464429043],\n    [0.001329847258653, 0.031221691278159],\n    [0.001234054201231, 0.031225624256825],\n    [0.001138249528420, 0.031229263328024],\n    [0.001042434141971, 0.031232608457502],\n    [0.000946608943736, 0.031235659613775],\n    [0.000850774835656, 0.031238416768124],\n    [0.000754932719759, 0.031240879894597],\n    [0.000659083498149, 0.031243048970010],\n    [0.000563228072993, 0.031244923973948],\n    [0.000467367346520, 0.031246504888762],\n    [0.000371502221008, 0.031247791699571],\n    [0.000275633598775, 0.031248784394264],\n    [0.000179762382174, 0.031249482963498],\n    [0.000083889473581, 0.031249887400697]\n];\n\nconst MDCT_TABLE_256 = [\n    [0.088387931675923, 0.000271171628935],\n    [0.088354655998507, 0.002440238387037],\n    [0.088268158780110, 0.004607835236780],\n    [0.088128492123423, 0.006772656498875],\n    [0.087935740158418, 0.008933398165942],\n    [0.087690018991670, 0.011088758687994],\n    [0.087391476636423, 0.013237439756448],\n    [0.087040292923427, 0.015378147086172],\n    [0.086636679392621, 0.017509591195118],\n    [0.086180879165703, 0.019630488181053],\n    [0.085673166799686, 0.021739560494940],\n    [0.085113848121515, 0.023835537710479],\n    [0.084503260043847, 0.025917157289369],\n    [0.083841770362110, 0.027983165341813],\n    [0.083129777532952, 0.030032317381813],\n    [0.082367710434230, 0.032063379076803],\n    [0.081556028106671, 0.034075126991164],\n    [0.080695219477356, 0.036066349323177],\n    [0.079785803065216, 0.038035846634965],\n    [0.078828326668693, 0.039982432574992],\n    [0.077823367035766, 0.041904934592675],\n    [0.076771529516540, 0.043802194644686],\n    [0.075673447698606, 0.045673069892513],\n    [0.074529783025390, 0.047516433390863],\n    [0.073341224397728, 0.049331174766491],\n    [0.072108487758894, 0.051116200887052],\n    [0.070832315663343, 0.052870436519557],\n    [0.069513476829429, 0.054592824978055],\n    [0.068152765676348, 0.056282328760143],\n    [0.066751001845620, 0.057937930171918],\n    [0.065309029707361, 0.059558631940996],\n    [0.063827717851668, 0.061143457817234],\n    [0.062307958565413, 0.062691453160784],\n    [0.060750667294763, 0.064201685517134],\n    [0.059156782093749, 0.065673245178784],\n    [0.057527263059216, 0.067105245733220],\n    [0.055863091752499, 0.068496824596852],\n    [0.054165270608165, 0.069847143534609],\n    [0.052434822330188, 0.071155389164853],\n    [0.050672789275903, 0.072420773449336],\n    [0.048880232828135, 0.073642534167879],\n    [0.047058232755862, 0.074819935377512],\n    [0.045207886563797, 0.075952267855771],\n    [0.043330308831298, 0.077038849527912],\n    [0.041426630540984, 0.078079025877766],\n    [0.039497998397473, 0.079072170341994],\n    [0.037545574136653, 0.080017684687506],\n    [0.035570533825892, 0.080914999371817],\n    [0.033574067155622, 0.081763573886112],\n    [0.031557376722714, 0.082562897080836],\n    [0.029521677306074, 0.083312487473584],\n    [0.027468195134911, 0.084011893539132],\n    [0.025398167150101, 0.084660693981419],\n    [0.023312840259098, 0.085258497987320],\n    [0.021213470584847, 0.085804945462053],\n    [0.019101322709138, 0.086299707246093],\n    [0.016977668910873, 0.086742485313442],\n    [0.014843788399692, 0.087133012951149],\n    [0.012700966545425, 0.087471054919968],\n    [0.010550494103830, 0.087756407596056],\n    [0.008393666439096, 0.087988899093631],\n    [0.006231782743558, 0.088168389368510],\n    [0.004066145255116, 0.088294770302461],\n    [0.001898058472816, 0.088367965768336]\n];                                      \n\nconst MDCT_TABLE_1920 = [             \n    [0.032274858518097, 0.000013202404176],\n    [0.032274642494505, 0.000118821372483],\n    [0.032274080835421, 0.000224439068308],\n    [0.032273173546860, 0.000330054360572],\n    [0.032271920638538, 0.000435666118218],\n    [0.032270322123873, 0.000541273210231],\n    [0.032268378019984, 0.000646874505642],\n    [0.032266088347691, 0.000752468873546],\n    [0.032263453131514, 0.000858055183114],\n    [0.032260472399674, 0.000963632303600],\n    [0.032257146184092, 0.001069199104358],\n    [0.032253474520390, 0.001174754454853],\n    [0.032249457447888, 0.001280297224671],\n    [0.032245095009606, 0.001385826283535],\n    [0.032240387252262, 0.001491340501313],\n    [0.032235334226272, 0.001596838748031],\n    [0.032229935985750, 0.001702319893890],\n    [0.032224192588507, 0.001807782809271],\n    [0.032218104096050, 0.001913226364749],\n    [0.032211670573582, 0.002018649431111],\n    [0.032204892090000, 0.002124050879359],\n    [0.032197768717898, 0.002229429580728],\n    [0.032190300533560, 0.002334784406698],\n    [0.032182487616965, 0.002440114229003],\n    [0.032174330051782, 0.002545417919644],\n    [0.032165827925374, 0.002650694350905],\n    [0.032156981328790, 0.002755942395358],\n    [0.032147790356771, 0.002861160925883],\n    [0.032138255107744, 0.002966348815672],\n    [0.032128375683825, 0.003071504938250],\n    [0.032118152190814, 0.003176628167476],\n    [0.032107584738196, 0.003281717377568],\n    [0.032096673439141, 0.003386771443102],\n    [0.032085418410500, 0.003491789239036],\n    [0.032073819772804, 0.003596769640711],\n    [0.032061877650267, 0.003701711523874],\n    [0.032049592170778, 0.003806613764680],\n    [0.032036963465906, 0.003911475239711],\n    [0.032023991670893, 0.004016294825985],\n    [0.032010676924657, 0.004121071400967],\n    [0.031997019369789, 0.004225803842586],\n    [0.031983019152549, 0.004330491029241],\n    [0.031968676422869, 0.004435131839816],\n    [0.031953991334348, 0.004539725153692],\n    [0.031938964044252, 0.004644269850758],\n    [0.031923594713510, 0.004748764811426],\n    [0.031907883506716, 0.004853208916638],\n    [0.031891830592124, 0.004957601047881],\n    [0.031875436141648, 0.005061940087200],\n    [0.031858700330859, 0.005166224917208],\n    [0.031841623338985, 0.005270454421097],\n    [0.031824205348907, 0.005374627482653],\n    [0.031806446547156, 0.005478742986267],\n    [0.031788347123916, 0.005582799816945],\n    [0.031769907273017, 0.005686796860323],\n    [0.031751127191935, 0.005790733002674],\n    [0.031732007081789, 0.005894607130928],\n    [0.031712547147340, 0.005998418132675],\n    [0.031692747596989, 0.006102164896182],\n    [0.031672608642773, 0.006205846310406],\n    [0.031652130500364, 0.006309461265002],\n    [0.031631313389067, 0.006413008650337],\n    [0.031610157531816, 0.006516487357501],\n    [0.031588663155172, 0.006619896278321],\n    [0.031566830489325, 0.006723234305370],\n    [0.031544659768083, 0.006826500331981],\n    [0.031522151228878, 0.006929693252258],\n    [0.031499305112758, 0.007032811961088],\n    [0.031476121664387, 0.007135855354151],\n    [0.031452601132040, 0.007238822327937],\n    [0.031428743767604, 0.007341711779751],\n    [0.031404549826572, 0.007444522607730],\n    [0.031380019568042, 0.007547253710853],\n    [0.031355153254712, 0.007649903988952],\n    [0.031329951152882, 0.007752472342725],\n    [0.031304413532445, 0.007854957673748],\n    [0.031278540666888, 0.007957358884484],\n    [0.031252332833290, 0.008059674878300],\n    [0.031225790312316, 0.008161904559473],\n    [0.031198913388214, 0.008264046833205],\n    [0.031171702348814, 0.008366100605636],\n    [0.031144157485525, 0.008468064783849],\n    [0.031116279093331, 0.008569938275893],\n    [0.031088067470786, 0.008671719990782],\n    [0.031059522920014, 0.008773408838517],\n    [0.031030645746705, 0.008875003730092],\n    [0.031001436260110, 0.008976503577507],\n    [0.030971894773039, 0.009077907293780],\n    [0.030942021601857, 0.009179213792959],\n    [0.030911817066483, 0.009280421990133],\n    [0.030881281490382, 0.009381530801444],\n    [0.030850415200566, 0.009482539144097],\n    [0.030819218527589, 0.009583445936373],\n    [0.030787691805541, 0.009684250097643],\n    [0.030755835372048, 0.009784950548375],\n    [0.030723649568268, 0.009885546210147],\n    [0.030691134738883, 0.009986036005661],\n    [0.030658291232103, 0.010086418858753],\n    [0.030625119399655, 0.010186693694402],\n    [0.030591619596781, 0.010286859438745],\n    [0.030557792182239, 0.010386915019088],\n    [0.030523637518292, 0.010486859363916],\n    [0.030489155970710, 0.010586691402906],\n    [0.030454347908763, 0.010686410066936],\n    [0.030419213705216, 0.010786014288099],\n    [0.030383753736329, 0.010885502999714],\n    [0.030347968381849, 0.010984875136338],\n    [0.030311858025010, 0.011084129633775],\n    [0.030275423052523, 0.011183265429088],\n    [0.030238663854579, 0.011282281460612],\n    [0.030201580824838, 0.011381176667967],\n    [0.030164174360430, 0.011479949992062],\n    [0.030126444861948, 0.011578600375117],\n    [0.030088392733446, 0.011677126760663],\n    [0.030050018382430, 0.011775528093563],\n    [0.030011322219859, 0.011873803320018],\n    [0.029972304660138, 0.011971951387578],\n    [0.029932966121114, 0.012069971245157],\n    [0.029893307024070, 0.012167861843041],\n    [0.029853327793724, 0.012265622132901],\n    [0.029813028858222, 0.012363251067801],\n    [0.029772410649132, 0.012460747602215],\n    [0.029731473601443, 0.012558110692033],\n    [0.029690218153558, 0.012655339294575],\n    [0.029648644747289, 0.012752432368600],\n    [0.029606753827855, 0.012849388874320],\n    [0.029564545843872, 0.012946207773407],\n    [0.029522021247356, 0.013042888029011],\n    [0.029479180493710, 0.013139428605762],\n    [0.029436024041725, 0.013235828469789],\n    [0.029392552353570, 0.013332086588727],\n    [0.029348765894794, 0.013428201931728],\n    [0.029304665134313, 0.013524173469475],\n    [0.029260250544412, 0.013620000174189],\n    [0.029215522600735, 0.013715681019643],\n    [0.029170481782283, 0.013811214981173],\n    [0.029125128571406, 0.013906601035686],\n    [0.029079463453801, 0.014001838161674],\n    [0.029033486918505, 0.014096925339225],\n    [0.028987199457889, 0.014191861550031],\n    [0.028940601567655, 0.014286645777401],\n    [0.028893693746829, 0.014381277006273],\n    [0.028846476497755, 0.014475754223221],\n    [0.028798950326094, 0.014570076416472],\n    [0.028751115740811, 0.014664242575910],\n    [0.028702973254178, 0.014758251693091],\n    [0.028654523381760, 0.014852102761253],\n    [0.028605766642418, 0.014945794775326],\n    [0.028556703558297, 0.015039326731945],\n    [0.028507334654823, 0.015132697629457],\n    [0.028457660460698, 0.015225906467935],\n    [0.028407681507891, 0.015318952249187],\n    [0.028357398331639, 0.015411833976768],\n    [0.028306811470432, 0.015504550655988],\n    [0.028255921466016, 0.015597101293927],\n    [0.028204728863381, 0.015689484899442],\n    [0.028153234210760, 0.015781700483179],\n    [0.028101438059619, 0.015873747057582],\n    [0.028049340964652, 0.015965623636907],\n    [0.027996943483779, 0.016057329237229],\n    [0.027944246178133, 0.016148862876456],\n    [0.027891249612061, 0.016240223574335],\n    [0.027837954353113, 0.016331410352467],\n    [0.027784360972039, 0.016422422234315],\n    [0.027730470042780, 0.016513258245214],\n    [0.027676282142466, 0.016603917412384],\n    [0.027621797851405, 0.016694398764938],\n    [0.027567017753080, 0.016784701333894],\n    [0.027511942434143, 0.016874824152183],\n    [0.027456572484404, 0.016964766254662],\n    [0.027400908496833, 0.017054526678124],\n    [0.027344951067546, 0.017144104461307],\n    [0.027288700795801, 0.017233498644904],\n    [0.027232158283994, 0.017322708271577],\n    [0.027175324137651, 0.017411732385960],\n    [0.027118198965418, 0.017500570034678],\n    [0.027060783379060, 0.017589220266351],\n    [0.027003077993454, 0.017677682131607],\n    [0.026945083426576, 0.017765954683088],\n    [0.026886800299502, 0.017854036975468],\n    [0.026828229236397, 0.017941928065456],\n    [0.026769370864511, 0.018029627011808],\n    [0.026710225814170, 0.018117132875340],\n    [0.026650794718768, 0.018204444718934],\n    [0.026591078214767, 0.018291561607551],\n    [0.026531076941680, 0.018378482608238],\n    [0.026470791542075, 0.018465206790142],\n    [0.026410222661558, 0.018551733224515],\n    [0.026349370948775, 0.018638060984730],\n    [0.026288237055398, 0.018724189146286],\n    [0.026226821636121, 0.018810116786819],\n    [0.026165125348656, 0.018895842986112],\n    [0.026103148853718, 0.018981366826109],\n    [0.026040892815028, 0.019066687390916],\n    [0.025978357899296, 0.019151803766819],\n    [0.025915544776223, 0.019236715042290],\n    [0.025852454118485, 0.019321420307998],\n    [0.025789086601733, 0.019405918656817],\n    [0.025725442904582, 0.019490209183837],\n    [0.025661523708606, 0.019574290986376],\n    [0.025597329698327, 0.019658163163984],\n    [0.025532861561211, 0.019741824818458],\n    [0.025468119987662, 0.019825275053848],\n    [0.025403105671008, 0.019908512976470],\n    [0.025337819307501, 0.019991537694913],\n    [0.025272261596305, 0.020074348320047],\n    [0.025206433239491, 0.020156943965039],\n    [0.025140334942028, 0.020239323745355],\n    [0.025073967411776, 0.020321486778774],\n    [0.025007331359476, 0.020403432185395],\n    [0.024940427498748, 0.020485159087650],\n    [0.024873256546079, 0.020566666610309],\n    [0.024805819220816, 0.020647953880491],\n    [0.024738116245157, 0.020729020027676],\n    [0.024670148344147, 0.020809864183709],\n    [0.024601916245669, 0.020890485482816],\n    [0.024533420680433, 0.020970883061607],\n    [0.024464662381971, 0.021051056059087],\n    [0.024395642086630, 0.021131003616670],\n    [0.024326360533561, 0.021210724878181],\n    [0.024256818464715, 0.021290218989868],\n    [0.024187016624830, 0.021369485100415],\n    [0.024116955761430, 0.021448522360944],\n    [0.024046636624808, 0.021527329925030],\n    [0.023976059968027, 0.021605906948708],\n    [0.023905226546906, 0.021684252590480],\n    [0.023834137120014, 0.021762366011328],\n    [0.023762792448662, 0.021840246374720],\n    [0.023691193296893, 0.021917892846620],\n    [0.023619340431478, 0.021995304595495],\n    [0.023547234621902, 0.022072480792330],\n    [0.023474876640361, 0.022149420610628],\n    [0.023402267261751, 0.022226123226426],\n    [0.023329407263659, 0.022302587818300],\n    [0.023256297426359, 0.022378813567377],\n    [0.023182938532797, 0.022454799657339],\n    [0.023109331368588, 0.022530545274437],\n    [0.023035476722006, 0.022606049607496],\n    [0.022961375383975, 0.022681311847926],\n    [0.022887028148061, 0.022756331189727],\n    [0.022812435810462, 0.022831106829504],\n    [0.022737599170003, 0.022905637966469],\n    [0.022662519028125, 0.022979923802453],\n    [0.022587196188874, 0.023053963541915],\n    [0.022511631458899, 0.023127756391950],\n    [0.022435825647437, 0.023201301562294],\n    [0.022359779566306, 0.023274598265338],\n    [0.022283494029900, 0.023347645716133],\n    [0.022206969855176, 0.023420443132400],\n    [0.022130207861645, 0.023492989734537],\n    [0.022053208871367, 0.023565284745628],\n    [0.021975973708940, 0.023637327391451],\n    [0.021898503201489, 0.023709116900488],\n    [0.021820798178663, 0.023780652503931],\n    [0.021742859472618, 0.023851933435691],\n    [0.021664687918017, 0.023922958932406],\n    [0.021586284352013, 0.023993728233451],\n    [0.021507649614247, 0.024064240580942],\n    [0.021428784546832, 0.024134495219750],\n    [0.021349689994350, 0.024204491397504],\n    [0.021270366803840, 0.024274228364600],\n    [0.021190815824791, 0.024343705374213],\n    [0.021111037909128, 0.024412921682298],\n    [0.021031033911210, 0.024481876547605],\n    [0.020950804687815, 0.024550569231683],\n    [0.020870351098134, 0.024618998998889],\n    [0.020789674003759, 0.024687165116394],\n    [0.020708774268678, 0.024755066854194],\n    [0.020627652759262, 0.024822703485116],\n    [0.020546310344257, 0.024890074284826],\n    [0.020464747894775, 0.024957178531837],\n    [0.020382966284284, 0.025024015507516],\n    [0.020300966388600, 0.025090584496093],\n    [0.020218749085876, 0.025156884784668],\n    [0.020136315256592, 0.025222915663218],\n    [0.020053665783549, 0.025288676424605],\n    [0.019970801551857, 0.025354166364584],\n    [0.019887723448925, 0.025419384781811],\n    [0.019804432364452, 0.025484330977848],\n    [0.019720929190419, 0.025549004257175],\n    [0.019637214821078, 0.025613403927192],\n    [0.019553290152943, 0.025677529298230],\n    [0.019469156084779, 0.025741379683559],\n    [0.019384813517595, 0.025804954399392],\n    [0.019300263354632, 0.025868252764895],\n    [0.019215506501354, 0.025931274102193],\n    [0.019130543865439, 0.025994017736379],\n    [0.019045376356769, 0.026056482995518],\n    [0.018960004887419, 0.026118669210657],\n    [0.018874430371648, 0.026180575715833],\n    [0.018788653725892, 0.026242201848076],\n    [0.018702675868750, 0.026303546947421],\n    [0.018616497720974, 0.026364610356909],\n    [0.018530120205464, 0.026425391422602],\n    [0.018443544247254, 0.026485889493583],\n    [0.018356770773502, 0.026546103921965],\n    [0.018269800713483, 0.026606034062902],\n    [0.018182634998576, 0.026665679274589],\n    [0.018095274562256, 0.026725038918274],\n    [0.018007720340083, 0.026784112358263],\n    [0.017919973269692, 0.026842898961926],\n    [0.017832034290785, 0.026901398099707],\n    [0.017743904345116, 0.026959609145127],\n    [0.017655584376488, 0.027017531474792],\n    [0.017567075330734, 0.027075164468401],\n    [0.017478378155718, 0.027132507508750],\n    [0.017389493801313, 0.027189559981742],\n    [0.017300423219401, 0.027246321276391],\n    [0.017211167363854, 0.027302790784828],\n    [0.017121727190533, 0.027358967902310],\n    [0.017032103657269, 0.027414852027226],\n    [0.016942297723858, 0.027470442561102],\n    [0.016852310352050, 0.027525738908608],\n    [0.016762142505537, 0.027580740477564],\n    [0.016671795149944, 0.027635446678948],\n    [0.016581269252819, 0.027689856926900],\n    [0.016490565783622, 0.027743970638730],\n    [0.016399685713714, 0.027797787234924],\n    [0.016308630016347, 0.027851306139149],\n    [0.016217399666655, 0.027904526778260],\n    [0.016125995641641, 0.027957448582309],\n    [0.016034418920170, 0.028010070984544],\n    [0.015942670482954, 0.028062393421421],\n    [0.015850751312545, 0.028114415332610],\n    [0.015758662393324, 0.028166136160998],\n    [0.015666404711489, 0.028217555352697],\n    [0.015573979255046, 0.028268672357047],\n    [0.015481387013797, 0.028319486626627],\n    [0.015388628979331, 0.028369997617257],\n    [0.015295706145012, 0.028420204788004],\n    [0.015202619505968, 0.028470107601191],\n    [0.015109370059084, 0.028519705522399],\n    [0.015015958802984, 0.028568998020472],\n    [0.014922386738030, 0.028617984567529],\n    [0.014828654866302, 0.028666664638963],\n    [0.014734764191593, 0.028715037713449],\n    [0.014640715719398, 0.028763103272951],\n    [0.014546510456900, 0.028810860802724],\n    [0.014452149412962, 0.028858309791325],\n    [0.014357633598114, 0.028905449730613],\n    [0.014262964024545, 0.028952280115756],\n    [0.014168141706090, 0.028998800445240],\n    [0.014073167658220, 0.029045010220868],\n    [0.013978042898030, 0.029090908947771],\n    [0.013882768444231, 0.029136496134411],\n    [0.013787345317136, 0.029181771292585],\n    [0.013691774538648, 0.029226733937433],\n    [0.013596057132255, 0.029271383587441],\n    [0.013500194123014, 0.029315719764447],\n    [0.013404186537539, 0.029359741993647],\n    [0.013308035403995, 0.029403449803598],\n    [0.013211741752084, 0.029446842726223],\n    [0.013115306613032, 0.029489920296820],\n    [0.013018731019584, 0.029532682054063],\n    [0.012922016005985, 0.029575127540008],\n    [0.012825162607977, 0.029617256300097],\n    [0.012728171862781, 0.029659067883165],\n    [0.012631044809089, 0.029700561841444],\n    [0.012533782487056, 0.029741737730567],\n    [0.012436385938281, 0.029782595109573],\n    [0.012338856205805, 0.029823133540913],\n    [0.012241194334091, 0.029863352590452],\n    [0.012143401369021, 0.029903251827477],\n    [0.012045478357878, 0.029942830824699],\n    [0.011947426349339, 0.029982089158259],\n    [0.011849246393462, 0.030021026407731],\n    [0.011750939541676, 0.030059642156129],\n    [0.011652506846768, 0.030097935989909],\n    [0.011553949362874, 0.030135907498976],\n    [0.011455268145464, 0.030173556276684],\n    [0.011356464251335, 0.030210881919845],\n    [0.011257538738598, 0.030247884028732],\n    [0.011158492666665, 0.030284562207083],\n    [0.011059327096240, 0.030320916062102],\n    [0.010960043089307, 0.030356945204470],\n    [0.010860641709118, 0.030392649248343],\n    [0.010761124020182, 0.030428027811361],\n    [0.010661491088253, 0.030463080514646],\n    [0.010561743980319, 0.030497806982812],\n    [0.010461883764593, 0.030532206843968],\n    [0.010361911510496, 0.030566279729717],\n    [0.010261828288652, 0.030600025275167],\n    [0.010161635170872, 0.030633443118931],\n    [0.010061333230142, 0.030666532903129],\n    [0.009960923540617, 0.030699294273397],\n    [0.009860407177603, 0.030731726878888],\n    [0.009759785217550, 0.030763830372273],\n    [0.009659058738038, 0.030795604409750],\n    [0.009558228817767, 0.030827048651045],\n    [0.009457296536545, 0.030858162759415],\n    [0.009356262975275, 0.030888946401653],\n    [0.009255129215945, 0.030919399248091],\n    [0.009153896341616, 0.030949520972603],\n    [0.009052565436412, 0.030979311252611],\n    [0.008951137585505, 0.031008769769084],\n    [0.008849613875105, 0.031037896206544],\n    [0.008747995392451, 0.031066690253072],\n    [0.008646283225794, 0.031095151600306],\n    [0.008544478464390, 0.031123279943448],\n    [0.008442582198486, 0.031151074981266],\n    [0.008340595519310, 0.031178536416098],\n    [0.008238519519057, 0.031205663953853],\n    [0.008136355290878, 0.031232457304017],\n    [0.008034103928871, 0.031258916179656],\n    [0.007931766528065, 0.031285040297416],\n    [0.007829344184412, 0.031310829377528],\n    [0.007726837994772, 0.031336283143813],\n    [0.007624249056906, 0.031361401323680],\n    [0.007521578469457, 0.031386183648135],\n    [0.007418827331946, 0.031410629851778],\n    [0.007315996744755, 0.031434739672811],\n    [0.007213087809115, 0.031458512853036],\n    [0.007110101627101, 0.031481949137863],\n    [0.007007039301610, 0.031505048276306],\n    [0.006903901936357, 0.031527810020993],\n    [0.006800690635862, 0.031550234128164],\n    [0.006697406505433, 0.031572320357675],\n    [0.006594050651161, 0.031594068473000],\n    [0.006490624179905, 0.031615478241233],\n    [0.006387128199278, 0.031636549433095],\n    [0.006283563817639, 0.031657281822929],\n    [0.006179932144080, 0.031677675188707],\n    [0.006076234288412, 0.031697729312034],\n    [0.005972471361157, 0.031717443978146],\n    [0.005868644473532, 0.031736818975914],\n    [0.005764754737440, 0.031755854097848],\n    [0.005660803265456, 0.031774549140098],\n    [0.005556791170816, 0.031792903902453],\n    [0.005452719567407, 0.031810918188350],\n    [0.005348589569753, 0.031828591804869],\n    [0.005244402293001, 0.031845924562742],\n    [0.005140158852914, 0.031862916276347],\n    [0.005035860365855, 0.031879566763717],\n    [0.004931507948778, 0.031895875846539],\n    [0.004827102719212, 0.031911843350155],\n    [0.004722645795254, 0.031927469103567],\n    [0.004618138295554, 0.031942752939435],\n    [0.004513581339303, 0.031957694694082],\n    [0.004408976046222, 0.031972294207493],\n    [0.004304323536549, 0.031986551323320],\n    [0.004199624931030, 0.032000465888879],\n    [0.004094881350902, 0.032014037755158],\n    [0.003990093917884, 0.032027266776813],\n    [0.003885263754166, 0.032040152812170],\n    [0.003780391982394, 0.032052695723232],\n    [0.003675479725661, 0.032064895375674],\n    [0.003570528107494, 0.032076751638847],\n    [0.003465538251839, 0.032088264385780],\n    [0.003360511283053, 0.032099433493181],\n    [0.003255448325892, 0.032110258841438],\n    [0.003150350505494, 0.032120740314619],\n    [0.003045218947373, 0.032130877800478],\n    [0.002940054777404, 0.032140671190449],\n    [0.002834859121810, 0.032150120379653],\n    [0.002729633107153, 0.032159225266897],\n    [0.002624377860318, 0.032167985754674],\n    [0.002519094508504, 0.032176401749168],\n    [0.002413784179212, 0.032184473160250],\n    [0.002308448000231, 0.032192199901481],\n    [0.002203087099626, 0.032199581890114],\n    [0.002097702605728, 0.032206619047093],\n    [0.001992295647121, 0.032213311297057],\n    [0.001886867352628, 0.032219658568338],\n    [0.001781418851302, 0.032225660792960],\n    [0.001675951272410, 0.032231317906644],\n    [0.001570465745428, 0.032236629848809],\n    [0.001464963400018, 0.032241596562566],\n    [0.001359445366028, 0.032246217994727],\n    [0.001253912773470, 0.032250494095799],\n    [0.001148366752513, 0.032254424819990],\n    [0.001042808433471, 0.032258010125204],\n    [0.000937238946789, 0.032261249973045],\n    [0.000831659423030, 0.032264144328817],\n    [0.000726070992868, 0.032266693161525],\n    [0.000620474787068, 0.032268896443871],\n    [0.000514871936481, 0.032270754152261],\n    [0.000409263572030, 0.032272266266801],\n    [0.000303650824695, 0.032273432771295],\n    [0.000198034825504, 0.032274253653254],\n    [0.000092416705518, 0.032274728903884]\n];\n\nconst MDCT_TABLE_240 = [              \n    [0.091286604111815, 0.000298735779793],\n    [0.091247502481454, 0.002688238127538],\n    [0.091145864370807, 0.005075898091152],\n    [0.090981759437558, 0.007460079287760],\n    [0.090755300151030, 0.009839147718664],\n    [0.090466641715108, 0.012211472889198],\n    [0.090115981961863, 0.014575428926191],\n    [0.089703561215976, 0.016929395692256],\n    [0.089229662130024, 0.019271759896156],\n    [0.088694609490769, 0.021600916198470],\n    [0.088098769996564, 0.023915268311810],\n    [0.087442552006035, 0.026213230094844],\n    [0.086726405258214, 0.028493226639351],\n    [0.085950820564309, 0.030753695349588],\n    [0.085116329471329, 0.032993087013213],\n    [0.084223503897785, 0.035209866863042],\n    [0.083272955741727, 0.037402515628894],\n    [0.082265336461381, 0.039569530578832],\n    [0.081201336628670, 0.041709426549053],\n    [0.080081685455930, 0.043820736961749],\n    [0.078907150296148, 0.045902014830227],\n    [0.077678536117054, 0.047951833750597],\n    [0.076396684949434, 0.049968788879362],\n    [0.075062475310050, 0.051951497896226],\n    [0.073676821599542, 0.053898601951466],\n    [0.072240673475749, 0.055808766597225],\n    [0.070755015202858, 0.057680682702068],\n    [0.069220864976840, 0.059513067348201],\n    [0.067639274227625, 0.061304664710718],\n    [0.066011326898512, 0.063054246918278],\n    [0.064338138703282, 0.064760614894630],\n    [0.062620856361546, 0.066422599180399],\n    [0.060860656812842, 0.068039060734572],\n    [0.059058746410016, 0.069608891715145],\n    [0.057216360092450, 0.071131016238378],\n    [0.055334760539699, 0.072604391116154],\n    [0.053415237306106, 0.074028006570930],\n    [0.051459105937014, 0.075400886927784],\n    [0.049467707067153, 0.076722091283096],\n    [0.047442405501835, 0.077990714149396],\n    [0.045384589281588, 0.079205886075941],\n    [0.043295668730857, 0.080366774244592],\n    [0.041177075491445, 0.081472583040586],\n    [0.039030261541332, 0.082522554597810],\n    [0.036856698199564, 0.083515969318206],\n    [0.034657875117883, 0.084452146364948],\n    [0.032435299259796, 0.085330444129049],\n    [0.030190493867775, 0.086150260669096],\n    [0.027924997419306, 0.086911034123781],\n    [0.025640362572491, 0.087612243096981],\n    [0.023338155101933, 0.088253407015092],\n    [0.021019952825636, 0.088834086456390],\n    [0.018687344523641, 0.089353883452193],\n    [0.016341928849164, 0.089812441759604],\n    [0.013985313232951, 0.090209447105664],\n    [0.011619112781631, 0.090544627402740],\n    [0.009244949170797, 0.090817752935000],\n    [0.006864449533597, 0.091028636515846],\n    [0.004479245345574, 0.091177133616206],\n    [0.002090971306534, 0.091263142463585]\n];                    //import \"mdct_tables.js\"\n/*\n * AAC.js - Advanced Audio Coding decoder in JavaScript\n * Created by Devon Govett\n * Copyright (c) 2012, Official.fm Labs\n *\n * AAC.js is free software; you can redistribute it and/or modify it \n * under the terms of the GNU Lesser General Public License as \n * published by the Free Software Foundation; either version 3 of the \n * License, or (at your option) any later version.\n *\n * AAC.js is distributed in the hope that it will be useful, but WITHOUT \n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General \n * Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar FFT = (function() {\n    \n    function FFT(length) {\n        this.length = length;\n    \n        switch (length) {\n            case 64:\n                this.roots = generateFFTTableShort(64);\n                break;\n    \n            case 512:\n                this.roots = generateFFTTableLong(512);\n                break;\n    \n            case 60:\n                this.roots = generateFFTTableShort(60);\n                break;\n    \n            case 480:\n                this.roots = generateFFTTableLong(480);\n                break;\n    \n            default:\n                throw new Error(\"unexpected FFT length: \" + length);\n        }\n    \n        // processing buffers\n        this.rev = new Array(length);\n        for (var i = 0; i < length; i++) {\n            this.rev[i] = new Float32Array(2);\n        }\n    \n        this.a = new Float32Array(2);\n        this.b = new Float32Array(2);\n        this.c = new Float32Array(2);\n        this.d = new Float32Array(2);     \n        this.e1 = new Float32Array(2);\n        this.e2 = new Float32Array(2);\n    }\n    \n    function generateFFTTableShort(len) {\n        var t = 2 * Math.PI / len,\n            cosT = Math.cos(t),\n            sinT = Math.sin(t),\n            f = new Array(len);\n    \n        for (var i = 0; i < len; i++) {\n            f[i] = new Float32Array(2);\n        }\n    \n        f[0][0] = 1;\n        f[0][1] = 0;\n        var lastImag = 0;\n    \n        for (var i = 1; i < len; i++) {\n            f[i][0] = f[i - 1][0] * cosT + lastImag * sinT;\n            lastImag = lastImag * cosT - f[i - 1][0] * sinT;\n            f[i][1] = -lastImag;\n        }\n    \n        return f;\n    }\n    \n    function generateFFTTableLong(len) {\n        var t = 2 * Math.PI / len,\n            cosT = Math.cos(t),\n            sinT = Math.sin(t),\n            f = new Array(len);\n    \n        for (var i = 0; i < len; i++) {\n            f[i] = new Float32Array(3);\n        }\n    \n        f[0][0] = 1;\n        f[0][1] = 0;\n        f[0][2] = 0;\n    \n        for (var i = 1; i < len; i++) {\n            f[i][0] = f[i - 1][0] * cosT + f[i - 1][2] * sinT;\n            f[i][2] = f[i - 1][2] * cosT - f[i - 1][0] * sinT;\n            f[i][1] = -f[i][2];\n        }\n    \n        return f;\n    }\n    \n    FFT.prototype.process = function(input, forward) {\n        var length = this.length,\n            imOffset = (forward ? 2 : 1),\n            scale = (forward ? length : 1),\n            rev = this.rev,\n            roots = this.roots;\n    \n        // bit-reversal\n        var ii = 0;\n        for (var i = 0; i < length; i++) {\n            rev[i][0] = input[ii][0];\n            rev[i][1] = input[ii][1];\n    \n            var k = length >>> 1;\n            while (ii >= k && k > 0) {\n                ii -= k;\n                k >>= 1;\n            }\n    \n            ii += k;\n        }\n    \n        var a = this.a,\n            b = this.b,\n            c = this.c,\n            d = this.d,\n            e1 = this.e1,\n            e2 = this.e2;\n    \n        for (var i = 0; i < length; i++) {\n            input[i][0] = rev[i][0];\n            input[i][1] = rev[i][1];\n        }\n    \n        // bottom base-4 round\n        for (var i = 0; i < length; i += 4) {\n            a[0] = input[i][0] + input[i + 1][0];\n            a[1] = input[i][1] + input[i + 1][1];\n            b[0] = input[i + 2][0] + input[i + 3][0];\n            b[1] = input[i + 2][1] + input[i + 3][1];\n            c[0] = input[i][0] - input[i + 1][0];\n            c[1] = input[i][1] - input[i + 1][1];\n            d[0] = input[i + 2][0] - input[i + 3][0];\n            d[1] = input[i + 2][1] - input[i + 3][1];\n            input[i][0] = a[0] + b[0];\n            input[i][1] = a[1] + b[1];\n            input[i + 2][0] = a[0] - b[0];\n            input[i + 2][1] = a[1] - b[1];\n    \n            e1[0] = c[0] - d[1];\n            e1[1] = c[1] + d[0];\n            e2[0] = c[0] + d[1];\n            e2[1] = c[1] - d[0];\n    \n            if (forward) {\n                input[i + 1][0] = e2[0];\n                input[i + 1][1] = e2[1];\n                input[i + 3][0] = e1[0];\n                input[i + 3][1] = e1[1];\n            } else {\n                input[i + 1][0] = e1[0];\n                input[i + 1][1] = e1[1];\n                input[i + 3][0] = e2[0];\n                input[i + 3][1] = e2[1];\n            }\n        }\n    \n        // iterations from bottom to top\n        for (var i = 4; i < length; i <<= 1) {\n            var shift = i << 1,\n                m = length / shift;\n    \n            for(var j = 0; j < length; j += shift) {\n                for(var k = 0; k < i; k++) {\n                    var km = k * m,\n                        rootRe = roots[km][0],\n                        rootIm = roots[km][imOffset],\n                        zRe = input[i + j + k][0] * rootRe - input[i + j + k][1] * rootIm,\n                        zIm = input[i + j + k][0] * rootIm + input[i + j + k][1] * rootRe;\n    \n                    input[i + j + k][0] = (input[j + k][0] - zRe) * scale;\n                    input[i + j + k][1] = (input[j + k][1] - zIm) * scale;\n                    input[j + k][0] = (input[j + k][0] + zRe) * scale;\n                    input[j + k][1] = (input[j + k][1] + zIm) * scale;\n                }\n            }\n        }\n    };\n    \n    return FFT;\n    \n})();//import \"fft.js\"\n\n// Modified Discrete Cosine Transform\nfunction MDCT(length) {\n    this.N = length;\n    this.N2 = length >>> 1;\n    this.N4 = length >>> 2;\n    this.N8 = length >>> 3;\n    \n    switch (length) {\n        case 2048:\n            this.sincos = MDCT_TABLE_2048;\n            break;\n            \n        case 256:\n            this.sincos = MDCT_TABLE_256;\n            break;\n            \n        case 1920:\n            this.sincos = MDCT_TABLE_1920;\n            break;\n            \n        case 240:\n            this.sincos = MDCT_TABLE_240;\n            break;\n            \n        default:\n            throw new Error(\"unsupported MDCT length: \" + length);\n    }\n    \n    this.fft = new FFT(this.N4);\n    \n    this.buf = new Array(this.N4);\n    for (var i = 0; i < this.N4; i++) {\n        this.buf[i] = new Float32Array(2);\n    }\n    \n    this.tmp = new Float32Array(2);\n}\n\nMDCT.prototype.process = function(input, inOffset, output, outOffset) {\n    // local access\n    var N2 = this.N2,\n        N4 = this.N4,\n        N8 = this.N8,\n        buf = this.buf,\n        tmp = this.tmp,\n        sincos = this.sincos,\n        fft = this.fft;\n    \n    // pre-IFFT complex multiplication\n    for (var k = 0; k < N4; k++) {\n        buf[k][1] = (input[inOffset + 2 * k] * sincos[k][0]) + (input[inOffset + N2 - 1 - 2 * k] * sincos[k][1]);\n        buf[k][0] = (input[inOffset + N2 - 1 - 2 * k] * sincos[k][0]) - (input[inOffset + 2 * k] * sincos[k][1]);\n    }\n    \n    // complex IFFT, non-scaling\n    fft.process(buf, false);\n    \n    // post-IFFT complex multiplication\n    for (var k = 0; k < N4; k++) {\n        tmp[0] = buf[k][0];\n        tmp[1] = buf[k][1];\n        buf[k][1] = (tmp[1] * sincos[k][0]) + (tmp[0] * sincos[k][1]);\n        buf[k][0] = (tmp[0] * sincos[k][0]) - (tmp[1] * sincos[k][1]);\n    }\n    \n    // reordering\n    for (var k = 0; k < N8; k += 2) {\n        output[outOffset + 2 * k] = buf[N8 + k][1];\n        output[outOffset + 2 + 2 * k] = buf[N8 + 1 + k][1];\n\n        output[outOffset + 1 + 2 * k] = -buf[N8 - 1 - k][0];\n        output[outOffset + 3 + 2 * k] = -buf[N8 - 2 - k][0];\n\n        output[outOffset + N4 + 2 * k] = buf[k][0];\n        output[outOffset + N4 + 2 + 2 * k] = buf[1 + k][0];\n\n        output[outOffset + N4 + 1 + 2 * k] = -buf[N4 - 1 - k][1];\n        output[outOffset + N4 + 3 + 2 * k] = -buf[N4 - 2 - k][1];\n\n        output[outOffset + N2 + 2 * k] = buf[N8 + k][0];\n        output[outOffset + N2 + 2 + 2 * k] = buf[N8 + 1 + k][0];\n\n        output[outOffset + N2 + 1 + 2 * k] = -buf[N8 - 1 - k][1];\n        output[outOffset + N2 + 3 + 2 * k] = -buf[N8 - 2 - k][1];\n\n        output[outOffset + N2 + N4 + 2 * k] = -buf[k][1];\n        output[outOffset + N2 + N4 + 2 + 2 * k] = -buf[1 + k][1];\n\n        output[outOffset + N2 + N4 + 1 + 2 * k] = buf[N4 - 1 - k][0];\n        output[outOffset + N2 + N4 + 3 + 2 * k] = buf[N4 - 2 - k][0];\n    }\n};//import \"mdct.js\"\n\nvar FilterBank = (function() {\n  \n  function FilterBank(smallFrames, channels) {\n      if (smallFrames) {\n          throw new Error(\"WHA?? No small frames allowed.\");\n      }\n  \n      this.length = 1024;\n      this.shortLength = 128;\n  \n      this.mid = (this.length - this.shortLength) / 2;\n      this.trans = this.shortLength / 2;\n  \n      this.mdctShort = new MDCT(this.shortLength * 2);\n      this.mdctLong  = new MDCT(this.length * 2);\n  \n      this.overlaps = new Array(channels);\n      for (var i = 0; i < channels; i++) {\n          this.overlaps[i] = new Float32Array(this.length);\n      }\n  \n      this.buf = new Float32Array(2 * this.length);\n  }\n    \n  function generateSineWindow(len) {\n      var d = new Float32Array(len);\n      for (var i = 0; i < len; i++) {\n          d[i] = Math.sin((i + 0.5) * (Math.PI / (2.0 * len)))\n      }\n      return d;\n  }\n  \n  function generateKBDWindow(alpha, len) {\n      var PIN = Math.PI / len,\n          out = new Float32Array(len),\n          sum = 0,\n          f = new Float32Array(len),\n          alpha2 = (alpha * PIN) * (alpha * PIN);\n  \n      for (var n = 0; n < len; n++) {\n          var tmp = n * (len - n) * alpha2,\n              bessel = 1;\n  \n          for (var j = 50; j > 0; j--) {\n              bessel = bessel * tmp / (j * j) + 1;\n          }\n  \n          sum += bessel;\n          f[n] = sum;\n      }\n  \n      sum++;\n      for (var n = 0; n < len; n++) {\n          out[n] = Math.sqrt(f[n] / sum);\n      }\n  \n      return out;\n  }\n  \n  const SINE_1024 = generateSineWindow(1024),\n        SINE_128  = generateSineWindow(128),\n        KBD_1024  = generateKBDWindow(4, 1024),\n        KBD_128   = generateKBDWindow(6, 128),\n        LONG_WINDOWS = [SINE_1024, KBD_1024],\n        SHORT_WINDOWS = [SINE_128, KBD_128];\n  \n  FilterBank.prototype.process = function(info, input, output, channel) {\n      var overlap = this.overlaps[channel],\n          windowShape = info.windowShape[1],\n          windowShapePrev = info.windowShape[0],\n          longWindows = LONG_WINDOWS[windowShape],\n          shortWindows = SHORT_WINDOWS[windowShape],\n          longWindowsPrev = LONG_WINDOWS[windowShapePrev],\n          shortWindowsPrev = SHORT_WINDOWS[windowShapePrev],\n          length = this.length,\n          shortLen = this.shortLength,\n          mid = this.mid,\n          trans = this.trans,\n          buf = this.buf,\n          mdctLong = this.mdctLong,\n          mdctShort = this.mdctShort;\n  \n      switch (info.windowSequence) {\n          case ICStream.ONLY_LONG_SEQUENCE:\n              mdctLong.process(input, 0, buf, 0);\n  \n              // add second half output of previous frame to windowed output of current frame\n              for (var i = 0; i < length; i++) {\n                  output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\n              }\n  \n              // window the second half and save as overlap for next frame\n              for (var i = 0; i < length; i++) {\n                  overlap[i] = buf[length + i] * longWindows[length - 1 - i];\n              }\n  \n              break;\n  \n          case ICStream.LONG_START_SEQUENCE:\n              mdctLong.process(input, 0, buf, 0);\n  \n              // add second half output of previous frame to windowed output of current frame\n              for (var i = 0; i < length; i++) {\n                  output[i] = overlap[i] + (buf[i] * longWindowsPrev[i]);\n              }\n  \n              // window the second half and save as overlap for next frame\n              for (var i = 0; i < mid; i++) {\n                  overlap[i] = buf[length + i];\n              }\n  \n              for (var i = 0; i < shortLen; i++) {\n                  overlap[mid + i] = buf[length + mid + i] * shortWindows[shortLen - i - 1];\n              }\n  \n              for (var i = 0; i < mid; i++) {\n                  overlap[mid + shortLen + i] = 0;\n              }\n  \n              break;\n  \n          case ICStream.EIGHT_SHORT_SEQUENCE:\n              for (var i = 0; i < 8; i++) {\n                  mdctShort.process(input, i * shortLen, buf, 2 * i * shortLen);\n              }\n  \n              // add second half output of previous frame to windowed output of current frame\n              for (var i = 0; i < mid; i++) {\n                  output[i] = overlap[i];\n              }\n  \n              for (var i = 0; i < shortLen; i++) {\n                  output[mid + i] = overlap[mid + i] + buf[i] * shortWindowsPrev[i];\n                  output[mid + 1 * shortLen + i] = overlap[mid + shortLen * 1 + i] + (buf[shortLen * 1 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 2 + i]  * shortWindows[i]);\n                  output[mid + 2 * shortLen + i] = overlap[mid + shortLen * 2 + i] + (buf[shortLen * 3 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 4 + i] * shortWindows[i]);\n                  output[mid + 3 * shortLen + i] = overlap[mid + shortLen * 3 + i] + (buf[shortLen * 5 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 6 + i] * shortWindows[i]);\n  \n                  if (i < trans)\n                      output[mid + 4 * shortLen + i] = overlap[mid + shortLen * 4 + i] + (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\n              }\n  \n              // window the second half and save as overlap for next frame\n              for (var i = 0; i < shortLen; i++) {\n                  if(i >= trans) \n                      overlap[mid + 4 * shortLen + i - length] = (buf[shortLen * 7 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 8 + i] * shortWindows[i]);\n  \n                  overlap[mid + 5 * shortLen + i - length] = (buf[shortLen * 9 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 10 + i] * shortWindows[i]);\n                  overlap[mid + 6 * shortLen + i - length] = (buf[shortLen * 11 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 12 + i]*shortWindows[i]);\n                  overlap[mid + 7 * shortLen + i - length] = (buf[shortLen * 13 + i] * shortWindows[shortLen - 1 - i]) + (buf[shortLen * 14 + i]*shortWindows[i]);\n                  overlap[mid + 8 * shortLen + i - length] = (buf[shortLen * 15 + i] * shortWindows[shortLen - 1 - i]);\n              }\n  \n              for (var i = 0; i < mid; i++) {\n                  overlap[mid + shortLen + i] = 0;\n              }\n  \n              break;\n  \n          case ICStream.LONG_STOP_SEQUENCE:\n              mdctLong.process(input, 0, buf, 0);\n  \n              // add second half output of previous frame to windowed output of current frame\n              // construct first half window using padding with 1's and 0's\n              for (var i = 0; i < mid; i++) {\n                  output[i] = overlap[i];\n              }\n  \n              for (var i = 0; i < shortLen; i++) {\n                  output[mid + i] = overlap[mid + i] + (buf[mid + i] * shortWindowsPrev[i]);\n              }\n  \n              for (var i = 0; i < mid; i++) {\n                  output[mid + shortLen + i] = overlap[mid + shortLen + i] + buf[mid + shortLen + i];\n              }\n  \n              // window the second half and save as overlap for next frame\n              for (var i = 0; i < length; i++) {\n                  overlap[i] = buf[length + i] * longWindows[length - 1 - i];\n              }\n  \n              break;\n      }\n  };\n  \n  return FilterBank;\n    \n})();//import \"filter_bank.js\"\n\nvar AACDecoder = AV.Decoder.extend(function() {\n    AV.Decoder.register('mp4a', this);\n    AV.Decoder.register('aac ', this);\n    \n    // AAC profiles\n    const AOT_AAC_MAIN = 1, // no\n          AOT_AAC_LC = 2,   // yes\n          AOT_AAC_LTP = 4,  // no\n          AOT_ESCAPE = 31;\n          \n    // Channel configurations\n    const CHANNEL_CONFIG_NONE = 0,\n          CHANNEL_CONFIG_MONO = 1,\n          CHANNEL_CONFIG_STEREO = 2,\n          CHANNEL_CONFIG_STEREO_PLUS_CENTER = 3,\n          CHANNEL_CONFIG_STEREO_PLUS_CENTER_PLUS_REAR_MONO = 4,\n          CHANNEL_CONFIG_FIVE = 5,\n          CHANNEL_CONFIG_FIVE_PLUS_ONE = 6,\n          CHANNEL_CONFIG_SEVEN_PLUS_ONE = 8;\n    \n    this.prototype.setCookie = function(buffer) {\n        var data = AV.Stream.fromBuffer(buffer),\n            stream = new AV.Bitstream(data);\n        \n        this.format.bitsPerChannel = 16; // caf format doesn't encode this\n        this.config = {};\n        \n        this.config.profile = stream.read(5);\n        if (this.config.profile === AOT_ESCAPE)\n            this.config.profile = 32 + stream.read(6);\n            \n        this.config.sampleIndex = stream.read(4);\n        if (this.config.sampleIndex === 0x0f) {\n            this.config.sampleRate = 48000//stream.read(24);\n            for (var i = 0; i < SAMPLE_RATES.length; i++) {\n                if (SAMPLE_RATES[i] === this.config.sampleRate) {\n                    this.config.sampleIndex = i;\n                    break;\n                }\n            }\n        } else {\n            this.config.sampleRate = 48000//SAMPLE_RATES[this.config.sampleIndex];\n        }\n            \n        this.config.chanConfig = stream.read(4);\n        this.format.channelsPerFrame = this.config.chanConfig; // sometimes m4a files encode this wrong\n        \n        switch (this.config.profile) {\n            case AOT_AAC_MAIN:\n            case AOT_AAC_LC:\n            case AOT_AAC_LTP:\n                if (stream.read(1)) // frameLengthFlag\n                    throw new Error('frameLengthFlag not supported');\n                    \n                this.config.frameLength = 1024;\n                    \n                if (stream.read(1)) // dependsOnCoreCoder\n                    stream.advance(14); // coreCoderDelay\n                    \n                if (stream.read(1)) { // extensionFlag\n                    if (this.config.profile > 16) { // error resiliant profile\n                        this.config.sectionDataResilience = stream.read(1);\n                        this.config.scalefactorResilience = stream.read(1);\n                        this.config.spectralDataResilience = stream.read(1);\n                    }\n                    \n                    stream.advance(1);\n                }\n                \n                if (this.config.chanConfig === CHANNEL_CONFIG_NONE) {\n                    stream.advance(4) // element_instance_tag\n                    throw new Error('PCE unimplemented');\n                }\n                \n                break;\n                \n            default:\n                throw new Error('AAC profile ' + this.config.profile + ' not supported.');\n        }\n        \n        this.filter_bank = new FilterBank(false, this.config.chanConfig);        \n        this.ics = new ICStream(this.config);\n        this.cpe = new CPEElement(this.config);\n        this.cce = new CCEElement(this.config);\n    };\n    \n    const SCE_ELEMENT = 0,\n          CPE_ELEMENT = 1,\n          CCE_ELEMENT = 2,\n          LFE_ELEMENT = 3,\n          DSE_ELEMENT = 4,\n          PCE_ELEMENT = 5,\n          FIL_ELEMENT = 6,\n          END_ELEMENT = 7;\n    \n    // The main decoding function.\n    this.prototype.readChunk = function() {\n        var stream = this.bitstream;\n        \n        // check if there is an ADTS header, and read it if so\n        if (stream.peek(12) === 0xfff)\n            ADTSDemuxer.readHeader(stream);\n        \n        this.cces = [];\n        var elements = [],\n            config = this.config,\n            frameLength = config.frameLength,\n            elementType = null;\n\n        while ((elementType = stream.read(3)) !== END_ELEMENT) {\n            var id = stream.read(4);\n            \n            switch (elementType) {\n                // single channel and low frequency elements\n                case SCE_ELEMENT:\n                case LFE_ELEMENT:\n                    var ics = this.ics;\n                    ics.id = id;\n                    elements.push(ics);\n                    ics.decode(stream, config, false);\n                    break;\n                    \n                // channel pair element\n                case CPE_ELEMENT:\n                    var cpe = this.cpe;\n                    cpe.id = id;\n                    elements.push(cpe);\n                    cpe.decode(stream, config);\n                    break;\n                \n                // channel coupling element\n                case CCE_ELEMENT:\n                    var cce = this.cce;\n                    this.cces.push(cce);\n                    cce.decode(stream, config);\n                    break;\n                    \n                // data-stream element\n                case DSE_ELEMENT:\n                    var align = stream.read(1),\n                        count = stream.read(8);\n                        \n                    if (count === 255)\n                        count += stream.read(8);\n                        \n                    if (align)\n                        stream.align();\n                        \n                    // skip for now...\n                    stream.advance(count * 8);\n                    break;\n                    \n                // program configuration element\n                case PCE_ELEMENT:\n                    throw new Error(\"TODO: PCE_ELEMENT\")\n                    break;\n                    \n                // filler element\n                case FIL_ELEMENT:\n                    if (id === 15)\n                        id += stream.read(8) - 1;\n                        \n                    // skip for now...\n                    stream.advance(id * 8);\n                    break;\n                    \n                default:\n                    throw new Error('Unknown element')\n            }\n        }\n        \n        stream.align();\n        this.process(elements);\n        // Interleave channels\n        var data = this.data,\n            channels = data.length,\n            output = new Int16Array(frameLength * channels),\n            j = 0;\n            \n        for (var k = 0; k < frameLength; k++) {\n            for (var i = 0; i < channels; i++) {\n                data[i][k] = Math.max(Math.min(data[i][k], 32767), -32768) / 1000;\n            }\n        }\n        return data\n//        return output;\n    };\n    \n    this.prototype.process = function(elements) {\n        var channels = this.config.chanConfig;\n        \n        // if (channels === 1 && psPresent)\n        // TODO: sbrPresent (2)\n        var mult = 1;\n        \n        var len = mult * this.config.frameLength;\n        var data = this.data = [];\n        \n        // Initialize channels\n        for (var i = 0; i < channels; i++) {\n            data[i] = new Float32Array(len);\n        }\n        \n        var channel = 0;\n        for (var i = 0; i < elements.length && channel < channels; i++) {\n            var e = elements[i];\n            \n            if (e instanceof ICStream) { // SCE or LFE element\n                channel += this.processSingle(e, channel);\n            } else if (e instanceof CPEElement) {\n                this.processPair(e, channel);\n                channel += 2;\n            } else if (e instanceof CCEElement) {\n                channel++;\n            } else {\n                throw new Error(\"Unknown element found.\")\n            }\n        }\n    };\n    \n    this.prototype.processSingle = function(element, channel) {\n        var profile = this.config.profile,\n            info = element.info,\n            data = element.data;\n            \n        if (profile === AOT_AAC_MAIN)\n            throw new Error(\"Main prediction unimplemented\");\n            \n        if (profile === AOT_AAC_LTP)\n            throw new Error(\"LTP prediction unimplemented\");\n            \n        this.applyChannelCoupling(element, CCEElement.BEFORE_TNS, data, null);\n        \n        if (element.tnsPresent)\n            element.tns.process(element, data, false);\n            \n        this.applyChannelCoupling(element, CCEElement.AFTER_TNS, data, null);\n        \n        // filterbank\n        this.filter_bank.process(info, data, this.data[channel], channel);\n        \n        if (profile === AOT_AAC_LTP)\n            throw new Error(\"LTP prediction unimplemented\");\n        \n        this.applyChannelCoupling(element, CCEElement.AFTER_IMDCT, this.data[channel], null);\n        \n        if (element.gainPresent)\n            throw new Error(\"Gain control not implemented\");\n            \n        if (this.sbrPresent)\n            throw new Error(\"SBR not implemented\");\n            \n        return 1;\n    };\n    \n    this.prototype.processPair = function(element, channel) {\n        var profile = this.config.profile,\n            left = element.left,\n            right = element.right,\n            l_info = left.info,\n            r_info = right.info,\n            l_data = left.data,\n            r_data = right.data;\n            \n        // Mid-side stereo\n        if (element.commonWindow && element.maskPresent)\n            this.processMS(element, l_data, r_data);\n            \n        if (profile === AOT_AAC_MAIN)\n            throw new Error(\"Main prediction unimplemented\");\n        \n        // Intensity stereo    \n        this.processIS(element, l_data, r_data);\n            \n        if (profile === AOT_AAC_LTP)\n            throw new Error(\"LTP prediction unimplemented\");\n            \n        this.applyChannelCoupling(element, CCEElement.BEFORE_TNS, l_data, r_data);\n        \n        if (left.tnsPresent)\n            left.tns.process(left, l_data, false);\n            \n        if (right.tnsPresent)\n            right.tns.process(right, r_data, false);\n        \n        this.applyChannelCoupling(element, CCEElement.AFTER_TNS, l_data, r_data);\n        \n        // filterbank\n        this.filter_bank.process(l_info, l_data, this.data[channel], channel);\n        this.filter_bank.process(r_info, r_data, this.data[channel + 1], channel + 1);\n        \n        if (profile === AOT_AAC_LTP)\n            throw new Error(\"LTP prediction unimplemented\");\n        \n        this.applyChannelCoupling(element, CCEElement.AFTER_IMDCT, this.data[channel], this.data[channel + 1]);\n        \n        if (left.gainPresent)\n            throw new Error(\"Gain control not implemented\");\n            \n        if (right.gainPresent)\n            throw new Error(\"Gain control not implemented\");\n            \n        if (this.sbrPresent)\n            throw new Error(\"SBR not implemented\");\n    };\n    \n    // Intensity stereo\n    this.prototype.processIS = function(element, left, right) {\n        var ics = element.right,\n            info = ics.info,\n            offsets = info.swbOffsets,\n            windowGroups = info.groupCount,\n            maxSFB = info.maxSFB,\n            bandTypes = ics.bandTypes,\n            sectEnd = ics.sectEnd,\n            scaleFactors = ics.scaleFactors;\n        \n        var idx = 0, groupOff = 0;\n        for (var g = 0; g < windowGroups; g++) {\n            for (var i = 0; i < maxSFB;) {\n                var end = sectEnd[idx];\n                \n                if (bandTypes[idx] === ICStream.INTENSITY_BT || bandTypes[idx] === ICStream.INTENSITY_BT2) {\n                    for (; i < end; i++, idx++) {\n                        var c = bandTypes[idx] === ICStream.INTENSITY_BT ? 1 : -1;\n                        if (element.maskPresent)\n                            c *= element.ms_used[idx] ? -1 : 1;\n                            \n                        var scale = c * scaleFactors[idx];\n                        for (var w = 0; w < info.groupLength[g]; w++) {\n                            var off = groupOff + w * 128 + offsets[i],\n                                len = offsets[i + 1] - offsets[i];\n                                \n                            for (var j = 0; j < len; j++) {\n                                right[off + j] = left[off + j] * scale;\n                            }\n                        }\n                    }\n                } else  {\n                    idx += end - i;\n                    i = end;\n                }\n            }\n            \n            groupOff += info.groupLength[g] * 128;\n        }\n    };\n    \n    // Mid-side stereo\n    this.prototype.processMS = function(element, left, right) {\n        var ics = element.left,\n            info = ics.info,\n            offsets = info.swbOffsets,\n            windowGroups = info.groupCount,\n            maxSFB = info.maxSFB,\n            sfbCBl = ics.bandTypes,\n            sfbCBr = element.right.bandTypes;\n            \n        var groupOff = 0, idx = 0;\n        for (var g = 0; g < windowGroups; g++) {\n            for (var i = 0; i < maxSFB; i++, idx++) {\n                if (element.ms_used[idx] && sfbCBl[idx] < ICStream.NOISE_BT && sfbCBr[idx] < ICStream.NOISE_BT) {\n                    for (var w = 0; w < info.groupLength[g]; w++) {\n                        var off = groupOff + w * 128 + offsets[i];\n                        for (var j = 0; j < offsets[i + 1] - offsets[i]; j++) {\n                            var t = left[off + j] - right[off + j];\n                            left[off + j] += right[off + j];\n                            right[off + j] = t;\n                        }\n                    }\n                }\n            }\n            groupOff += info.groupLength[g] * 128;\n        }\n    };\n    \n    this.prototype.applyChannelCoupling = function(element, couplingPoint, data1, data2) {\n        var cces = this.cces,\n            isChannelPair = element instanceof CPEElement,\n            applyCoupling = couplingPoint === CCEElement.AFTER_IMDCT ? 'applyIndependentCoupling' : 'applyDependentCoupling';\n        \n        for (var i = 0; i < cces.length; i++) {\n            var cce = cces[i],\n                index = 0;\n                \n            if (cce.couplingPoint === couplingPoint) {\n                for (var c = 0; c < cce.coupledCount; c++) {\n                    var chSelect = cce.chSelect[c];\n                    if (cce.channelPair[c] === isChannelPair && cce.idSelect[c] === element.id) {\n                        if (chSelect !== 1) {\n                            cce[applyCoupling](index, data1);\n                            if (chSelect) index++;\n                        }\n                        \n                        if (chSelect !== 2)\n                            cce[applyCoupling](index++, data2);\n                            \n                    } else {\n                        index += 1 + (chSelect === 3 ? 1 : 0);\n                    }\n                }\n            }\n        }\n    };\n    \n});\n\n})();\n";

var code = aurora + aac + worker;

var slave = undefined 
var id = 0;

module.exports = function(master, uri, cb){
    var master = master;
    var source = Object.create(null);
    var slave = slave || enslave(code);

    slave.postMessage({id: id++, uri: uri, sampleRate: master.sampleRate});

    slave.onmessage = function(evt){
	if(evt.data.type == 'meta'){

	    var data = evt.data.data;
	    source.data = data;
	    source.buffers = new Array(data.channelsPerFrame);

	    for(var x = 0; x < source.buffers.length; x++){
		source.buffers[x] = buffers(6);
	    }

	    var startTime = new Date().getTime();

	    var bufSize = 256 * 2 * 2 * 2 * 2 * 2;

	    var synth = master.createScriptProcessor(bufSize, data.channelsPerFrame, data.channelsPerFrame);
	    synth.bufSize = bufSize;
	    synth.bufIndex = 0;
	    synth.id = id;
	    synth.currentTime = function(t){// t in seconds
		synth.bufIndex = t * master.sampleRate
	    };

	    synth.onaudioprocess = function(evt){
		var outputBuffer = event.outputBuffer;
		var channelCount = outputBuffer.numberOfChannels;
		var channels = new Array(channelCount);
		for (i = _i = 0; _i < channelCount; i = _i += 1) {
		    channels[i] = outputBuffer.getChannelData(i);
		}
		for(var x = 0; x < channels.length; x++){
		    channels[x].set(source.buffers[x].slice(this.bufIndex, this.bufIndex + this.bufSize));
		}
		this.bufIndex+=this.bufSize
	    };

	    cb(null, synth)

	}
	else if(evt.data.type == 'end'){

//	    alert((new Date().getTime() - startTime) / 1000)
	}
	else if(evt.data.type == 'progress'){
	    console.log(evt.data.data);
	}
	else {
	    var wsb = source.buffers;
	    for(x in evt.data.buffer){
		wsb[x].push(evt.data.buffer[x]);
	    }
	}
    }


}


})()
},{"./floatConcat.js":7,"buffers":12,"fs":31,"work-slave":28}],9:[function(require,module,exports){
module.exports = function(css, id){
    var es = document.getElementById(id);

    if(es){
	return false
//	es.parentNode.insertBefore(makeStyle(css), es.nextSibling)
    }
    else{
	var styleSheet = makeStyle(css, id)
	document.head.insertBefore(styleSheet, document.head.childNodes[0]);
	return styleSheet
    }

}


function makeStyle(str, id){
    var style = document.createElement('style');
    style.id = id || '';
    style.textContent = str;
    return style
}

},{}],10:[function(require,module,exports){
var getCSS = require('./getCSS');

module.exports = function(el){
    
    el.style['-webkit-box-sizing'] = 'border-box'
    el.parentElement.style['-webkit-box-sizing'] = 'border-box'
    el.style['box-sizing'] = 'border-box'
    el.parentElement.style['box-sizing'] = 'border-box'

    var w = getCSS(el, 'width').primitive.val
    ,   h = getCSS(el, 'height').primitive.val
    ;
    
    var pw = getCSS(el.parentElement, 'width').primitive.val
    ,   ph = getCSS(el.parentElement, 'height').primitive.val
    ;

    var dw = pw - w
    ,   dh = ph - h
    ;
    
    el.style.position = 'absolute';
    el.style['top'] = dh/2 + 'px';
    el.style['left'] = dw/2 + 'px';

}

},{"./getCSS":11}],11:[function(require,module,exports){
module.exports = function(el, param){

    var propValue = window.getComputedStyle(el).getPropertyCSSValue(param)
		if(!propValue) throw new Error("No prop valueValue. Is the element appended to the document yet?")
		if(!propValue) return false
    var valueType = '';
		for(var b in propValue.__proto__){
			if(propValue.__proto__[b] == propValue.cssValueType) {
				valueType = b;
				break;
			}
		};


    switch(valueType.toLowerCase()){
    case 'cssvaluelist':
	var l = propValue.length;
        var obj = {};
	obj.type = 'cssPrimitiveValue'
	obj.value = Array.prototype.slice.call(propValue).map(function(x){ return CSSGetPrimitiveValue(x)});
        return obj;
	break;
    case 'cssprimitivevalue':
	return {type: 'cssPrimitiveValue', value : CSSGetPrimitiveValue(propValue)};
	break;
    case 'svgpaint':
	return {type: 'SVGPaint', value : CSSGetPrimitiveValue(propValue)};
	break;
	 default:
	return {type: 'cssValue', primitive: CSSGetPrimitiveValue(propValue), value : {unit: '', type: propValue.cssValueType, val: propValue.cssText}};
	break;
    }

};

function CSSGetPrimitiveValue(value) {
		try {

				var valueType = value.primitiveType;

			  if (CSSPrimitiveValue.CSS_PX == valueType) {
					return {class: CSSPrimitiveValue.CSS_PX, unit : 'px', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (valueType == CSSPrimitiveValue.CSS_NUMBER) {
					return {class: CSSPrimitiveValue.CSS_NUMBER, unit : '', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (valueType == CSSPrimitiveValue.CSS_PERCENTAGE) {
					return {class: CSSPrimitiveValue.CSS_PERCENTAGE, unit : '%', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_EMS == valueType) {
					return {class: CSSPrimitiveValue.CSS_EMS, unit : 'em', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_CM == valueType) {
					return {class: CSSPrimitiveValue.CSS_CM, unit : 'cm', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_IDENT == valueType) {
					return {class: CSSPrimitiveValue.CSS_IDENT, unit : '', type: 'string', val : value.getStringValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_EXS == valueType) {
					return {class: CSSPrimitiveValue.CSS_EXS, unit : 'ex', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_IN == valueType) {
					return {class: CSSPrimitiveValue.CSS_IN, unit : 'in', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_MM == valueType) {
					return {class: CSSPrimitiveValue.CSS_MM, unit : 'mm', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_PC == valueType) {
					return {class: CSSPrimitiveValue.CSS_PC, unit : 'pc', type: 'float', val : value.getFloatValue (valueType)};
			  }

			  if (CSSPrimitiveValue.CSS_PT == valueType) {
					return {class: CSSPrimitiveValue.CSS_PT, unit : 'pt', type: 'float', val : value.getFloatValue (valueType)};
			  }

			 	if (valueType == CSSPrimitiveValue.CSS_DIMENSION){
					return {class: CSSPrimitiveValue.CSS_DIMENSION, unit : '', type: 'float', val : value.getFloatValue (valueType)};
				}

			  if (CSSPrimitiveValue.CSS_STRING <= valueType && valueType <= CSSPrimitiveValue.CSS_ATTR) {
			     return {unit : '', type: 'string', val: value.getStringValue (valueType)};
			  }

			  if (valueType == CSSPrimitiveValue.CSS_COUNTER) {
			    var counterValue = value.getCounterValue ();
					return {
						class: CSSPrimitiveValue.CSS_COUNTER,
						unit: '',
						type: 'counter',
						val : {
							identifier: counterValue.identifier,
							listStyle: counterValue.listStyle,
							separator: counterValue.separator
						}};
			   }

			   if (valueType == CSSPrimitiveValue.CSS_RECT) {
			      var rect = value.getRectValue ()
			       	,	topPX = rect.top.getFloatValue (CSSPrimitiveValue.CSS_PX)
			       	,	rightPX = rect.right.getFloatValue (CSSPrimitiveValue.CSS_PX)
			       	,	bottomPX = rect.bottom.getFloatValue (CSSPrimitiveValue.CSS_PX)
			       	,	leftPX = rect.left.getFloatValue (CSSPrimitiveValue.CSS_PX)
						;
						return {
							class: CSSPrimitiveValue.CSS_RECT,
							unit: 'px',
							type: 'rect',
							val: {
								top: topPX,
								right: rightPX,
								bottom: bottomPX,
								left: leftPX
							}};
			   }

			   if (valueType == CSSPrimitiveValue.CSS_RGBCOLOR) {
			      var rgb = value.getRGBColorValue ()
			       	,	r = rgb.red.getFloatValue (CSSPrimitiveValue.CSS_NUMBER)
			       	,	g = rgb.green.getFloatValue (CSSPrimitiveValue.CSS_NUMBER)
			       	, b = rgb.blue.getFloatValue (CSSPrimitiveValue.CSS_NUMBER)
						;

						return {
							class: CSSPrimitiveValue.CSS_RGBCOLOR,
							unit: '',
							type: 'rgb',
							val: {
								r: r,
								g: g,
								b: b,
							}};
			   }

				if (CSSPrimitiveValue.CSS_GRAD == valueType >= CSSPrimitiveValue.CSS_DEG ) {
					return {class: CSSPrimitiveValue.CSS_GRAD, unit : 'grad', type: 'angle', val : value.getFloatValue (valueType)};
				}

				if(valueType == CSSPrimitiveValue.CSS_DEG) {
					return {class: CSSPrimitiveValue.CSS_DEG, unit : 'deg', type: 'angle', val : value.getFloatValue (valueType)};
				}

				if(valueType == CSSPrimitiveValue.CSS_RAD) {
					return {class: CSSPrimitiveValue.CSS_RAD, unit : 'radian', type: 'angle', val : value.getFloatValue (valueType)};
				}

				if(CSSPrimitiveValue.CSS_S == valueType ) {
					return {class: CSSPrimitiveValue.CSS_S, unit : '', type: 'time', val : value.getFloatValue (valueType)};
				}

				if(valueType == CSSPrimitiveValue.CSS_MS ) {
					return {class: CSSPrimitiveValue.CSS_MS, unit : '', type: 'time', val : value.getFloatValue (valueType)};
				}

				if(!valueType) {
					return {class: undefined, unit : '', type: 'unknown', val : value.cssText};
				}

			return {class: undefined, unit : '', type: 'unknown', val : value.cssText};

		}

		catch (Err){	   
			return {class: 'unknown', unit : '', type: value.propValue.__proto__.constructor.name, val : value.cssText};
		}
};

},{}],12:[function(require,module,exports){
(function(){var Buffer = Buffer;

var types = [
    Int8Array,
    Int16Array,
    Int32Array,
    Uint8Array,
    Uint16Array,
    Uint32Array,
    Float32Array,
    Float64Array
];

module.exports = Buffers;

function Buffers (bufs, type) {
    if (!(this instanceof Buffers)) return new Buffers(bufs);
    if ((!type && (!isNaN(bufs))) || !isNaN(type)) {
	type = bufs;
	bufs = null;
	Buffer = types[type]
	this.isNotANodeBuffer = true;

    };
    this.buffers = bufs || [];
    this.length = this.buffers.reduce(function (size, buf) {
        return size + buf.length
    }, 0);
}


Buffers.prototype.push = function () {    

    for (var i = 0; i < arguments.length; i++) {
        var buf = arguments[i];
        this.buffers.push(buf);
        this.length += buf.length;
    }
    return this.length;
};

Buffers.prototype.unshift = function () {

    
    for (var i = 0; i < arguments.length; i++) {
        var buf = arguments[i];
        this.buffers.unshift(buf);
        this.length += buf.length;
    }
    return this.length;
};

Buffers.prototype.copy = function (dst, dStart, start, end) {
    return this.slice(start, end).copy(dst, dStart, 0, end - start);
};

Buffers.prototype.splice = function (i, howMany) {
    var buffers = this.buffers;
    var index = i >= 0 ? i : this.length - i;
    var reps = [].slice.call(arguments, 2);
    
    if (howMany === undefined) {
        howMany = this.length - index;
    }
    else if (howMany > this.length - index) {
        howMany = this.length - index;
    }
    
    for (var i = 0; i < reps.length; i++) {
        this.length += reps[i].length;
    }
    
    var removed = new Buffers();
    var bytes = 0;
    
    var startBytes = 0;
    for (
        var ii = 0;
        ii < buffers.length && startBytes + buffers[ii].length < index;
        ii ++
    ) { startBytes += buffers[ii].length }
    
    if (index - startBytes > 0) {
        var start = index - startBytes;
        
        if (start + howMany < buffers[ii].length) {
            removed.push(buffers[ii].slice(start, start + howMany));
            
            var orig = buffers[ii];
            //var buf = new Buffer(orig.length - howMany);
            var buf0 = new Buffer(start);
            for (var i = 0; i < start; i++) {
                buf0[i] = orig[i];
            }
            
            var buf1 = new Buffer(orig.length - start - howMany);
            for (var i = start + howMany; i < orig.length; i++) {
                buf1[ i - howMany - start ] = orig[i]
            }
            
            if (reps.length > 0) {
                var reps_ = reps.slice();
                reps_.unshift(buf0);
                reps_.push(buf1);
                buffers.splice.apply(buffers, [ ii, 1 ].concat(reps_));
                ii += reps_.length;
                reps = [];
            }
            else {
                buffers.splice(ii, 1, buf0, buf1);
                //buffers[ii] = buf;
                ii += 2;
            }
        }
        else {
            removed.push(buffers[ii].slice(start));
            buffers[ii] = buffers[ii].slice(0, start);
            ii ++;
        }
    }
    
    if (reps.length > 0) {
        buffers.splice.apply(buffers, [ ii, 0 ].concat(reps));
        ii += reps.length;
    }
    
    while (removed.length < howMany) {
        var buf = buffers[ii];
        var len = buf.length;
        var take = Math.min(len, howMany - removed.length);
        
        if (take === len) {
            removed.push(buf);
            buffers.splice(ii, 1);
        }
        else {
            removed.push(buf.slice(0, take));
            buffers[ii] = buffers[ii].slice(take);
        }
    }
    
    this.length -= removed.length;
    
    return removed;
};
 
Buffers.prototype.slice = function (i, j) {
    var buffers = this.buffers;
    if (j === undefined) j = this.length;
    if (i === undefined) i = 0;
    
    if (j > this.length) j = this.length;
    
    var startBytes = 0;
    for (
        var si = 0;
        si < buffers.length && startBytes + buffers[si].length <= i;
        si ++
    ) { startBytes += buffers[si].length }
    
    var target = new Buffer(j - i);
    
    var ti = 0;
    for (var ii = si; ti < j - i && ii < buffers.length; ii++) {
        var len = buffers[ii].length;
        
        var start = ti === 0 ? i - startBytes : 0;
        var end = ti + len >= j - i
            ? Math.min(start + (j - i) - ti, len)
            : len
        ;

	if(this.isNotANodeBuffer) target.set(buffers[ii].subarray(start, end), ti);

        else buffers[ii].copy(target, ti, start, end);

        ti += end - start;

    }
    
    return target;
};

Buffers.prototype.pos = function (i) {
    if (i < 0 || i >= this.length) throw new Error('oob');
    var l = i, bi = 0, bu = null;
    for (;;) {
        bu = this.buffers[bi];
        if (l < bu.length) {
            return {buf: bi, offset: l};
        } else {
            l -= bu.length;
        }
        bi++;
    }
};

Buffers.prototype.get = function get (i) {
    var pos = this.pos(i);
    if(this.isNotANodeBuffer) return this.buffers[pos.buf][pos.offset]
    else return this.buffers[pos.buf].get(pos.offset);
};

Buffers.prototype.set = function set (i, b) {
    var pos = this.pos(i);
    if(this.isNotANodeBuffer) return this.buffers[pos.buf][pos.offset] = b
    else return this.buffers[pos.buf].set(pos.offset, b);
};

Buffers.prototype.indexOf = function (needle, offset) {
    if ("string" === typeof needle) {
        needle = new Buffer(needle);
    } else if (needle instanceof Buffer) {
        // already a buffer
    } else {
        throw new Error('Invalid type for a search string');
    }

    if (!needle.length) {
        return 0;
    }

    if (!this.length) {
        return -1;
    }

    var i = 0, j = 0, match = 0, mstart, pos = 0;

    // start search from a particular point in the virtual buffer
    if (offset) {
        var p = this.pos(offset);
        i = p.buf;
        j = p.offset;
        pos = offset;
    }

    // for each character in virtual buffer
    for (;;) {
        while (j >= this.buffers[i].length) {
            j = 0;
            i++;

            if (i >= this.buffers.length) {
                // search string not found
                return -1;
            }
        }

        var char = this.buffers[i][j];

        if (char == needle[match]) {
            // keep track where match started
            if (match == 0) {
                mstart = {
                    i: i,
                    j: j,
                    pos: pos
                };
            }
            match++;
            if (match == needle.length) {
                // full match
                return mstart.pos;
            }
        } else if (match != 0) {
            // a partial match ended, go back to match starting position
            // this will continue the search at the next character
            i = mstart.i;
            j = mstart.j;
            pos = mstart.pos;
            match = 0;
        }

        j++;
        pos++;
    }
};

Buffers.prototype.toBuffer = function() {
    return this.slice();
}

Buffers.prototype.toString = function(encoding, start, end) {
    return this.slice(start, end).toString(encoding);
}

})()
},{}],13:[function(require,module,exports){
(function(process,Buffer){var url = require('url');
var http = require('http');
var https = require('https');
var through = require('through');
var duplexer = require('duplexer');
var Stream = require('stream');

module.exports = hyperquest;

function bind (obj, fn) {
  var args = Array.prototype.slice.call(arguments, 2);
  return function () {
    args = args.concat(Array.prototype.slice.call(arguments));
    return fn.apply(obj, args);
  }
}

function hyperquest (uri, opts, cb, extra) {
    if (typeof uri === 'object') {
        cb = opts;
        opts = uri;
        uri = undefined;
    }
    if (typeof opts === 'function') {
      cb = opts;
      opts = undefined;
    }
    if (!opts) opts = {};
    if (uri !== undefined) opts.uri = uri;
    if (extra) opts.method = extra.method;
    
    var req = new Req(opts);
    var ws = req.duplex && through();
    if (ws) ws.pause();
    var rs = through();
    
    var dup = req.duplex ? duplexer(ws, rs) : rs;
    if (!req.duplex) {
        rs.writable = false;
    }
    dup.request = req;
    dup.setHeader = bind(req, req.setHeader);
    dup.setLocation = bind(req, req.setLocation);
    
    var closed = false;
    dup.on('close', function () { closed = true });
    
    process.nextTick(function () {
        if (closed) return;
        dup.on('close', function () { r.destroy() });
        
        var r = req._send();
        r.on('error', bind(dup, dup.emit, 'error'));
        
        r.on('response', function (res) {
            dup.response = res;
            dup.emit('response', res);
            if (req.duplex) res.pipe(rs)
            else {
                res.on('data', function (buf) { rs.queue(buf) });
                res.on('end', function () { rs.queue(null) });
            }
        });
        
        if (req.duplex) {
            ws.pipe(r);
            ws.resume();
        }
        else r.end();
    });
    
    if (cb) {
        dup.on('error', cb);
        dup.on('response', bind(dup, cb, null));
    }
    return dup;
}

hyperquest.get = hyperquest;

hyperquest.post = function (uri, opts, cb) {
    return hyperquest(uri, opts, cb, { method: 'POST' });
};

hyperquest.put = function (uri, opts, cb) {
    return hyperquest(uri, opts, cb, { method: 'PUT' });
};

hyperquest['delete'] = function (uri, opts, cb) {
    return hyperquest(uri, opts, cb, { method: 'DELETE' });
};

function Req (opts) {
    this.headers = opts.headers || {};
    
    var method = (opts.method || 'GET').toUpperCase();
    this.method = method;
    this.duplex = !(method === 'GET' || method === 'DELETE');
    this.auth = opts.auth;
    
    if (opts.uri) this.setLocation(opts.uri);
}

Req.prototype._send = function () {
    this._sent = true;
    
    var headers = this.headers || {};
    var u = url.parse(this.uri);
    var au = u.auth || this.auth;
    if (au) {
        headers.authorization = 'Basic ' + Buffer(au).toString('base64');
    }
    
    var interface = (u.protocol === 'https:') ? https : http;
    var req = interface.request({
        method: this.method,
        host: u.hostname,
        port: Number(u.port),
        path: u.path,
        agent: false,
        headers: headers
    });
    
    if (req.setTimeout) req.setTimeout(Math.pow(2, 32) * 1000);
    return req;
};

Req.prototype.setHeader = function (key, value) {
    if (this._sent) throw new Error('request already sent');
    this.headers[key] = value;
    return this;
};

Req.prototype.setLocation = function (uri) {
    this.uri = uri;
    return this;
};

})(require("__browserify_process"),require("__browserify_Buffer").Buffer)
},{"__browserify_Buffer":48,"__browserify_process":49,"duplexer":14,"http":44,"https":32,"stream":34,"through":15,"url":35}],14:[function(require,module,exports){
var Stream = require("stream")
    , writeMethods = ["write", "end", "destroy"]
    , readMethods = ["resume", "pause"]
    , readEvents = ["data", "close"]
    , slice = Array.prototype.slice

module.exports = duplex

function forEach (arr, fn) {
  if (arr.forEach) return arr.forEach(fn)
  for (var i = 0; i < arr.length; i++) fn(arr[i], i)
}

function duplex(writer, reader) {
    var stream = new Stream()
        , ended = false

    forEach(writeMethods, proxyWriter)

    forEach(readMethods, proxyReader)

    forEach(readEvents, proxyStream)

    reader.on("end", handleEnd)

    writer.on("drain", function() {
      stream.emit("drain")
    })

    writer.on("error", reemit)
    reader.on("error", reemit)

    stream.writable = writer.writable
    stream.readable = reader.readable

    return stream

    function proxyWriter(methodName) {
        stream[methodName] = method

        function method() {
            return writer[methodName].apply(writer, arguments)
        }
    }

    function proxyReader(methodName) {
        stream[methodName] = method

        function method() {
            stream.emit(methodName)
            var func = reader[methodName]
            if (func) {
                return func.apply(reader, arguments)
            }
            reader.emit(methodName)
        }
    }

    function proxyStream(methodName) {
        reader.on(methodName, reemit)

        function reemit() {
            var args = slice.call(arguments)
            args.unshift(methodName)
            stream.emit.apply(stream, args)
        }
    }

    function handleEnd() {
        if (ended) {
            return
        }
        ended = true
        var args = slice.call(arguments)
        args.unshift("end")
        stream.emit.apply(stream, args)
    }

    function reemit(err) {
        stream.emit("error", err)
    }
}

},{"stream":34}],15:[function(require,module,exports){
(function(process){var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)



exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end) {
  write = write || function (data) { this.queue(data) }
  end = end || function () { this.queue(null) }

  var ended = false, destroyed = false, buffer = []
  var stream = new Stream()
  stream.readable = stream.writable = true
  stream.paused = false

  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = stream.push = function (data) {
    buffer.push(data)
    drain()
    return stream
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
    return stream
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
    return stream
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    stream.emit('pause')
    return stream
  }
  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
    return stream
  }
  return stream
}


})(require("__browserify_process"))
},{"__browserify_process":49,"stream":34}],16:[function(require,module,exports){
var split = require('browser-split')
var ClassList = require('class-list')
var DataSet = require('data-set')

module.exports = h

function h() {
  var args = [].slice.call(arguments), e = null
  function item (l) {
    var r
    function parseClass (string) {
      var m = split(string, /([\.#]?[a-zA-Z0-9_-]+)/)
      forEach(m, function (v) {
        var s = v.substring(1,v.length)
        if(!v) return
        if(!e)
          e = document.createElement(v)
        else if (v[0] === '.')
          ClassList(e).add(s)
        else if (v[0] === '#')
          e.setAttribute('id', s)
      })
    }

    if(l == null)
      ;
    else if('string' === typeof l) {
      if(!e)
        parseClass(l)
      else
        e.appendChild(r = document.createTextNode(l))
    }
    else if('number' === typeof l
      || 'boolean' === typeof l
      || l instanceof Date
      || l instanceof RegExp ) {
        e.appendChild(r = document.createTextNode(l.toString()))
    }
    //there might be a better way to handle this...
    else if (isArray(l))
      forEach(l, item)
    else if(isNode(l))
      e.appendChild(r = l)
    else if(l instanceof Text)
      e.appendChild(r = l)
    else if ('object' === typeof l) {
      for (var k in l) {
        if('function' === typeof l[k]) {
          if(/^on\w+/.test(k)) {
            e.addEventListener
              ? e.addEventListener(k.substring(2), l[k])
              : e.attachEvent(k, l[k])
          } else {
            e[k] = l[k]()
            l[k](function (v) {
              e[k] = v
            })
          }
        }
        else if(k === 'style') {
          for (var s in l[k]) (function(s, v) {
            if('function' === typeof v) {
              e.style.setProperty(s, v())
              v(function (val) {
                e.style.setProperty(s, val)
              })
            } else
              e.style.setProperty(s, l[k][s])
          })(s, l[k][s])
        } else if (k.substr(0, 5) === "data-") {
          DataSet(e)[k.substr(5)] = l[k]
        } else {
          e[k] = l[k]
        }
      }
    } else if ('function' === typeof l) {
      //assume it's an observable!
      var v = l()
      e.appendChild(r = isNode(v) ? v : document.createTextNode(v))

      l(function (v) {
        if(isNode(v) && r.parentElement)
          r.parentElement.replaceChild(v, r), r = v
        else
          r.textContent = v
      })

    }

    return r
  }
  while(args.length)
    item(args.shift())

  return e
}

function isNode (el) {
  return el && el.nodeName && el.nodeType
}

function forEach (arr, fn) {
  if (arr.forEach) return arr.forEach(fn)
  for (var i = 0; i < arr.length; i++) fn(arr[i], i)
}

function isArray (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]'
}

},{"browser-split":17,"class-list":18,"data-set":19}],17:[function(require,module,exports){
(function(){/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

})()
},{}],18:[function(require,module,exports){
// contains, add, remove, toggle

module.exports = ClassList

function ClassList(elem) {
    var cl = elem.classList

    if (cl) {
        return cl
    }

    var classList = {
        add: add
        , remove: remove
        , contains: contains
        , toggle: toggle
        , toString: $toString
        , length: 0
        , item: item
    }

    return classList

    function add(token) {
        var list = getTokens()
        if (list.indexOf(token) > -1) {
            return
        }
        list.push(token)
        setTokens(list)
    }

    function remove(token) {
        var list = getTokens()
            , index = list.indexOf(token)

        if (index === -1) {
            return
        }

        list.splice(index, 1)
        setTokens(list)
    }

    function contains(token) {
        return getTokens().indexOf(token) > -1
    }

    function toggle(token) {
        if (contains(token)) {
            remove(token)
            return false
        } else {
            add(token)
            return true
        }
    }

    function $toString() {
        return elem.className
    }

    function item(index) {
        var tokens = getTokens()
        return tokens[index] || null
    }

    function getTokens() {
        var className = elem.className

        return filter(className.split(" "), isTruthy)
    }

    function setTokens(list) {
        var length = list.length

        elem.className = list.join(" ")
        classList.length = length

        for (var i = 0; i < list.length; i++) {
            classList[i] = list[i]
        }

        delete list[length]
    }
}

function filter (arr, fn) {
    var ret = []
    for (var i = 0; i < arr.length; i++) {
        if (fn(arr[i])) ret.push(arr[i])
    }
    return ret
}

function isTruthy(value) {
    return !!value
}

},{}],19:[function(require,module,exports){
var Weakmap = require("weakmap")
var Individual = require("individual")

var datasetMap = Individual("__DATA_SET_WEAKMAP", Weakmap())

module.exports = DataSet

function DataSet(elem) {
    if (elem.dataset) {
        return elem.dataset
    }

    var hash = datasetMap.get(elem)

    if (!hash) {
        hash = createHash(elem)
        datasetMap.set(elem, hash)
    }

    return hash
}

function createHash(elem) {
    var attributes = elem.attributes
    var hash = {}

    if (attributes === null || attributes === undefined) {
        return hash
    }

    for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i]

        if (attr.name.substr(0,5) !== "data-") {
            continue
        }

        hash[attr.name.substr(5)] = attr.value
    }

    return hash
}

},{"individual":20,"weakmap":22}],20:[function(require,module,exports){
(function(){var root = require("global")

module.exports = Individual

function Individual(key, value) {
    if (root[key]) {
        return root[key]
    }

    Object.defineProperty(root, key, {
        value: value
        , configurable: true
    })

    return value
}

})()
},{"global":21}],21:[function(require,module,exports){
(function(global){/*global window, global*/
if (typeof global !== "undefined") {
    module.exports = global
} else if (typeof window !== "undefined") {
    module.exports = window
}

})(self)
},{}],22:[function(require,module,exports){
(function(){/* (The MIT License)
 *
 * Copyright (c) 2012 Brandon Benvie <http://bbenvie.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the 'Software'), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included with all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

// Original WeakMap implementation by Gozala @ https://gist.github.com/1269991
// Updated and bugfixed by Raynos @ https://gist.github.com/1638059
// Expanded by Benvie @ https://github.com/Benvie/harmony-collections

void function(global, undefined_, undefined){
  var getProps = Object.getOwnPropertyNames,
      defProp  = Object.defineProperty,
      toSource = Function.prototype.toString,
      create   = Object.create,
      hasOwn   = Object.prototype.hasOwnProperty,
      funcName = /^\n?function\s?(\w*)?_?\(/;


  function define(object, key, value){
    if (typeof key === 'function') {
      value = key;
      key = nameOf(value).replace(/_$/, '');
    }
    return defProp(object, key, { configurable: true, writable: true, value: value });
  }

  function nameOf(func){
    return typeof func !== 'function'
          ? '' : 'name' in func
          ? func.name : toSource.call(func).match(funcName)[1];
  }

  // ############
  // ### Data ###
  // ############

  var Data = (function(){
    var dataDesc = { value: { writable: true, value: undefined } },
        datalock = 'return function(k){if(k===s)return l}',
        uids     = create(null),

        createUID = function(){
          var key = Math.random().toString(36).slice(2);
          return key in uids ? createUID() : uids[key] = key;
        },

        globalID = createUID(),

        storage = function(obj){
          if (hasOwn.call(obj, globalID))
            return obj[globalID];

          if (!Object.isExtensible(obj))
            throw new TypeError("Object must be extensible");

          var store = create(null);
          defProp(obj, globalID, { value: store });
          return store;
        };

    // common per-object storage area made visible by patching getOwnPropertyNames'
    define(Object, function getOwnPropertyNames(obj){
      var props = getProps(obj);
      if (hasOwn.call(obj, globalID))
        props.splice(props.indexOf(globalID), 1);
      return props;
    });

    function Data(){
      var puid = createUID(),
          secret = {};

      this.unlock = function(obj){
        var store = storage(obj);
        if (hasOwn.call(store, puid))
          return store[puid](secret);

        var data = create(null, dataDesc);
        defProp(store, puid, {
          value: new Function('s', 'l', datalock)(secret, data)
        });
        return data;
      }
    }

    define(Data.prototype, function get(o){ return this.unlock(o).value });
    define(Data.prototype, function set(o, v){ this.unlock(o).value = v });

    return Data;
  }());


  var WM = (function(data){
    var validate = function(key){
      if (key == null || typeof key !== 'object' && typeof key !== 'function')
        throw new TypeError("Invalid WeakMap key");
    }

    var wrap = function(collection, value){
      var store = data.unlock(collection);
      if (store.value)
        throw new TypeError("Object is already a WeakMap");
      store.value = value;
    }

    var unwrap = function(collection){
      var storage = data.unlock(collection).value;
      if (!storage)
        throw new TypeError("WeakMap is not generic");
      return storage;
    }

    var initialize = function(weakmap, iterable){
      if (iterable !== null && typeof iterable === 'object' && typeof iterable.forEach === 'function') {
        iterable.forEach(function(item, i){
          if (item instanceof Array && item.length === 2)
            set.call(weakmap, iterable[i][0], iterable[i][1]);
        });
      }
    }


    function WeakMap(iterable){
      if (this === global || this == null || this === WeakMap.prototype)
        return new WeakMap(iterable);

      wrap(this, new Data);
      initialize(this, iterable);
    }

    function get(key){
      validate(key);
      var value = unwrap(this).get(key);
      return value === undefined_ ? undefined : value;
    }

    function set(key, value){
      validate(key);
      // store a token for explicit undefined so that "has" works correctly
      unwrap(this).set(key, value === undefined ? undefined_ : value);
    }

    function has(key){
      validate(key);
      return unwrap(this).get(key) !== undefined;
    }

    function delete_(key){
      validate(key);
      var data = unwrap(this),
          had = data.get(key) !== undefined;
      data.set(key, undefined);
      return had;
    }

    function toString(){
      unwrap(this);
      return '[object WeakMap]';
    }

    try {
      var src = ('return '+delete_).replace('e_', '\\u0065'),
          del = new Function('unwrap', 'validate', src)(unwrap, validate);
    } catch (e) {
      var del = delete_;
    }

    var src = (''+Object).split('Object');
    var stringifier = function toString(){
      return src[0] + nameOf(this) + src[1];
    };

    define(stringifier, stringifier);

    var prep = { __proto__: [] } instanceof Array
      ? function(f){ f.__proto__ = stringifier }
      : function(f){ define(f, stringifier) };

    prep(WeakMap);

    [toString, get, set, has, del].forEach(function(method){
      define(WeakMap.prototype, method);
      prep(method);
    });

    return WeakMap;
  }(new Data));

  var defaultCreator = Object.create
    ? function(){ return Object.create(null) }
    : function(){ return {} };

  function createStorage(creator){
    var weakmap = new WM;
    creator || (creator = defaultCreator);

    function storage(object, value){
      if (value || arguments.length === 2) {
        weakmap.set(object, value);
      } else {
        value = weakmap.get(object);
        if (value === undefined) {
          value = creator(object);
          weakmap.set(object, value);
        }
      }
      return value;
    }

    return storage;
  }


  if (typeof module !== 'undefined') {
    module.exports = WM;
  } else if (typeof exports !== 'undefined') {
    exports.WeakMap = WM;
  } else if (!('WeakMap' in global)) {
    global.WeakMap = WM;
  }

  WM.createStorage = createStorage;
  if (global.WeakMap)
    global.WeakMap.createStorage = createStorage;
}((0, eval)('this'));

})()
},{}],23:[function(require,module,exports){
module.exports = inherits

function inherits (c, p, proto) {
  proto = proto || {}
  var e = {}
  ;[c.prototype, proto].forEach(function (s) {
    Object.getOwnPropertyNames(s).forEach(function (k) {
      e[k] = Object.getOwnPropertyDescriptor(s, k)
    })
  })
  c.prototype = Object.create(p.prototype, e)
  c.super = p
}

//function Child () {
//  Child.super.call(this)
//  console.error([this
//                ,this.constructor
//                ,this.constructor === Child
//                ,this.constructor.super === Parent
//                ,Object.getPrototypeOf(this) === Child.prototype
//                ,Object.getPrototypeOf(Object.getPrototypeOf(this))
//                 === Parent.prototype
//                ,this instanceof Child
//                ,this instanceof Parent])
//}
//function Parent () {}
//inherits(Child, Parent)
//new Child

},{}],24:[function(require,module,exports){
module.exports = function(node, fn){
	
	node.addEventListener('mouseover', onHover, true)
	
	node.addEventListener('mouseout', onExit, true)
	
	var node = node;
	
	var position = [0, 0];
	
	function mouseMove(evt){
	
		fn(evt, node, position, false, false)
	
	};
	
	function onExit(evt){
		
		window.removeEventListener('mousemove', mouseMove, true)
		
		fn(evt, node, position, false, true)
	};
	
	
	function onHover(evt){
		
		window.addEventListener('mousemove', mouseMove, true);
		
		position = findPos(evt.target);

		fn(evt, node, position, true, false)

		function findPos(obj) {

				var curleft = curtop = 0;

				if (obj.offsetParent) {

					do {

								curleft += obj.offsetLeft;

								curtop += obj.offsetTop;

							} 

					while (obj = obj.offsetParent);

					return [curleft,curtop];

				};
			};
	};
	
}
},{}],25:[function(require,module,exports){
(function(Buffer){//     uuid.js
//
//     (c) 2010-2012 Robert Kieffer
//     MIT License
//     https://github.com/broofa/node-uuid
(function() {
  var _global = this;

  // Unique ID creation requires a high quality random # generator.  We feature
  // detect to determine the best RNG source, normalizing to a function that
  // returns 128-bits of randomness, since that's what's usually required
  var _rng;

  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
  //
  // Moderately fast, high quality
  if (typeof(require) == 'function') {
    try {
      var _rb = require('crypto').randomBytes;
      _rng = _rb && function() {return _rb(16);};
    } catch(e) {}
  }

  if (!_rng && _global.crypto && crypto.getRandomValues) {
    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
    //
    // Moderately fast, high quality
    var _rnds8 = new Uint8Array(16);
    _rng = function whatwgRNG() {
      crypto.getRandomValues(_rnds8);
      return _rnds8;
    };
  }

  if (!_rng) {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var  _rnds = new Array(16);
    _rng = function() {
      for (var i = 0, r; i < 16; i++) {
        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
      }

      return _rnds;
    };
  }

  // Buffer class to use
  var BufferClass = typeof(Buffer) == 'function' ? Buffer : Array;

  // Maps for number <-> hex string conversion
  var _byteToHex = [];
  var _hexToByte = {};
  for (var i = 0; i < 256; i++) {
    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
    _hexToByte[_byteToHex[i]] = i;
  }

  // **`parse()` - Parse a UUID into it's component bytes**
  function parse(s, buf, offset) {
    var i = (buf && offset) || 0, ii = 0;

    buf = buf || [];
    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
      if (ii < 16) { // Don't overflow!
        buf[i + ii++] = _hexToByte[oct];
      }
    });

    // Zero out remaining bytes if string was short
    while (ii < 16) {
      buf[i + ii++] = 0;
    }

    return buf;
  }

  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
  function unparse(buf, offset) {
    var i = offset || 0, bth = _byteToHex;
    return  bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] + '-' +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]] +
            bth[buf[i++]] + bth[buf[i++]];
  }

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  // random #'s we need to init node and clockseq
  var _seedBytes = _rng();

  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
  var _nodeId = [
    _seedBytes[0] | 0x01,
    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
  ];

  // Per 4.2.2, randomize (14 bit) clockseq
  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

  // Previous uuid creation time
  var _lastMSecs = 0, _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};

    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs != null ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq == null) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    var node = options.node || _nodeId;
    for (var n = 0; n < 6; n++) {
      b[i + n] = node[n];
    }

    return buf ? buf : unparse(b);
  }

  // **`v4()` - Generate random UUID**

  // See https://github.com/broofa/node-uuid for API details
  function v4(options, buf, offset) {
    // Deprecated - 'format' argument, as supported in v1.2
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options == 'binary' ? new BufferClass(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || _rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ii++) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || unparse(rnds);
  }

  // Export public API
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  uuid.parse = parse;
  uuid.unparse = unparse;
  uuid.BufferClass = BufferClass;

  if (_global.define && define.amd) {
    // Publish as AMD module
    define(function() {return uuid;});
  } else if (typeof(module) != 'undefined' && module.exports) {
    // Publish as node.js module
    module.exports = uuid;
  } else {
    // Publish as global (in browsers)
    var _previousRoot = _global.uuid;

    // **`noConflict()` - (browser only) to reset global 'uuid' var**
    uuid.noConflict = function() {
      _global.uuid = _previousRoot;
      return uuid;
    };

    _global.uuid = uuid;
  }
}());

})(require("__browserify_Buffer").Buffer)
},{"__browserify_Buffer":48,"crypto":40}],26:[function(require,module,exports){
var touchy = require('./touchy.js')
,   uuid = require('node-uuid')
;

module.exports = (function(){

  if(window._touch) return window._touch;

  else return new touch()

}());

function touch(){

  window._touch = this;

  this.elements = [];

  this.touchy = touchy(window, touchtest);

};

touch.prototype.start = touch.prototype.listen = function(el){

    if(!el.touch_id) el.touch_id = ('function' == typeof uuid.v1) ? uuid.v1() : uuid();

    this.elements.push(el);

    el.touch = 1;

};

touch.prototype.register = function(el){

    if(!el.touch_id) el.touch_id = uuid.v1();

    this.elements.push(el);

    el.touch = 0; // needs to be started

};


function touchtest(hand, finger){
	
	var lastPoint = [], allPoints = [];

  finger.on('start', function(point){
	
		var element = document.elementFromPoint(point.x, point.y);
			
    var el = search(element);

    if(el){
	
		  lastPoint = [point.x, point.y]
		
		  allPoints.push(lastPoint.slice(0))

      this.is = true;

      this.el = el;

      this.event.id = this.id;

      var evt = new CustomEvent('touchdown', { cancelable: true, bubbles: false, detail : point});
      
      el.dispatchEvent(evt);

    }

  });
 
  finger.on('move', function(point){

    if(this.is){
	
	
      var evt = new CustomEvent('deltavector', { cancelable: true, bubbles: false, detail : point});

			evt.detail.delta = [point.x - lastPoint[0], point.y - lastPoint[1]];

			evt.detail.vector = [point.x, point.y];

			evt.detail.allPoints = allPoints;
		
			evt.detail.lastPoint = lastPoint.splice(0)
						
			lastPoint = [point.x, point.y]
		
		  allPoints.push(lastPoint.slice())

      this.el.dispatchEvent(evt);

    }

  });

  finger.on('end', function(point){
 
    if(this.is){

      var evt = new CustomEvent('liftoff', { cancelable: true, bubbles: false, detail : point});

			evt.detail.delta = [point.x - lastPoint[0], point.y - lastPoint[1]];

			evt.detail.vector = [point.x, point.y];

			evt.detail.allPoints = allPoints;
		
			evt.detail.lastPoint = lastPoint.splice(0)
						
			lastPoint = [point.x, point.y]
		
		  allPoints.push(lastPoint.slice())

      this.el.dispatchEvent(evt);

    }

  });

};

function search(el){

  return scan(el)

  function scan(el){

    if(!el) return false;
  
    var x = window._touch.elements.reduce(function(val, i){	

      if(i.touch_id == el.touch_id && i.touch){

        val = i

      };

      return val

    }, false)

    return x || scan(el.parentElement)

  }

};


touch.prototype.pause = function(el){

  el.touch = 0

};

touch.prototype.resume = function(el){

  el.touch = 1

};

touch.prototype.end = function(el){

  delete el.touch

  delete el.touch_id

};

touch.prototype.handleMouse = function(x){

  if(Modernizr) Modernizr.touch = true;

  this.touchy.handleMouse(x);

};

},{"./touchy.js":27,"node-uuid":25}],27:[function(require,module,exports){
/* Modernizr 2.6.2 (Custom Build) | MIT & BSD
 * Build: http://modernizr.com/download/#-touch-teststyles-prefixes
 */
var Modernizr=function(a,b,c){function v(a){i.cssText=a}function w(a,b){return v(l.join(a+";")+(b||""))}function x(a,b){return typeof a===b}function y(a,b){return!!~(""+a).indexOf(b)}function z(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:x(f,"function")?f.bind(d||b):f}return!1}var d="2.6.2",e={},f=b.documentElement,g="modernizr",h=b.createElement(g),i=h.style,j,k={}.toString,l=" -webkit- -moz- -o- -ms- ".split(" "),m={},n={},o={},p=[],q=p.slice,r,s=function(a,c,d,e){var h,i,j,k,l=b.createElement("div"),m=b.body,n=m||b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:g+(d+1),l.appendChild(j);return h=["&#173;",'<style id="s',g,'">',a,"</style>"].join(""),l.id=g,(m?l:n).innerHTML+=h,n.appendChild(l),m||(n.style.background="",n.style.overflow="hidden",k=f.style.overflow,f.style.overflow="hidden",f.appendChild(n)),i=c(l,a),m?l.parentNode.removeChild(l):(n.parentNode.removeChild(n),f.style.overflow=k),!!i},t={}.hasOwnProperty,u;!x(t,"undefined")&&!x(t.call,"undefined")?u=function(a,b){return t.call(a,b)}:u=function(a,b){return b in a&&x(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=q.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(q.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(q.call(arguments)))};return e}),m.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&&b instanceof DocumentTouch?c=!0:s(["@media (",l.join("touch-enabled),("),g,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c};for(var A in m)u(m,A)&&(r=A.toLowerCase(),e[r]=m[A](),p.push((e[r]?"":"no-")+r));return e.addTest=function(a,b){if(typeof a=="object")for(var d in a)u(a,d)&&e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,typeof enableClasses!="undefined"&&enableClasses&&(f.className+=" "+(b?"":"no-")+a),e[a]=b}return e},v(""),h=j=null,e._version=d,e._prefixes=l,e.testStyles=s,e}(window,window.document);

/*
	Touchy.js
	Socket-style finger management for touch events

	Jairaj Sethi
	http://creativecommons.org/licenses/by/3.0/
*/



/* Make sure I can itereate through arrays */
var forEach = function () {
    if (Array.prototype.forEach) {
	return function (arr, callback, self) {
	    Array.prototype.forEach.call(arr, callback, self);
	};
    }

    else {
	return function (arr, callback, self) {
	    for (var i=0, len=arr.length; i<len; i++) {
		if (i in arr) {
		    callback.call(self, arr[i], i, arr);
		}
	    }
	};
    }
}();

/* Make sure I can search through arrays */
var indexOf = function () {
    if (Array.prototype.indexOf) {
	return function (arr, item, startIndex) {
	    return Array.prototype.indexOf.call(arr, item, startIndex);
	};
    }

    else {
	return function (arr, item, startIndex) {
	    for (var i=startIndex || 0, len=arr.length; i<len; i++) {
		if ((i in arr) && (arr[i] === item)) {
		    return i;
		}
	    }

	    return -1;
	};
    }
}();

/* Make sure I can map arrays */
var map = function () {
    if (Array.prototype.map) {
	return function (arr, callback, self) {
	    return Array.prototype.map.call(arr, callback, self);
	};
    }

    else {
	return function (arr, callback, self) {
	    var len = arr.length,
	    mapArr = new Array(len);

	    for (var i=0; i<len; i++) {
		if (i in arr) {
		    mapArr[i] = callback.call(self, arr[i], i, arr);
		}
	    }

	    return mapArr;
	};
    }
}();

/* Make sure I can filter arrays */
var filter = function () {
    if (Array.prototype.filter) {
	return function (arr, func, self) {
	    return Array.prototype.filter.call(arr, func, self);
	};
    }

    else {
	return function (arr, func, self) {
	    var filterArr = [];

	    for (var val, i=0, len=arr.length; i<len; i++) {
		val = arr[i];

		if ((i in arr) && func.call(self, val, i, arr)) {
		    filterArr.push(val);
		}
	    }

	    return filterArr;
	};
    }
}();

/* Bind event listener to element */
var boundEvents = {};

function bind (elem, eventName, callback) {
    if (elem.addEventListener) {
	elem.addEventListener(eventName, callback, false);
    }

    else if (elem.attachEvent) {
	var eID = elem.attachEvent('on'+eventName, callback);
	boundEvents[eID] = { name: eventName, callback: callback };
    }
}

function unbind (elem, eventName, callback) {
    if (elem.removeEventListener) {
	elem.removeEventListener(eventName, callback, false);
    }

    else if (elem.detachEvent) {
	for (var eID in boundEvents) {
	    if ((boundEvents[eID].name === eventName) &&
		(boundEvents[eID].callback === callback)) {
		elem.detachEvent(eID);
		delete boundEvents[eID];
	    }
	}
    }
}

/* Simple inheritance */
function inheritsFrom (func, parent) {
    var proto = func.prototype,
    superProto = parent.prototype,
    oldSuper;

    for (var prop in superProto) {
	proto[prop] = superProto[prop];
    }

    function superMethod (name) {
	var args = Array.prototype.slice.call(arguments, 1);

	if ( superProto[name] ) {
	    return superProto[name].apply(this, args);
	}
    }

    if (proto._super) {
	oldSuper = proto._super;

	proto._super = function () {
	    oldSuper.call(this, arguments);
	    superMethod.call(this, arguments);
	};
    }

    else {
	proto._super = superMethod;
    }
}



/* Event bus to handle finger event listeners */
function EventBus () {
    this.onEvents = {};
    this.onceEvents = {};
}

/* Attach a handler to listen for an event */
EventBus.prototype.on = function (name, callback) {
    if ( !callback ) {
	return;
    }

    if (name in this.onEvents) {
	var index = indexOf(this.onEvents[name], callback);

	if (index != -1) {
	    return;
	}
    }

    else {
	this.onEvents[name] = [];
    }

    if (name in this.onceEvents) {
	var index = indexOf(this.onceEvents[name], callback);

	if (index != -1) {
	    this.onceEvents.splice(index, 1);
	}
    }

    this.onEvents[name].push(callback);
};

/* Attach a one-time-use handler to listen for an event */
EventBus.prototype.once = function (name, callback) {
    if ( !callback ) {
	return;
    }

    if (name in this.onceEvents) {
	var index = indexOf(this.onceEvents[name], callback);

	if (index != -1) {
	    return;
	}
    }

    else {
	this.onceEvents[name] = [];
    }

    if (name in this.onEvents) {
	var index = indexOf(this.onEvents[name], callback);

	if (index != -1) {
	    this.onEvents.splice(index, 1);
	}
    }

    this.onceEvents[name].push(callback);
};

/* Detach a handler from listening for an event */
EventBus.prototype.off = function (name, callback) {
    if ( !callback ) {
	return;
    }

    if (name in this.onEvents) {
	var index = indexOf(this.onEvents[name], callback);

	if (index != -1) {
	    this.onEvents.splice(index, 1);
	    return;
	}
    }

    if (name in this.onceEvents) {
	var index = indexOf(this.onceEvents[name], callback);

	if (index != -1) {
	    this.onceEvents.splice(index, 1);
	    return;
	}
    }
};

/* Fire an event, triggering all handlers */
EventBus.prototype.trigger = function (name) {
    var args = Array.prototype.slice.call(arguments, 1),
    callbacks = (this.onEvents[name] || []).concat(this.onceEvents[name] || []),
    callback;

    while (callback = callbacks.shift()) {
	callback.apply(this, args);
    }
};



/* Object to manage a single-finger interactions */
function Finger (id, e) {
    this._super('constructor');
    this.id        = id;
    this.lastPoint = null;
    this.event = e;
}
inheritsFrom(Finger, EventBus);



/* Object to manage multiple-finger interactions */
function Hand (ids) {
    this._super('constructor');

    this.fingers = !ids ? [] : map(ids, function (id) {
	return new Finger(id);
    });
}
inheritsFrom(Hand, EventBus);

/* Get finger by id */
Hand.prototype.get = function (id) {
    var foundFinger;

    forEach(this.fingers, function (finger) {
	if (finger.id == id) {
	    foundFinger = finger;
	}
    });

    return foundFinger;
};



/* Convert DOM touch event object to simple dictionary style object */
function domTouchToObj (touches, time, e) {
    return map(touches, function (touch) {
	return {
	    e: e,
	    id: touch.identifier,
	    x: touch.pageX,
	    y: touch.pageY,
	    time: time
	};
    });
}

function domMouseToObj (mouseEvent, mouseID) {
    return [{
	e: mouseEvent,
	id: mouseID,
	x: mouseEvent.pageX,
	y: mouseEvent.pageY,
	time: mouseEvent.timeStamp
    }];
}



/* Controller object to handle Touchy interactions on an element */
function TouchController (elem, handleMouse, settings) {
    if (typeof settings == 'undefined') {
	settings = handleMouse;
	handleMouse = false;
    }

    if (typeof settings == 'function') {
	settings = { any: settings };
    }

    for (var name in plugins) {
	if (name in settings) {
	    var updates = plugins[name](elem, settings[name]);

	    if (typeof updates == 'function') {
		updates = { any: updates };
	    }

	    for (var handlerType in updates) {
		if (handlerType in settings) {
		    settings[handlerType] = (function (handler1, handler2) {
			return function () {
			    handler1.call(this, arguments);
			    handler2.call(this, arguments);
			};
		    })(settings[handlerType], updates[handlerType]);
		}

		else {
		    settings[handlerType] = updates[handlerType];
		}
	    }
	}
    }

    this.running = false;
    this.elem = elem;
    this.settings = settings || {};
    this.mainHand = new Hand();
    this.multiHand = null;
    this.mouseID = null;

    this.start();
};

/* Start watching element for touch events */
TouchController.prototype.start = function () {
    if (this.running) {
    	return;
    }
    this.running = true;
		if(Modernizr.touch){
		  bind(this.elem, 'touchstart', this.touchstart() );
	    bind(this.elem, 'touchmove' , this.touchmove()  );
	    bind(this.elem, 'touchend'  , this.touchend()   );	
		}
		else{
		  bind(this.elem, 'mousedown' , this.mousedown() );
	    bind(this.elem, 'mouseup'   , this.mouseup()   );
	    bind(this.elem, 'mousemove' , this.mousemove() );	
		}
};

TouchController.prototype.handleMouse = function(x){

  if(x){
    bind(this.elem, 'mousedown' , this.mousedown() );
    bind(this.elem, 'mouseup'   , this.mouseup()   );
    bind(this.elem, 'mousemove' , this.mousemove() );
  }

  else{
    unbind(this.elem, 'mousedown' , this.mousedown() );
    unbind(this.elem, 'mouseup'   , this.mouseup()   );
    unbind(this.elem, 'mousemove' , this.mousemove() );
  } 
}

/* Stop watching element for touch events */
TouchController.prototype.stop = function () {
    if ( !this.running ) {
	return;
    }
    this.running = false;

    unbind(this.elem, 'touchstart', this.touchstart() );
    unbind(this.elem, 'touchmove' , this.touchmove()  );
    unbind(this.elem, 'touchend'  , this.touchend()   );

    unbind(this.elem, 'mousedown' , this.mousedown() );
    unbind(this.elem, 'mouseup'   , this.mouseup()   );
    unbind(this.elem, 'mousemove' , this.mousemove() );
};

/* Return a handler for DOM touchstart event */
TouchController.prototype.touchstart = function () {
    if ( !this._touchstart ) {
	var self = this;
	this._touchstart = function (e) {
	    var touches = domTouchToObj(e.touches, e.timeStamp),
	    changedTouches = domTouchToObj(e.changedTouches, e.timeStamp, e);

	    self.mainHandStart(changedTouches);
	    self.multiHandStart(changedTouches, touches);
	};
    }

    return this._touchstart;
};

/* Return a handler for DOM touchmove event */
TouchController.prototype.touchmove = function () {
    if ( !this._touchmove ) {
	var self = this;
	this._touchmove = function (e) {
	    var touches = domTouchToObj(e.touches, e.timeStamp),
	    changedTouches = domTouchToObj(e.changedTouches, e.timeStamp);

	    self.mainHandMove(changedTouches);
	    self.multiHandMove(changedTouches, touches);
	};
    }

    return this._touchmove;
};

/* Return a handler for DOM touchend event */
TouchController.prototype.touchend = function () {
    if ( !this._touchend ) {
	var self = this;
	this._touchend = function (e) {
	    var touches = domTouchToObj(e.touches, e.timeStamp),
	    changedTouches = domTouchToObj(e.changedTouches, e.timeStamp);

	    self.mainHandEnd(changedTouches);
	    self.multiHandEnd(changedTouches, touches);
	};
    }

    return this._touchend;
};

/* Return a handler for DOM mousedown event */
TouchController.prototype.mousedown = function () {
    if ( !this._mousedown ) {
	var self = this;
	this._mousedown = function (e) {
	    var touches;

	    if ( self.mouseID ) {
		touches = domMouseToObj(e, self.mouseID);
		self.mainHandEnd(touches);
		self.multiHandEnd(touches, touches);
		self.mouseID = null;
	    }

	    self.mouseID = Math.random() + '';

	    touches = domMouseToObj(e, self.mouseID);
	    self.mainHandStart(touches);
	    self.multiHandStart(touches, touches);
	};
    }

    return this._mousedown;
};

/* Return a handler for DOM mouseup event */
TouchController.prototype.mouseup = function () {
    if ( !this._mouseup ) {
	var self = this;
	this._mouseup = function (e) {
	    var touches;

	    if ( self.mouseID ) {
		touches = domMouseToObj(e, self.mouseID);
		self.mainHandEnd(touches);
		self.multiHandEnd(touches, touches);
		self.mouseID = null;
	    }
	};
    }

    return this._mouseup;
};

/* Return a handler for DOM mousemove event */
TouchController.prototype.mousemove = function () {
    if ( !this._mousemove ) {
	var self = this;
	this._mousemove = function (e) {
	    var touches;

	    if ( self.mouseID ) {
		touches = domMouseToObj(e, self.mouseID);
		self.mainHandMove(touches);
		self.multiHandMove(touches, touches);
	    }
	};
    }

    return this._mousemove;
};

/* Handle the start of an individual finger interaction */
TouchController.prototype.mainHandStart = function (changedTouches) {
    var self = this,
    newFingers = [];

    forEach(changedTouches, function (touch) {
	var finger = new Finger(touch.id, touch.e);
	finger.lastPoint = touch;
	newFingers.push([ finger, touch ]);
	self.mainHand.fingers.push(finger);
    });

    forEach(newFingers, function (data) {
	self.settings.any && self.settings.any.call(self, self.mainHand, data[0]);
	data[0].trigger('start', data[1]);
    });

    self.mainHand.trigger('start', changedTouches);
};

/* Handle the movement of an individual finger interaction */
TouchController.prototype.mainHandMove = function (changedTouches) {
    var self = this,
    movedFingers = [];

    forEach(changedTouches, function (touch) {
	var finger = self.mainHand.get(touch.id);

	if ( !finger ) {
	    return;
	}

	finger.lastPoint = touch;
	movedFingers.push([ finger, touch ]);
    });

    forEach(movedFingers, function (data) {
	data[0].trigger('move', data[1]);
    });

    self.mainHand.trigger('move', changedTouches);
};

/* Handle the end of an individual finger interaction */
TouchController.prototype.mainHandEnd = function (changedTouches) {
    var self = this,
    endFingers = [];

    forEach(changedTouches, function (touch) {
	var finger = self.mainHand.get(touch.id),
	index;

	if ( !finger ) {
	    return;
	}

	finger.lastPoint = touch;
	endFingers.push([ finger, touch ]);

	index = indexOf(self.mainHand.fingers, finger);
	self.mainHand.fingers.splice(index, 1);
    });

    forEach(endFingers, function (data) {
	data[0].trigger('end', data[1]);
    });

    self.mainHand.trigger('end', changedTouches);
};

/* Handle the start of a multi-touch interaction */
TouchController.prototype.multiHandStart = function (changedTouches, touches) {
    this.multiHandDestroy();
    this.multiHandRestart(touches);
};

/* Handle the movement of a multi-touch interaction */
TouchController.prototype.multiHandMove = function (changedTouches, touches) {
    var self = this,
    movedFingers = [];

    forEach(changedTouches, function (touch) {
	var finger = self.multiHand.get(touch.id);

	if( !finger ) {
	    return;
	}

	finger.lastPoint = touch;
	movedFingers.push([ finger, touch ]);
    });

    forEach(movedFingers, function (data) {
	data[0].trigger('move', data[1]);
    });

    self.multiHand.trigger('move', changedTouches);
};

/* Handle the end of a multi-touch interaction */
TouchController.prototype.multiHandEnd = function (changedTouches, touches) {
    this.multiHandDestroy();

    var remainingTouches = filter(touches, function (touch) {
	var unChanged = true;

	forEach(changedTouches, function (changedTouch) {
	    if (changedTouch.id == touch.id) {
		unChanged = false;
	    }
	});

	return unChanged;
    });

    this.multiHandRestart(remainingTouches);
};

/* Create a new hand based on the current touches on the screen */
TouchController.prototype.multiHandRestart = function (touches) {
    var self = this;

    if (touches.length == 0) {
	return;
    }

    self.multiHand = new Hand();
    var newFingers = [];

    forEach(touches, function (touch) {
	var finger = new Finger(touch.id);

	finger.lastPoint = touch;
	newFingers.push([ finger, touch ]);
	self.multiHand.fingers.push(finger);
    });

    var func = self.settings[ {
	1: 'one',
	2: 'two',
	3: 'three',
	4: 'four',
	5: 'five'
    }[ self.multiHand.fingers.length ] ];

    func && func.apply(self, [ self.multiHand ].concat( self.multiHand.fingers ));

    forEach(newFingers, function (data) {
	data[0].trigger('start', data[1]);
    });

    self.multiHand.trigger('start', touches);
};

/* Destroy the current hand regardless of fingers on the screen */
TouchController.prototype.multiHandDestroy = function () {
    if ( !this.multiHand ) {
	return;
    }

    var points = [];

    forEach(this.multiHand.fingers, function (finger) {
	var point = finger.lastPoint;
	points.push(point);
	finger.trigger('end', point);
    });

    this.multiHand.trigger('end', points);

    this.multiHand = null;
};

/* Socket-style finger management for multi-touch events */
function Touchy (elem, handleMouse, settings) {
    return new TouchController(elem, handleMouse, settings);
}

/* Plugin support for custom touch handling */
var plugins = {};
Touchy.plugin = function (name, callback) {
    if (name in plugins) {
	throw 'Touchy: ' + name + ' plugin already defined';
    }

    plugins[name] = callback;
};



/* Prevent window movement (iOS fix) */
var preventDefault = function (e) { e.preventDefault() };

Touchy.stopWindowBounce = function () {
    bind(window, 'touchmove', preventDefault);
};

Touchy.startWindowBounce = function () {
    unbind(window, 'touchmove', preventDefault);
};

module.exports = Touchy;

},{}],28:[function(require,module,exports){
module.exports = function(str){
	
	var blob = new Blob([str], {type: "text\/javascript"});
	
	var worker = new Worker(window.URL.createObjectURL(blob))
	
	return worker;
	
}
},{}],29:[function(require,module,exports){
(function(){// UTILITY
var util = require('util');
var Buffer = require("buffer").Buffer;
var pSlice = Array.prototype.slice;

function objectKeys(object) {
  if (Object.keys) return Object.keys(object);
  var result = [];
  for (var name in object) {
    if (Object.prototype.hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.message = options.message;
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
};
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (value === undefined) {
    return '' + value;
  }
  if (typeof value === 'number' && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (typeof value === 'function' || value instanceof RegExp) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (typeof s == 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

assert.AssertionError.prototype.toString = function() {
  if (this.message) {
    return [this.name + ':', this.message].join(' ');
  } else {
    return [
      this.name + ':',
      truncate(JSON.stringify(this.actual, replacer), 128),
      this.operator,
      truncate(JSON.stringify(this.expected, replacer), 128)
    ].join(' ');
  }
};

// assert.AssertionError instanceof Error

assert.AssertionError.__proto__ = Error.prototype;

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!!!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (expected instanceof RegExp) {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail('Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail('Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

})()
},{"buffer":38,"util":36}],30:[function(require,module,exports){
(function(process){if (!process.EventEmitter) process.EventEmitter = function () {};

var EventEmitter = exports.EventEmitter = process.EventEmitter;
var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;
function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (x === xs[i]) return i;
    }
    return -1;
}

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._events.maxListeners = n;
};


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // Check for listener leak
    if (!this._events[type].warned) {
      var m;
      if (this._events.maxListeners !== undefined) {
        m = this._events.maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = indexOf(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

})(require("__browserify_process"))
},{"__browserify_process":49}],31:[function(require,module,exports){
// nothing to see here... no file methods for the browser

},{}],32:[function(require,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    return http.request.call(this, params, cb);
}
},{"http":44}],33:[function(require,module,exports){

/**
 * Object#toString() ref for stringify().
 */

var toString = Object.prototype.toString;

/**
 * Array#indexOf shim.
 */

var indexOf = typeof Array.prototype.indexOf === 'function'
  ? function(arr, el) { return arr.indexOf(el); }
  : function(arr, el) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === el) return i;
      }
      return -1;
    };

/**
 * Array.isArray shim.
 */

var isArray = Array.isArray || function(arr) {
  return toString.call(arr) == '[object Array]';
};

/**
 * Object.keys shim.
 */

var objectKeys = Object.keys || function(obj) {
  var ret = [];
  for (var key in obj) ret.push(key);
  return ret;
};

/**
 * Array#forEach shim.
 */

var forEach = typeof Array.prototype.forEach === 'function'
  ? function(arr, fn) { return arr.forEach(fn); }
  : function(arr, fn) {
      for (var i = 0; i < arr.length; i++) fn(arr[i]);
    };

/**
 * Array#reduce shim.
 */

var reduce = function(arr, fn, initial) {
  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
  var res = initial;
  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
  return res;
};

/**
 * Cache non-integer test regexp.
 */

var isint = /^[0-9]+$/;

function promote(parent, key) {
  if (parent[key].length == 0) return parent[key] = {};
  var t = {};
  for (var i in parent[key]) t[i] = parent[key][i];
  parent[key] = t;
  return t;
}

function parse(parts, parent, key, val) {
  var part = parts.shift();
  // end
  if (!part) {
    if (isArray(parent[key])) {
      parent[key].push(val);
    } else if ('object' == typeof parent[key]) {
      parent[key] = val;
    } else if ('undefined' == typeof parent[key]) {
      parent[key] = val;
    } else {
      parent[key] = [parent[key], val];
    }
    // array
  } else {
    var obj = parent[key] = parent[key] || [];
    if (']' == part) {
      if (isArray(obj)) {
        if ('' != val) obj.push(val);
      } else if ('object' == typeof obj) {
        obj[objectKeys(obj).length] = val;
      } else {
        obj = parent[key] = [parent[key], val];
      }
      // prop
    } else if (~indexOf(part, ']')) {
      part = part.substr(0, part.length - 1);
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
      // key
    } else {
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
    }
  }
}

/**
 * Merge parent key/val pair.
 */

function merge(parent, key, val){
  if (~indexOf(key, ']')) {
    var parts = key.split('[')
      , len = parts.length
      , last = len - 1;
    parse(parts, parent, 'base', val);
    // optimize
  } else {
    if (!isint.test(key) && isArray(parent.base)) {
      var t = {};
      for (var k in parent.base) t[k] = parent.base[k];
      parent.base = t;
    }
    set(parent.base, key, val);
  }

  return parent;
}

/**
 * Parse the given obj.
 */

function parseObject(obj){
  var ret = { base: {} };
  forEach(objectKeys(obj), function(name){
    merge(ret, name, obj[name]);
  });
  return ret.base;
}

/**
 * Parse the given str.
 */

function parseString(str){
  return reduce(String(str).split('&'), function(ret, pair){
    var eql = indexOf(pair, '=')
      , brace = lastBraceInKey(pair)
      , key = pair.substr(0, brace || eql)
      , val = pair.substr(brace || eql, pair.length)
      , val = val.substr(indexOf(val, '=') + 1, val.length);

    // ?foo
    if ('' == key) key = pair, val = '';
    if ('' == key) return ret;

    return merge(ret, decode(key), decode(val));
  }, { base: {} }).base;
}

/**
 * Parse the given query `str` or `obj`, returning an object.
 *
 * @param {String} str | {Object} obj
 * @return {Object}
 * @api public
 */

exports.parse = function(str){
  if (null == str || '' == str) return {};
  return 'object' == typeof str
    ? parseObject(str)
    : parseString(str);
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix) {
  if (isArray(obj)) {
    return stringifyArray(obj, prefix);
  } else if ('[object Object]' == toString.call(obj)) {
    return stringifyObject(obj, prefix);
  } else if ('string' == typeof obj) {
    return stringifyString(obj, prefix);
  } else {
    return prefix + '=' + encodeURIComponent(String(obj));
  }
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix) {
  if (!prefix) throw new TypeError('stringify expects an object');
  return prefix + '=' + encodeURIComponent(str);
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix) {
  var ret = [];
  if (!prefix) throw new TypeError('stringify expects an object');
  for (var i = 0; i < arr.length; i++) {
    ret.push(stringify(arr[i], prefix + '[' + i + ']'));
  }
  return ret.join('&');
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix) {
  var ret = []
    , keys = objectKeys(obj)
    , key;

  for (var i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    if (null == obj[key]) {
      ret.push(encodeURIComponent(key) + '=');
    } else {
      ret.push(stringify(obj[key], prefix
        ? prefix + '[' + encodeURIComponent(key) + ']'
        : encodeURIComponent(key)));
    }
  }

  return ret.join('&');
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val) {
  var v = obj[key];
  if (undefined === v) {
    obj[key] = val;
  } else if (isArray(v)) {
    v.push(val);
  } else {
    obj[key] = [v, val];
  }
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str) {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i) {
    c = str[i];
    if (']' == c) brace = false;
    if ('[' == c) brace = true;
    if ('=' == c && !brace) return i;
  }
}

/**
 * Decode `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function decode(str) {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  } catch (err) {
    return str;
  }
}

},{}],34:[function(require,module,exports){
var events = require('events');
var util = require('util');

function Stream() {
  events.EventEmitter.call(this);
}
util.inherits(Stream, events.EventEmitter);
module.exports = Stream;
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once, and
  // only when all sources have ended.
  if (!dest._isStdio && (!options || options.end !== false)) {
    dest._pipeCount = dest._pipeCount || 0;
    dest._pipeCount++;

    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest._pipeCount--;

    // remove the listeners
    cleanup();

    if (dest._pipeCount > 0) {
      // waiting for other incoming streams to end.
      return;
    }

    dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (this.listeners('error').length === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('end', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('end', cleanup);
  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":30,"util":36}],35:[function(require,module,exports){
var punycode = { encode : function (s) { return s } };

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

function arrayIndexOf(array, subject) {
    for (var i = 0, j = array.length; i < j; i++) {
        if(array[i] == subject) return i;
    }
    return -1;
}

var objectKeys = Object.keys || function objectKeys(object) {
    if (object !== Object(object)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in object) if (object.hasOwnProperty(key)) keys[keys.length] = key;
    return keys;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]+$/,
    // RFC 2396: characters reserved for delimiting URLs.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '~', '[', ']', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''],
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#']
      .concat(unwise).concat(autoEscape),
    nonAuthChars = ['/', '@', '?', '#'].concat(delims),
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-zA-Z0-9][a-z0-9A-Z_-]{0,62}$/,
    hostnamePartStart = /^([a-zA-Z0-9][a-z0-9A-Z_-]{0,62})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always have a path component.
    pathedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && typeof(url) === 'object' && url.href) return url;

  if (typeof url !== 'string') {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var out = {},
      rest = url;

  // cut off any delimiters.
  // This is to support parse stuff like "<http://foo.com>"
  for (var i = 0, l = rest.length; i < l; i++) {
    if (arrayIndexOf(delims, rest.charAt(i)) === -1) break;
  }
  if (i !== 0) rest = rest.substr(i);


  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    out.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      out.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    // don't enforce full RFC correctness, just be unstupid about it.

    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the first @ sign, unless some non-auth character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    var atSign = arrayIndexOf(rest, '@');
    if (atSign !== -1) {
      // there *may be* an auth
      var hasAuth = true;
      for (var i = 0, l = nonAuthChars.length; i < l; i++) {
        var index = arrayIndexOf(rest, nonAuthChars[i]);
        if (index !== -1 && index < atSign) {
          // not a valid auth.  Something like http://foo.com/bar@baz/
          hasAuth = false;
          break;
        }
      }
      if (hasAuth) {
        // pluck off the auth portion.
        out.auth = rest.substr(0, atSign);
        rest = rest.substr(atSign + 1);
      }
    }

    var firstNonHost = -1;
    for (var i = 0, l = nonHostChars.length; i < l; i++) {
      var index = arrayIndexOf(rest, nonHostChars[i]);
      if (index !== -1 &&
          (firstNonHost < 0 || index < firstNonHost)) firstNonHost = index;
    }

    if (firstNonHost !== -1) {
      out.host = rest.substr(0, firstNonHost);
      rest = rest.substr(firstNonHost);
    } else {
      out.host = rest;
      rest = '';
    }

    // pull out port.
    var p = parseHost(out.host);
    var keys = objectKeys(p);
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      out[key] = p[key];
    }

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    out.hostname = out.hostname || '';

    // validate a little.
    if (out.hostname.length > hostnameMaxLen) {
      out.hostname = '';
    } else {
      var hostparts = out.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            out.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    // hostnames are always lower case.
    out.hostname = out.hostname.toLowerCase();

    // IDNA Support: Returns a puny coded representation of "domain".
    // It only converts the part of the domain name that
    // has non ASCII characters. I.e. it dosent matter if
    // you call it with a domain that already is in ASCII.
    var domainArray = out.hostname.split('.');
    var newOut = [];
    for (var i = 0; i < domainArray.length; ++i) {
      var s = domainArray[i];
      newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
          'xn--' + punycode.encode(s) : s);
    }
    out.hostname = newOut.join('.');

    out.host = (out.hostname || '') +
        ((out.port) ? ':' + out.port : '');
    out.href += out.host;
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }

    // Now make sure that delims never appear in a url.
    var chop = rest.length;
    for (var i = 0, l = delims.length; i < l; i++) {
      var c = arrayIndexOf(rest, delims[i]);
      if (c !== -1) {
        chop = Math.min(c, chop);
      }
    }
    rest = rest.substr(0, chop);
  }


  // chop off from the tail first.
  var hash = arrayIndexOf(rest, '#');
  if (hash !== -1) {
    // got a fragment string.
    out.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = arrayIndexOf(rest, '?');
  if (qm !== -1) {
    out.search = rest.substr(qm);
    out.query = rest.substr(qm + 1);
    if (parseQueryString) {
      out.query = querystring.parse(out.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    out.search = '';
    out.query = {};
  }
  if (rest) out.pathname = rest;
  if (slashedProtocol[proto] &&
      out.hostname && !out.pathname) {
    out.pathname = '/';
  }

  //to support http.request
  if (out.pathname || out.search) {
    out.path = (out.pathname ? out.pathname : '') +
               (out.search ? out.search : '');
  }

  // finally, reconstruct the href based on what has been validated.
  out.href = urlFormat(out);
  return out;
}

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (typeof(obj) === 'string') obj = urlParse(obj);

  var auth = obj.auth || '';
  if (auth) {
    auth = auth.split('@').join('%40');
    for (var i = 0, l = nonAuthChars.length; i < l; i++) {
      var nAC = nonAuthChars[i];
      auth = auth.split(nAC).join(encodeURIComponent(nAC));
    }
    auth += '@';
  }

  var protocol = obj.protocol || '',
      host = (obj.host !== undefined) ? auth + obj.host :
          obj.hostname !== undefined ? (
              auth + obj.hostname +
              (obj.port ? ':' + obj.port : '')
          ) :
          false,
      pathname = obj.pathname || '',
      query = obj.query &&
              ((typeof obj.query === 'object' &&
                objectKeys(obj.query).length) ?
                 querystring.stringify(obj.query) :
                 '') || '',
      search = obj.search || (query && ('?' + query)) || '',
      hash = obj.hash || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (obj.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  return protocol + host + pathname + search + hash;
}

function urlResolve(source, relative) {
  return urlFormat(urlResolveObject(source, relative));
}

function urlResolveObject(source, relative) {
  if (!source) return relative;

  source = urlParse(urlFormat(source), false, true);
  relative = urlParse(urlFormat(relative), false, true);

  // hash is always overridden, no matter what.
  source.hash = relative.hash;

  if (relative.href === '') {
    source.href = urlFormat(source);
    return source;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    relative.protocol = source.protocol;
    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[relative.protocol] &&
        relative.hostname && !relative.pathname) {
      relative.path = relative.pathname = '/';
    }
    relative.href = urlFormat(relative);
    return relative;
  }

  if (relative.protocol && relative.protocol !== source.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      relative.href = urlFormat(relative);
      return relative;
    }
    source.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      relative.pathname = relPath.join('/');
    }
    source.pathname = relative.pathname;
    source.search = relative.search;
    source.query = relative.query;
    source.host = relative.host || '';
    source.auth = relative.auth;
    source.hostname = relative.hostname || relative.host;
    source.port = relative.port;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.slashes = source.slashes || relative.slashes;
    source.href = urlFormat(source);
    return source;
  }

  var isSourceAbs = (source.pathname && source.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host !== undefined ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (source.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = source.pathname && source.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = source.protocol &&
          !slashedProtocol[source.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // source.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {

    delete source.hostname;
    delete source.port;
    if (source.host) {
      if (srcPath[0] === '') srcPath[0] = source.host;
      else srcPath.unshift(source.host);
    }
    delete source.host;
    if (relative.protocol) {
      delete relative.hostname;
      delete relative.port;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      delete relative.host;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    source.host = (relative.host || relative.host === '') ?
                      relative.host : source.host;
    source.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : source.hostname;
    source.search = relative.search;
    source.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    source.search = relative.search;
    source.query = relative.query;
  } else if ('search' in relative) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      source.hostname = source.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                       source.host.split('@') : false;
      if (authInHost) {
        source.auth = authInHost.shift();
        source.host = source.hostname = authInHost.shift();
      }
    }
    source.search = relative.search;
    source.query = relative.query;
    //to support http.request
    if (source.pathname !== undefined || source.search !== undefined) {
      source.path = (source.pathname ? source.pathname : '') +
                    (source.search ? source.search : '');
    }
    source.href = urlFormat(source);
    return source;
  }
  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    delete source.pathname;
    //to support http.request
    if (!source.search) {
      source.path = '/' + source.search;
    } else {
      delete source.path;
    }
    source.href = urlFormat(source);
    return source;
  }
  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (source.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    source.hostname = source.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = source.host && arrayIndexOf(source.host, '@') > 0 ?
                     source.host.split('@') : false;
    if (authInHost) {
      source.auth = authInHost.shift();
      source.host = source.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (source.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  source.pathname = srcPath.join('/');
  //to support request.http
  if (source.pathname !== undefined || source.search !== undefined) {
    source.path = (source.pathname ? source.pathname : '') +
                  (source.search ? source.search : '');
  }
  source.auth = relative.auth || source.auth;
  source.slashes = source.slashes || relative.slashes;
  source.href = urlFormat(source);
  return source;
}

function parseHost(host) {
  var out = {};
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    out.port = port.substr(1);
    host = host.substr(0, host.length - port.length);
  }
  if (host) out.hostname = host;
  return out;
}

},{"querystring":33}],36:[function(require,module,exports){
var events = require('events');

exports.isArray = isArray;
exports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};
exports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};


exports.print = function () {};
exports.puts = function () {};
exports.debug = function() {};

exports.inspect = function(obj, showHidden, depth, colors) {
  var seen = [];

  var stylize = function(str, styleType) {
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    var styles =
        { 'bold' : [1, 22],
          'italic' : [3, 23],
          'underline' : [4, 24],
          'inverse' : [7, 27],
          'white' : [37, 39],
          'grey' : [90, 39],
          'black' : [30, 39],
          'blue' : [34, 39],
          'cyan' : [36, 39],
          'green' : [32, 39],
          'magenta' : [35, 39],
          'red' : [31, 39],
          'yellow' : [33, 39] };

    var style =
        { 'special': 'cyan',
          'number': 'blue',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red' }[styleType];

    if (style) {
      return '\033[' + styles[style][0] + 'm' + str +
             '\033[' + styles[style][1] + 'm';
    } else {
      return str;
    }
  };
  if (! colors) {
    stylize = function(str, styleType) { return str; };
  }

  function format(value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value !== exports &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      return value.inspect(recurseTimes);
    }

    // Primitive types cannot have properties
    switch (typeof value) {
      case 'undefined':
        return stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return stylize(simple, 'string');

      case 'number':
        return stylize('' + value, 'number');

      case 'boolean':
        return stylize('' + value, 'boolean');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return stylize('null', 'null');
    }

    // Look up the keys of the object.
    var visible_keys = Object_keys(value);
    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;

    // Functions without properties can be shortcutted.
    if (typeof value === 'function' && keys.length === 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        var name = value.name ? ': ' + value.name : '';
        return stylize('[Function' + name + ']', 'special');
      }
    }

    // Dates without properties can be shortcutted
    if (isDate(value) && keys.length === 0) {
      return stylize(value.toUTCString(), 'date');
    }

    var base, type, braces;
    // Determine the object type
    if (isArray(value)) {
      type = 'Array';
      braces = ['[', ']'];
    } else {
      type = 'Object';
      braces = ['{', '}'];
    }

    // Make functions say that they are functions
    if (typeof value === 'function') {
      var n = value.name ? ': ' + value.name : '';
      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
    } else {
      base = '';
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + value.toUTCString();
    }

    if (keys.length === 0) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        return stylize('[Object]', 'special');
      }
    }

    seen.push(value);

    var output = keys.map(function(key) {
      var name, str;
      if (value.__lookupGetter__) {
        if (value.__lookupGetter__(key)) {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Getter/Setter]', 'special');
          } else {
            str = stylize('[Getter]', 'special');
          }
        } else {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Setter]', 'special');
          }
        }
      }
      if (visible_keys.indexOf(key) < 0) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (seen.indexOf(value[key]) < 0) {
          if (recurseTimes === null) {
            str = format(value[key]);
          } else {
            str = format(value[key], recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (isArray(value)) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (type === 'Array' && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    });

    seen.pop();

    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);

    if (length > 50) {
      output = braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];

    } else {
      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    return output;
  }
  return format(obj, (typeof depth === 'undefined' ? 2 : depth));
};


function isArray(ar) {
  return ar instanceof Array ||
         Array.isArray(ar) ||
         (ar && ar !== Object.prototype && isArray(ar.__proto__));
}


function isRegExp(re) {
  return re instanceof RegExp ||
    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');
}


function isDate(d) {
  if (d instanceof Date) return true;
  if (typeof d !== 'object') return false;
  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);
  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);
  return JSON.stringify(proto) === JSON.stringify(properties);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

exports.log = function (msg) {};

exports.pump = null;

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

var Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {
    var res = [];
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
};

var Object_create = Object.create || function (prototype, properties) {
    // from es5-shim
    var object;
    if (prototype === null) {
        object = { '__proto__' : null };
    }
    else {
        if (typeof prototype !== 'object') {
            throw new TypeError(
                'typeof prototype[' + (typeof prototype) + '] != \'object\''
            );
        }
        var Type = function () {};
        Type.prototype = prototype;
        object = new Type();
        object.__proto__ = prototype;
    }
    if (typeof properties !== 'undefined' && Object.defineProperties) {
        Object.defineProperties(object, properties);
    }
    return object;
};

exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object_create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (typeof f !== 'string') {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(exports.inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j': return JSON.stringify(args[i++]);
      default:
        return x;
    }
  });
  for(var x = args[i]; i < len; x = args[++i]){
    if (x === null || typeof x !== 'object') {
      str += ' ' + x;
    } else {
      str += ' ' + exports.inspect(x);
    }
  }
  return str;
};

},{"events":30}],37:[function(require,module,exports){
exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],38:[function(require,module,exports){
(function(){var assert = require('assert');
exports.Buffer = Buffer;
exports.SlowBuffer = Buffer;
Buffer.poolSize = 8192;
exports.INSPECT_MAX_BYTES = 50;

function Buffer(subject, encoding, offset) {
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }
  this.parent = this;
  this.offset = 0;

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    this.offset = offset;
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        if (subject instanceof Buffer) {
          this[i] = subject.readUInt8(i);
        }
        else {
          this[i] = subject[i];
        }
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    } else if (type === 'number') {
      for (var i = 0; i < this.length; i++) {
        this[i] = 0;
      }
    }
  }
}

Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i];
};

Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i] = v;
};

Buffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
    case 'binary':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

Buffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

Buffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

Buffer.prototype.binaryWrite = Buffer.prototype.asciiWrite;

Buffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

Buffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
};

Buffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

Buffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

Buffer.prototype.binarySlice = Buffer.prototype.asciiSlice;

Buffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


Buffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  Buffer._charsWritten = i * 2;
  return i;
};


Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};


// slice(start, end)
Buffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;

  if (end > this.length) {
    throw new Error('oob');
  }
  if (start > end) {
    throw new Error('oob');
  }

  return new Buffer(this, end - start, +start);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  if (end === undefined || isNaN(end)) {
    end = this.length;
  }
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  var temp = [];
  for (var i=start; i<end; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=target_start; i<target_start+temp.length; i++) {
    target[i] = temp[i-target_start];
  }
};

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  for (var i = start; i < end; i++) {
    this[i] = value;
  }
}

// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof Buffer;
};

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

// helpers

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}

function isArray(subject) {
  return (Array.isArray ||
    function(subject){
      return {}.toString.apply(subject) == '[object Array]'
    })
    (subject)
}

function isArrayIsh(subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

// read/write bit-twiddling

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  return buffer[offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    val = buffer[offset] << 8;
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1];
    }
  } else {
    val = buffer[offset];
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1] << 8;
    }
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    if (offset + 1 < buffer.length)
      val = buffer[offset + 1] << 16;
    if (offset + 2 < buffer.length)
      val |= buffer[offset + 2] << 8;
    if (offset + 3 < buffer.length)
      val |= buffer[offset + 3];
    val = val + (buffer[offset] << 24 >>> 0);
  } else {
    if (offset + 2 < buffer.length)
      val = buffer[offset + 2] << 16;
    if (offset + 1 < buffer.length)
      val |= buffer[offset + 1] << 8;
    val |= buffer[offset];
    if (offset + 3 < buffer.length)
      val = val + (buffer[offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  neg = buffer[offset] & 0x80;
  if (!neg) {
    return (buffer[offset]);
  }

  return ((0xff - buffer[offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  if (offset < buffer.length) {
    buffer[offset] = value;
  }
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
    buffer[offset + i] =
        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
            (isBigEndian ? 1 - i : i) * 8;
  }

}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
    buffer[offset + i] =
        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

})()
},{"./buffer_ieee754":37,"assert":29,"base64-js":39}],39:[function(require,module,exports){
(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}],40:[function(require,module,exports){
(function(){var Buffer = require('buffer').Buffer
var sha = require('./sha')
var rng = require('./rng')
var md5 = require('./md5')

var algorithms = {
  sha1: {
    hex: sha.hex_sha1,
    binary: sha.b64_sha1,
    ascii: sha.str_sha1
  },
  md5: {
    hex: md5.hex_md5,
    binary: md5.b64_md5,
    ascii: md5.any_md5
  }
}

function error () {
  var m = [].slice.call(arguments).join(' ')
  throw new Error([
    m,
    'we accept pull requests',
    'http://github.com/dominictarr/crypto-browserify'
    ].join('\n'))
}

exports.createHash = function (alg) {
  alg = alg || 'sha1'
  if(!algorithms[alg])
    error('algorithm:', alg, 'is not yet supported')
  var s = ''
  var _alg = algorithms[alg]
  return {
    update: function (data) {
      s += data
      return this
    },
    digest: function (enc) {
      enc = enc || 'binary'
      var fn
      if(!(fn = _alg[enc]))
        error('encoding:', enc , 'is not yet supported for algorithm', alg)
      var r = fn(s)
      s = null //not meant to use the hash after you've called digest.
      return r
    }
  }
}

exports.randomBytes = function(size, callback) {
  if (callback && callback.call) {
    try {
      callback.call(this, undefined, new Buffer(rng(size)));
    } catch (err) { callback(err); }
  } else {
    return new Buffer(rng(size));
  }
}

function each(a, f) {
  for(var i in a)
    f(a[i], i)
}

// the least I can do is make error messages for the rest of the node.js/crypto api.
each(['createCredentials'
, 'createHmac'
, 'createCypher'
, 'createCypheriv'
, 'createDecipher'
, 'createDecipheriv'
, 'createSign'
, 'createVerify'
, 'createDeffieHellman'
, 'pbkdf2'], function (name) {
  exports[name] = function () {
    error('sorry,', name, 'is not implemented yet')
  }
})

})()
},{"./md5":41,"./rng":42,"./sha":43,"buffer":38}],41:[function(require,module,exports){
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;   /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = "";  /* base-64 pad character. "=" for strict RFC compliance   */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_md5(s)    { return rstr2hex(rstr_md5(str2rstr_utf8(s))); }
function b64_md5(s)    { return rstr2b64(rstr_md5(str2rstr_utf8(s))); }
function any_md5(s, e) { return rstr2any(rstr_md5(str2rstr_utf8(s)), e); }
function hex_hmac_md5(k, d)
  { return rstr2hex(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function b64_hmac_md5(k, d)
  { return rstr2b64(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d))); }
function any_hmac_md5(k, d, e)
  { return rstr2any(rstr_hmac_md5(str2rstr_utf8(k), str2rstr_utf8(d)), e); }

/*
 * Perform a simple self-test to see if the VM is working
 */
function md5_vm_test()
{
  return hex_md5("abc").toLowerCase() == "900150983cd24fb0d6963f7d28e17f72";
}

/*
 * Calculate the MD5 of a raw string
 */
function rstr_md5(s)
{
  return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
}

/*
 * Calculate the HMAC-MD5, of a key and some data (raw strings)
 */
function rstr_hmac_md5(key, data)
{
  var bkey = rstr2binl(key);
  if(bkey.length > 16) bkey = binl_md5(bkey, key.length * 8);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = binl_md5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
  return binl2rstr(binl_md5(opad.concat(hash), 512 + 128));
}

/*
 * Convert a raw string to a hex string
 */
function rstr2hex(input)
{
  try { hexcase } catch(e) { hexcase=0; }
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var output = "";
  var x;
  for(var i = 0; i < input.length; i++)
  {
    x = input.charCodeAt(i);
    output += hex_tab.charAt((x >>> 4) & 0x0F)
           +  hex_tab.charAt( x        & 0x0F);
  }
  return output;
}

/*
 * Convert a raw string to a base-64 string
 */
function rstr2b64(input)
{
  try { b64pad } catch(e) { b64pad=''; }
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var output = "";
  var len = input.length;
  for(var i = 0; i < len; i += 3)
  {
    var triplet = (input.charCodeAt(i) << 16)
                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)
                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > input.length * 8) output += b64pad;
      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);
    }
  }
  return output;
}

/*
 * Convert a raw string to an arbitrary string encoding
 */
function rstr2any(input, encoding)
{
  var divisor = encoding.length;
  var i, j, q, x, quotient;

  /* Convert to an array of 16-bit big-endian values, forming the dividend */
  var dividend = Array(Math.ceil(input.length / 2));
  for(i = 0; i < dividend.length; i++)
  {
    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
  }

  /*
   * Repeatedly perform a long division. The binary array forms the dividend,
   * the length of the encoding is the divisor. Once computed, the quotient
   * forms the dividend for the next step. All remainders are stored for later
   * use.
   */
  var full_length = Math.ceil(input.length * 8 /
                                    (Math.log(encoding.length) / Math.log(2)));
  var remainders = Array(full_length);
  for(j = 0; j < full_length; j++)
  {
    quotient = Array();
    x = 0;
    for(i = 0; i < dividend.length; i++)
    {
      x = (x << 16) + dividend[i];
      q = Math.floor(x / divisor);
      x -= q * divisor;
      if(quotient.length > 0 || q > 0)
        quotient[quotient.length] = q;
    }
    remainders[j] = x;
    dividend = quotient;
  }

  /* Convert the remainders to the output string */
  var output = "";
  for(i = remainders.length - 1; i >= 0; i--)
    output += encoding.charAt(remainders[i]);

  return output;
}

/*
 * Encode a string as utf-8.
 * For efficiency, this assumes the input is valid utf-16.
 */
function str2rstr_utf8(input)
{
  var output = "";
  var i = -1;
  var x, y;

  while(++i < input.length)
  {
    /* Decode utf-16 surrogate pairs */
    x = input.charCodeAt(i);
    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)
    {
      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
      i++;
    }

    /* Encode output as utf-8 */
    if(x <= 0x7F)
      output += String.fromCharCode(x);
    else if(x <= 0x7FF)
      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0xFFFF)
      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
    else if(x <= 0x1FFFFF)
      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
                                    0x80 | ((x >>> 12) & 0x3F),
                                    0x80 | ((x >>> 6 ) & 0x3F),
                                    0x80 | ( x         & 0x3F));
  }
  return output;
}

/*
 * Encode a string as utf-16
 */
function str2rstr_utf16le(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,
                                  (input.charCodeAt(i) >>> 8) & 0xFF);
  return output;
}

function str2rstr_utf16be(input)
{
  var output = "";
  for(var i = 0; i < input.length; i++)
    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,
                                   input.charCodeAt(i)        & 0xFF);
  return output;
}

/*
 * Convert a raw string to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */
function rstr2binl(input)
{
  var output = Array(input.length >> 2);
  for(var i = 0; i < output.length; i++)
    output[i] = 0;
  for(var i = 0; i < input.length * 8; i += 8)
    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (i%32);
  return output;
}

/*
 * Convert an array of little-endian words to a string
 */
function binl2rstr(input)
{
  var output = "";
  for(var i = 0; i < input.length * 32; i += 8)
    output += String.fromCharCode((input[i>>5] >>> (i % 32)) & 0xFF);
  return output;
}

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */
function binl_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);
}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}


exports.hex_md5 = hex_md5;
exports.b64_md5 = b64_md5;
exports.any_md5 = any_md5;

},{}],42:[function(require,module,exports){
// Original code adapted from Robert Kieffer.
// details at https://github.com/broofa/node-uuid
(function() {
  var _global = this;

  var mathRNG, whatwgRNG;

  // NOTE: Math.random() does not guarantee "cryptographic quality"
  mathRNG = function(size) {
    var bytes = new Array(size);
    var r;

    for (var i = 0, r; i < size; i++) {
      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;
      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return bytes;
  }

  // currently only available in webkit-based browsers.
  if (_global.crypto && crypto.getRandomValues) {
    var _rnds = new Uint32Array(4);
    whatwgRNG = function(size) {
      var bytes = new Array(size);
      crypto.getRandomValues(_rnds);

      for (var c = 0 ; c < size; c++) {
        bytes[c] = _rnds[c >> 2] >>> ((c & 0x03) * 8) & 0xff;
      }
      return bytes;
    }
  }

  module.exports = whatwgRNG || mathRNG;

}())
},{}],43:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

exports.hex_sha1 = hex_sha1;
exports.b64_sha1 = b64_sha1;
exports.str_sha1 = str_sha1;
exports.hex_hmac_sha1 = hex_hmac_sha1;
exports.b64_hmac_sha1 = b64_hmac_sha1;
exports.str_hmac_sha1 = str_hmac_sha1;

/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */
var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
function hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}
function b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}
function str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}
function hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}
function b64_hmac_sha1(key, data){ return binb2b64(core_hmac_sha1(key, data));}
function str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}

/*
 * Perform a simple self-test to see if the VM is working
 */
function sha1_vm_test()
{
  return hex_sha1("abc") == "a9993e364706816aba3e25717850c26c9cd0d89d";
}

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function core_sha1(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << (24 - len % 32);
  x[((len + 64 >> 9) << 4) + 15] = len;

  var w = Array(80);
  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    var olde = e;

    for(var j = 0; j < 80; j++)
    {
      if(j < 16) w[j] = x[i + j];
      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return Array(a, b, c, d, e);

}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d)
{
  if(t < 20) return (b & c) | ((~b) & d);
  if(t < 40) return b ^ c ^ d;
  if(t < 60) return (b & c) | (b & d) | (c & d);
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Calculate the HMAC-SHA1 of a key and some data
 */
function core_hmac_sha1(key, data)
{
  var bkey = str2binb(key);
  if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);

  var ipad = Array(16), opad = Array(16);
  for(var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);
  return core_sha1(opad.concat(hash), 512 + 160);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

/*
 * Convert an 8-bit or 16-bit string to an array of big-endian words
 * In 8-bit function, characters >255 have their hi-byte silently ignored.
 */
function str2binb(str)
{
  var bin = Array();
  var mask = (1 << chrsz) - 1;
  for(var i = 0; i < str.length * chrsz; i += chrsz)
    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);
  return bin;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2str(bin)
{
  var str = "";
  var mask = (1 << chrsz) - 1;
  for(var i = 0; i < bin.length * 32; i += chrsz)
    str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);
  return str;
}

/*
 * Convert an array of big-endian words to a hex string.
 */
function binb2hex(binarray)
{
  var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
  var str = "";
  for(var i = 0; i < binarray.length * 4; i++)
  {
    str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +
           hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
  }
  return str;
}

/*
 * Convert an array of big-endian words to a base-64 string
 */
function binb2b64(binarray)
{
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var str = "";
  for(var i = 0; i < binarray.length * 4; i += 3)
  {
    var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)
                | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )
                |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
    for(var j = 0; j < 4; j++)
    {
      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;
      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);
    }
  }
  return str;
}


},{}],44:[function(require,module,exports){
var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');

http.request = function (params, cb) {
    if (!params) params = {};
    if (!params.host) params.host = window.location.host.split(':')[0];
    if (!params.port) params.port = window.location.port;
    if (!params.scheme) params.scheme = window.location.protocol.split(':')[0];
    
    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

},{"./lib/request":45,"events":30}],45:[function(require,module,exports){
(function(){var Stream = require('stream');
var Response = require('./response');
var concatStream = require('concat-stream')
var Buffer = require('buffer')

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = concatStream()
    
    var uri = params.host
        + (params.port ? ':' + params.port : '')
        + (params.path || '/')
    ;
    
    xhr.open(
        params.method || 'GET',
        (params.scheme || 'http') + '://' + uri,
        true
    );
    
    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) continue;
            var value = params.headers[key];
            if (isArray(value)) {
                for (var j = 0; j < value.length; j++) {
                    xhr.setRequestHeader(key, value[j]);
                }
            }
            else xhr.setRequestHeader(key, value)
        }
    }
    
    if (params.auth) {
        //basic auth
        this.setHeader('Authorization', 'Basic ' + new Buffer(params.auth).toString('base64'));
    }

    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });
    
    res.on('ready', function () {
        self.emit('response', res);
    });
    
    xhr.onreadystatechange = function () {
        res.handle(xhr);
    };
};

Request.prototype = new Stream;

Request.prototype.setHeader = function (key, value) {
    if (isArray(value)) {
        for (var i = 0; i < value.length; i++) {
            this.xhr.setRequestHeader(key, value[i]);
        }
    }
    else {
        this.xhr.setRequestHeader(key, value);
    }
};

Request.prototype.write = function (s) {
    this.body.write(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.write(s);
    this.body.end()
    this.xhr.send(this.body.getBody());
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

})()
},{"./response":46,"buffer":38,"concat-stream":47,"stream":34}],46:[function(require,module,exports){
var Stream = require('stream');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

Response.prototype = new Stream;

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;
        
        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];
            
            if (headers[key] !== undefined) {
            
                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob || xhr.response;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }
        
        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}
        
        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);
        
        if (res.error) {
            this.emit('error', this.getResponse(res));
        }
        else this.emit('end');
        
        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{"stream":34}],47:[function(require,module,exports){
(function(Buffer){var stream = require('stream')
var util = require('util')

function ConcatStream(cb) {
  stream.Stream.call(this)
  this.writable = true
  if (cb) this.cb = cb
  this.body = []
  if (this.cb) this.on('error', cb)
}

util.inherits(ConcatStream, stream.Stream)

ConcatStream.prototype.write = function(chunk) {
  this.body.push(chunk)
}

ConcatStream.prototype.arrayConcat = function(arrs) {
  if (arrs.length === 0) return []
  if (arrs.length === 1) return arrs[0]
  return arrs.reduce(function (a, b) { return a.concat(b) })
}

ConcatStream.prototype.isArray = function(arr) {
  var isArray = Array.isArray(arr)
  var isTypedArray = arr.toString().match(/Array/)
  return isArray || isTypedArray
}

ConcatStream.prototype.getBody = function () {
  if (this.body.length === 0) return
  if (typeof(this.body[0]) === "string") return this.body.join('')
  if (this.isArray(this.body[0])) return this.arrayConcat(this.body)
  if (typeof(Buffer) !== "undefined" && Buffer.isBuffer(this.body[0])) {
    return Buffer.concat(this.body)
  }
  return this.body
}

ConcatStream.prototype.end = function() {
  if (this.cb) this.cb(false, this.getBody())
}

module.exports = function(cb) {
  return new ConcatStream(cb)
}

module.exports.ConcatStream = ConcatStream

})(require("__browserify_Buffer").Buffer)
},{"__browserify_Buffer":48,"stream":34,"util":36}],48:[function(require,module,exports){
require=(function(e,t,n,r){function i(r){if(!n[r]){if(!t[r]){if(e)return e(r);throw new Error("Cannot find module '"+r+"'")}var s=n[r]={exports:{}};t[r][0](function(e){var n=t[r][1][e];return i(n?n:e)},s,s.exports)}return n[r].exports}for(var s=0;s<r.length;s++)i(r[s]);return i})(typeof require!=="undefined"&&require,{1:[function(require,module,exports){
// UTILITY
var util = require('util');
var Buffer = require("buffer").Buffer;
var pSlice = Array.prototype.slice;

function objectKeys(object) {
  if (Object.keys) return Object.keys(object);
  var result = [];
  for (var name in object) {
    if (Object.prototype.hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.message = options.message;
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
};
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (value === undefined) {
    return '' + value;
  }
  if (typeof value === 'number' && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (typeof value === 'function' || value instanceof RegExp) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (typeof s == 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

assert.AssertionError.prototype.toString = function() {
  if (this.message) {
    return [this.name + ':', this.message].join(' ');
  } else {
    return [
      this.name + ':',
      truncate(JSON.stringify(this.actual, replacer), 128),
      this.operator,
      truncate(JSON.stringify(this.expected, replacer), 128)
    ].join(' ');
  }
};

// assert.AssertionError instanceof Error

assert.AssertionError.__proto__ = Error.prototype;

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!!!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (typeof actual != 'object' && typeof expected != 'object') {
    return actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (expected instanceof RegExp) {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail('Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail('Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

},{"util":2,"buffer":3}],2:[function(require,module,exports){
var events = require('events');

exports.isArray = isArray;
exports.isDate = function(obj){return Object.prototype.toString.call(obj) === '[object Date]'};
exports.isRegExp = function(obj){return Object.prototype.toString.call(obj) === '[object RegExp]'};


exports.print = function () {};
exports.puts = function () {};
exports.debug = function() {};

exports.inspect = function(obj, showHidden, depth, colors) {
  var seen = [];

  var stylize = function(str, styleType) {
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    var styles =
        { 'bold' : [1, 22],
          'italic' : [3, 23],
          'underline' : [4, 24],
          'inverse' : [7, 27],
          'white' : [37, 39],
          'grey' : [90, 39],
          'black' : [30, 39],
          'blue' : [34, 39],
          'cyan' : [36, 39],
          'green' : [32, 39],
          'magenta' : [35, 39],
          'red' : [31, 39],
          'yellow' : [33, 39] };

    var style =
        { 'special': 'cyan',
          'number': 'blue',
          'boolean': 'yellow',
          'undefined': 'grey',
          'null': 'bold',
          'string': 'green',
          'date': 'magenta',
          // "name": intentionally not styling
          'regexp': 'red' }[styleType];

    if (style) {
      return '\033[' + styles[style][0] + 'm' + str +
             '\033[' + styles[style][1] + 'm';
    } else {
      return str;
    }
  };
  if (! colors) {
    stylize = function(str, styleType) { return str; };
  }

  function format(value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' &&
        // Filter out the util module, it's inspect function is special
        value !== exports &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      return value.inspect(recurseTimes);
    }

    // Primitive types cannot have properties
    switch (typeof value) {
      case 'undefined':
        return stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return stylize(simple, 'string');

      case 'number':
        return stylize('' + value, 'number');

      case 'boolean':
        return stylize('' + value, 'boolean');
    }
    // For some reason typeof null is "object", so special case here.
    if (value === null) {
      return stylize('null', 'null');
    }

    // Look up the keys of the object.
    var visible_keys = Object_keys(value);
    var keys = showHidden ? Object_getOwnPropertyNames(value) : visible_keys;

    // Functions without properties can be shortcutted.
    if (typeof value === 'function' && keys.length === 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        var name = value.name ? ': ' + value.name : '';
        return stylize('[Function' + name + ']', 'special');
      }
    }

    // Dates without properties can be shortcutted
    if (isDate(value) && keys.length === 0) {
      return stylize(value.toUTCString(), 'date');
    }

    var base, type, braces;
    // Determine the object type
    if (isArray(value)) {
      type = 'Array';
      braces = ['[', ']'];
    } else {
      type = 'Object';
      braces = ['{', '}'];
    }

    // Make functions say that they are functions
    if (typeof value === 'function') {
      var n = value.name ? ': ' + value.name : '';
      base = (isRegExp(value)) ? ' ' + value : ' [Function' + n + ']';
    } else {
      base = '';
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + value.toUTCString();
    }

    if (keys.length === 0) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return stylize('' + value, 'regexp');
      } else {
        return stylize('[Object]', 'special');
      }
    }

    seen.push(value);

    var output = keys.map(function(key) {
      var name, str;
      if (value.__lookupGetter__) {
        if (value.__lookupGetter__(key)) {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Getter/Setter]', 'special');
          } else {
            str = stylize('[Getter]', 'special');
          }
        } else {
          if (value.__lookupSetter__(key)) {
            str = stylize('[Setter]', 'special');
          }
        }
      }
      if (visible_keys.indexOf(key) < 0) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (seen.indexOf(value[key]) < 0) {
          if (recurseTimes === null) {
            str = format(value[key]);
          } else {
            str = format(value[key], recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (isArray(value)) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = stylize('[Circular]', 'special');
        }
      }
      if (typeof name === 'undefined') {
        if (type === 'Array' && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    });

    seen.pop();

    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.length + 1;
    }, 0);

    if (length > 50) {
      output = braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];

    } else {
      output = braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }

    return output;
  }
  return format(obj, (typeof depth === 'undefined' ? 2 : depth));
};


function isArray(ar) {
  return ar instanceof Array ||
         Array.isArray(ar) ||
         (ar && ar !== Object.prototype && isArray(ar.__proto__));
}


function isRegExp(re) {
  return re instanceof RegExp ||
    (typeof re === 'object' && Object.prototype.toString.call(re) === '[object RegExp]');
}


function isDate(d) {
  if (d instanceof Date) return true;
  if (typeof d !== 'object') return false;
  var properties = Date.prototype && Object_getOwnPropertyNames(Date.prototype);
  var proto = d.__proto__ && Object_getOwnPropertyNames(d.__proto__);
  return JSON.stringify(proto) === JSON.stringify(properties);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}

exports.log = function (msg) {};

exports.pump = null;

var Object_keys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) res.push(key);
    return res;
};

var Object_getOwnPropertyNames = Object.getOwnPropertyNames || function (obj) {
    var res = [];
    for (var key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
};

var Object_create = Object.create || function (prototype, properties) {
    // from es5-shim
    var object;
    if (prototype === null) {
        object = { '__proto__' : null };
    }
    else {
        if (typeof prototype !== 'object') {
            throw new TypeError(
                'typeof prototype[' + (typeof prototype) + '] != \'object\''
            );
        }
        var Type = function () {};
        Type.prototype = prototype;
        object = new Type();
        object.__proto__ = prototype;
    }
    if (typeof properties !== 'undefined' && Object.defineProperties) {
        Object.defineProperties(object, properties);
    }
    return object;
};

exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = Object_create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (typeof f !== 'string') {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(exports.inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j': return JSON.stringify(args[i++]);
      default:
        return x;
    }
  });
  for(var x = args[i]; i < len; x = args[++i]){
    if (x === null || typeof x !== 'object') {
      str += ' ' + x;
    } else {
      str += ' ' + exports.inspect(x);
    }
  }
  return str;
};

},{"events":4}],5:[function(require,module,exports){
exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],4:[function(require,module,exports){
(function(process){if (!process.EventEmitter) process.EventEmitter = function () {};

var EventEmitter = exports.EventEmitter = process.EventEmitter;
var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;
function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (x === xs[i]) return i;
    }
    return -1;
}

// By default EventEmitters will print a warning if more than
// 10 listeners are added to it. This is a useful default which
// helps finding memory leaks.
//
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
var defaultMaxListeners = 10;
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!this._events) this._events = {};
  this._events.maxListeners = n;
};


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {

    // Check for listener leak
    if (!this._events[type].warned) {
      var m;
      if (this._events.maxListeners !== undefined) {
        m = this._events.maxListeners;
      } else {
        m = defaultMaxListeners;
      }

      if (m && m > 0 && this._events[type].length > m) {
        this._events[type].warned = true;
        console.error('(node) warning: possible EventEmitter memory ' +
                      'leak detected. %d listeners added. ' +
                      'Use emitter.setMaxListeners() to increase limit.',
                      this._events[type].length);
        console.trace();
      }
    }

    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = indexOf(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

})(require("__browserify_process"))
},{"__browserify_process":6}],"buffer-browserify":[function(require,module,exports){
module.exports=require('q9TxCC');
},{}],"q9TxCC":[function(require,module,exports){
function SlowBuffer (size) {
    this.length = size;
};

var assert = require('assert');

exports.INSPECT_MAX_BYTES = 50;


function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

SlowBuffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
    case 'binary':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

SlowBuffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

SlowBuffer.prototype.binaryWrite = SlowBuffer.prototype.asciiWrite;

SlowBuffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

SlowBuffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

SlowBuffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

SlowBuffer.prototype.binarySlice = SlowBuffer.prototype.asciiSlice;

SlowBuffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<SlowBuffer ' + out.join(' ') + '>';
};


SlowBuffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


SlowBuffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


SlowBuffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  SlowBuffer._charsWritten = i * 2;
  return i;
};


SlowBuffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};


// slice(start, end)
SlowBuffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;

  if (end > this.length) {
    throw new Error('oob');
  }
  if (start > end) {
    throw new Error('oob');
  }

  return new Buffer(this, end - start, +start);
};

SlowBuffer.prototype.copy = function(target, targetstart, sourcestart, sourceend) {
  var temp = [];
  for (var i=sourcestart; i<sourceend; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=targetstart; i<targetstart+temp.length; i++) {
    target[i] = temp[i-targetstart];
  }
};

SlowBuffer.prototype.fill = function(value, start, end) {
  if (end > this.length) {
    throw new Error('oob');
  }
  if (start > end) {
    throw new Error('oob');
  }

  for (var i = start; i < end; i++) {
    this[i] = value;
  }
}

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}


// Buffer

function Buffer(subject, encoding, offset) {
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    this.parent = subject;
    this.offset = offset;
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    if (this.length > Buffer.poolSize) {
      // Big buffer, just alloc one.
      this.parent = new SlowBuffer(this.length);
      this.offset = 0;

    } else {
      // Small buffer.
      if (!pool || pool.length - pool.used < this.length) allocPool();
      this.parent = pool;
      this.offset = pool.used;
      pool.used += this.length;
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        if (subject instanceof Buffer) {
          this.parent[i + this.offset] = subject.readUInt8(i);
        }
        else {
          this.parent[i + this.offset] = subject[i];
        }
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    }
  }

}

function isArrayIsh(subject) {
  return Array.isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

exports.SlowBuffer = SlowBuffer;
exports.Buffer = Buffer;

Buffer.poolSize = 8 * 1024;
var pool;

function allocPool() {
  pool = new SlowBuffer(Buffer.poolSize);
  pool.used = 0;
}


// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof SlowBuffer;
};

Buffer.concat = function (list, totalLength) {
  if (!Array.isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

// Inspect
Buffer.prototype.inspect = function inspect() {
  var out = [],
      len = this.length;

  for (var i = 0; i < len; i++) {
    out[i] = toHex(this.parent[i + this.offset]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }

  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i];
};


Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i] = v;
};


// write(string, offset = 0, length = buffer.length-offset, encoding = 'utf8')
Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  var ret;
  switch (encoding) {
    case 'hex':
      ret = this.parent.hexWrite(string, this.offset + offset, length);
      break;

    case 'utf8':
    case 'utf-8':
      ret = this.parent.utf8Write(string, this.offset + offset, length);
      break;

    case 'ascii':
      ret = this.parent.asciiWrite(string, this.offset + offset, length);
      break;

    case 'binary':
      ret = this.parent.binaryWrite(string, this.offset + offset, length);
      break;

    case 'base64':
      // Warning: maxLength not taken into account in base64Write
      ret = this.parent.base64Write(string, this.offset + offset, length);
      break;

    case 'ucs2':
    case 'ucs-2':
      ret = this.parent.ucs2Write(string, this.offset + offset, length);
      break;

    default:
      throw new Error('Unknown encoding');
  }

  Buffer._charsWritten = SlowBuffer._charsWritten;

  return ret;
};


// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();

  if (typeof start == 'undefined' || start < 0) {
    start = 0;
  } else if (start > this.length) {
    start = this.length;
  }

  if (typeof end == 'undefined' || end > this.length) {
    end = this.length;
  } else if (end < 0) {
    end = 0;
  }

  start = start + this.offset;
  end = end + this.offset;

  switch (encoding) {
    case 'hex':
      return this.parent.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.parent.utf8Slice(start, end);

    case 'ascii':
      return this.parent.asciiSlice(start, end);

    case 'binary':
      return this.parent.binarySlice(start, end);

    case 'base64':
      return this.parent.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.parent.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


// byteLength
Buffer.byteLength = SlowBuffer.byteLength;


// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  return this.parent.fill(value,
                          start + this.offset,
                          end + this.offset);
};


// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  end || (end = this.length);
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  return this.parent.copy(target.parent,
                          target_start + target.offset,
                          start + this.offset,
                          end + this.offset);
};


// slice(start, end)
Buffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;
  if (end > this.length) throw new Error('oob');
  if (start > end) throw new Error('oob');

  return new Buffer(this.parent, end - start, +start + this.offset);
};


// Legacy methods for backwards compatibility.

Buffer.prototype.utf8Slice = function(start, end) {
  return this.toString('utf8', start, end);
};

Buffer.prototype.binarySlice = function(start, end) {
  return this.toString('binary', start, end);
};

Buffer.prototype.asciiSlice = function(start, end) {
  return this.toString('ascii', start, end);
};

Buffer.prototype.utf8Write = function(string, offset) {
  return this.write(string, offset, 'utf8');
};

Buffer.prototype.binaryWrite = function(string, offset) {
  return this.write(string, offset, 'binary');
};

Buffer.prototype.asciiWrite = function(string, offset) {
  return this.write(string, offset, 'ascii');
};

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  return buffer.parent[buffer.offset + offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    val = buffer.parent[buffer.offset + offset] << 8;
    if (offset + 1 < buffer.length) {
      val |= buffer.parent[buffer.offset + offset + 1];
    }
  } else {
    val = buffer.parent[buffer.offset + offset];
    if (offset + 1 < buffer.length) {
      val |= buffer.parent[buffer.offset + offset + 1] << 8;
    }
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    if (offset + 1 < buffer.length)
      val = buffer.parent[buffer.offset + offset + 1] << 16;
    if (offset + 2 < buffer.length)
      val |= buffer.parent[buffer.offset + offset + 2] << 8;
    if (offset + 3 < buffer.length)
      val |= buffer.parent[buffer.offset + offset + 3];
    val = val + (buffer.parent[buffer.offset + offset] << 24 >>> 0);
  } else {
    if (offset + 2 < buffer.length)
      val = buffer.parent[buffer.offset + offset + 2] << 16;
    if (offset + 1 < buffer.length)
      val |= buffer.parent[buffer.offset + offset + 1] << 8;
    val |= buffer.parent[buffer.offset + offset];
    if (offset + 3 < buffer.length)
      val = val + (buffer.parent[buffer.offset + offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  neg = buffer.parent[buffer.offset + offset] & 0x80;
  if (!neg) {
    return (buffer.parent[buffer.offset + offset]);
  }

  return ((0xff - buffer.parent[buffer.offset + offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  if (offset < buffer.length) {
    buffer.parent[buffer.offset + offset] = value;
  }
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
    buffer.parent[buffer.offset + offset + i] =
        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
            (isBigEndian ? 1 - i : i) * 8;
  }

}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
    buffer.parent[buffer.offset + offset + i] =
        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

SlowBuffer.prototype.readUInt8 = Buffer.prototype.readUInt8;
SlowBuffer.prototype.readUInt16LE = Buffer.prototype.readUInt16LE;
SlowBuffer.prototype.readUInt16BE = Buffer.prototype.readUInt16BE;
SlowBuffer.prototype.readUInt32LE = Buffer.prototype.readUInt32LE;
SlowBuffer.prototype.readUInt32BE = Buffer.prototype.readUInt32BE;
SlowBuffer.prototype.readInt8 = Buffer.prototype.readInt8;
SlowBuffer.prototype.readInt16LE = Buffer.prototype.readInt16LE;
SlowBuffer.prototype.readInt16BE = Buffer.prototype.readInt16BE;
SlowBuffer.prototype.readInt32LE = Buffer.prototype.readInt32LE;
SlowBuffer.prototype.readInt32BE = Buffer.prototype.readInt32BE;
SlowBuffer.prototype.readFloatLE = Buffer.prototype.readFloatLE;
SlowBuffer.prototype.readFloatBE = Buffer.prototype.readFloatBE;
SlowBuffer.prototype.readDoubleLE = Buffer.prototype.readDoubleLE;
SlowBuffer.prototype.readDoubleBE = Buffer.prototype.readDoubleBE;
SlowBuffer.prototype.writeUInt8 = Buffer.prototype.writeUInt8;
SlowBuffer.prototype.writeUInt16LE = Buffer.prototype.writeUInt16LE;
SlowBuffer.prototype.writeUInt16BE = Buffer.prototype.writeUInt16BE;
SlowBuffer.prototype.writeUInt32LE = Buffer.prototype.writeUInt32LE;
SlowBuffer.prototype.writeUInt32BE = Buffer.prototype.writeUInt32BE;
SlowBuffer.prototype.writeInt8 = Buffer.prototype.writeInt8;
SlowBuffer.prototype.writeInt16LE = Buffer.prototype.writeInt16LE;
SlowBuffer.prototype.writeInt16BE = Buffer.prototype.writeInt16BE;
SlowBuffer.prototype.writeInt32LE = Buffer.prototype.writeInt32LE;
SlowBuffer.prototype.writeInt32BE = Buffer.prototype.writeInt32BE;
SlowBuffer.prototype.writeFloatLE = Buffer.prototype.writeFloatLE;
SlowBuffer.prototype.writeFloatBE = Buffer.prototype.writeFloatBE;
SlowBuffer.prototype.writeDoubleLE = Buffer.prototype.writeDoubleLE;
SlowBuffer.prototype.writeDoubleBE = Buffer.prototype.writeDoubleBE;

},{"assert":1,"./buffer_ieee754":5,"base64-js":7}],7:[function(require,module,exports){
(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}],8:[function(require,module,exports){
exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],3:[function(require,module,exports){
function SlowBuffer (size) {
    this.length = size;
};

var assert = require('assert');

exports.INSPECT_MAX_BYTES = 50;


function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

SlowBuffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

SlowBuffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

SlowBuffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return SlowBuffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

SlowBuffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

SlowBuffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

SlowBuffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

SlowBuffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<SlowBuffer ' + out.join(' ') + '>';
};


SlowBuffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


SlowBuffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


SlowBuffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  SlowBuffer._charsWritten = i * 2;
  return i;
};


SlowBuffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};


// slice(start, end)
SlowBuffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;

  if (end > this.length) {
    throw new Error('oob');
  }
  if (start > end) {
    throw new Error('oob');
  }

  return new Buffer(this, end - start, +start);
};

SlowBuffer.prototype.copy = function(target, targetstart, sourcestart, sourceend) {
  var temp = [];
  for (var i=sourcestart; i<sourceend; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=targetstart; i<targetstart+temp.length; i++) {
    target[i] = temp[i-targetstart];
  }
};

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}


// Buffer

function Buffer(subject, encoding, offset) {
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    this.parent = subject;
    this.offset = offset;
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    if (this.length > Buffer.poolSize) {
      // Big buffer, just alloc one.
      this.parent = new SlowBuffer(this.length);
      this.offset = 0;

    } else {
      // Small buffer.
      if (!pool || pool.length - pool.used < this.length) allocPool();
      this.parent = pool;
      this.offset = pool.used;
      pool.used += this.length;
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        this.parent[i + this.offset] = subject[i];
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    }
  }

}

function isArrayIsh(subject) {
  return Array.isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

exports.SlowBuffer = SlowBuffer;
exports.Buffer = Buffer;

Buffer.poolSize = 8 * 1024;
var pool;

function allocPool() {
  pool = new SlowBuffer(Buffer.poolSize);
  pool.used = 0;
}


// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof SlowBuffer;
};

Buffer.concat = function (list, totalLength) {
  if (!Array.isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

// Inspect
Buffer.prototype.inspect = function inspect() {
  var out = [],
      len = this.length;

  for (var i = 0; i < len; i++) {
    out[i] = toHex(this.parent[i + this.offset]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }

  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i];
};


Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this.parent[this.offset + i] = v;
};


// write(string, offset = 0, length = buffer.length-offset, encoding = 'utf8')
Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  var ret;
  switch (encoding) {
    case 'hex':
      ret = this.parent.hexWrite(string, this.offset + offset, length);
      break;

    case 'utf8':
    case 'utf-8':
      ret = this.parent.utf8Write(string, this.offset + offset, length);
      break;

    case 'ascii':
      ret = this.parent.asciiWrite(string, this.offset + offset, length);
      break;

    case 'binary':
      ret = this.parent.binaryWrite(string, this.offset + offset, length);
      break;

    case 'base64':
      // Warning: maxLength not taken into account in base64Write
      ret = this.parent.base64Write(string, this.offset + offset, length);
      break;

    case 'ucs2':
    case 'ucs-2':
      ret = this.parent.ucs2Write(string, this.offset + offset, length);
      break;

    default:
      throw new Error('Unknown encoding');
  }

  Buffer._charsWritten = SlowBuffer._charsWritten;

  return ret;
};


// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();

  if (typeof start == 'undefined' || start < 0) {
    start = 0;
  } else if (start > this.length) {
    start = this.length;
  }

  if (typeof end == 'undefined' || end > this.length) {
    end = this.length;
  } else if (end < 0) {
    end = 0;
  }

  start = start + this.offset;
  end = end + this.offset;

  switch (encoding) {
    case 'hex':
      return this.parent.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.parent.utf8Slice(start, end);

    case 'ascii':
      return this.parent.asciiSlice(start, end);

    case 'binary':
      return this.parent.binarySlice(start, end);

    case 'base64':
      return this.parent.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.parent.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


// byteLength
Buffer.byteLength = SlowBuffer.byteLength;


// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  return this.parent.fill(value,
                          start + this.offset,
                          end + this.offset);
};


// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  end || (end = this.length);
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  return this.parent.copy(target.parent,
                          target_start + target.offset,
                          start + this.offset,
                          end + this.offset);
};


// slice(start, end)
Buffer.prototype.slice = function(start, end) {
  if (end === undefined) end = this.length;
  if (end > this.length) throw new Error('oob');
  if (start > end) throw new Error('oob');

  return new Buffer(this.parent, end - start, +start + this.offset);
};


// Legacy methods for backwards compatibility.

Buffer.prototype.utf8Slice = function(start, end) {
  return this.toString('utf8', start, end);
};

Buffer.prototype.binarySlice = function(start, end) {
  return this.toString('binary', start, end);
};

Buffer.prototype.asciiSlice = function(start, end) {
  return this.toString('ascii', start, end);
};

Buffer.prototype.utf8Write = function(string, offset) {
  return this.write(string, offset, 'utf8');
};

Buffer.prototype.binaryWrite = function(string, offset) {
  return this.write(string, offset, 'binary');
};

Buffer.prototype.asciiWrite = function(string, offset) {
  return this.write(string, offset, 'ascii');
};

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  return buffer.parent[buffer.offset + offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (isBigEndian) {
    val = buffer.parent[buffer.offset + offset] << 8;
    val |= buffer.parent[buffer.offset + offset + 1];
  } else {
    val = buffer.parent[buffer.offset + offset];
    val |= buffer.parent[buffer.offset + offset + 1] << 8;
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (isBigEndian) {
    val = buffer.parent[buffer.offset + offset + 1] << 16;
    val |= buffer.parent[buffer.offset + offset + 2] << 8;
    val |= buffer.parent[buffer.offset + offset + 3];
    val = val + (buffer.parent[buffer.offset + offset] << 24 >>> 0);
  } else {
    val = buffer.parent[buffer.offset + offset + 2] << 16;
    val |= buffer.parent[buffer.offset + offset + 1] << 8;
    val |= buffer.parent[buffer.offset + offset];
    val = val + (buffer.parent[buffer.offset + offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  neg = buffer.parent[buffer.offset + offset] & 0x80;
  if (!neg) {
    return (buffer.parent[buffer.offset + offset]);
  }

  return ((0xff - buffer.parent[buffer.offset + offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  buffer.parent[buffer.offset + offset] = value;
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  if (isBigEndian) {
    buffer.parent[buffer.offset + offset] = (value & 0xff00) >>> 8;
    buffer.parent[buffer.offset + offset + 1] = value & 0x00ff;
  } else {
    buffer.parent[buffer.offset + offset + 1] = (value & 0xff00) >>> 8;
    buffer.parent[buffer.offset + offset] = value & 0x00ff;
  }
}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  if (isBigEndian) {
    buffer.parent[buffer.offset + offset] = (value >>> 24) & 0xff;
    buffer.parent[buffer.offset + offset + 1] = (value >>> 16) & 0xff;
    buffer.parent[buffer.offset + offset + 2] = (value >>> 8) & 0xff;
    buffer.parent[buffer.offset + offset + 3] = value & 0xff;
  } else {
    buffer.parent[buffer.offset + offset + 3] = (value >>> 24) & 0xff;
    buffer.parent[buffer.offset + offset + 2] = (value >>> 16) & 0xff;
    buffer.parent[buffer.offset + offset + 1] = (value >>> 8) & 0xff;
    buffer.parent[buffer.offset + offset] = value & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

SlowBuffer.prototype.readUInt8 = Buffer.prototype.readUInt8;
SlowBuffer.prototype.readUInt16LE = Buffer.prototype.readUInt16LE;
SlowBuffer.prototype.readUInt16BE = Buffer.prototype.readUInt16BE;
SlowBuffer.prototype.readUInt32LE = Buffer.prototype.readUInt32LE;
SlowBuffer.prototype.readUInt32BE = Buffer.prototype.readUInt32BE;
SlowBuffer.prototype.readInt8 = Buffer.prototype.readInt8;
SlowBuffer.prototype.readInt16LE = Buffer.prototype.readInt16LE;
SlowBuffer.prototype.readInt16BE = Buffer.prototype.readInt16BE;
SlowBuffer.prototype.readInt32LE = Buffer.prototype.readInt32LE;
SlowBuffer.prototype.readInt32BE = Buffer.prototype.readInt32BE;
SlowBuffer.prototype.readFloatLE = Buffer.prototype.readFloatLE;
SlowBuffer.prototype.readFloatBE = Buffer.prototype.readFloatBE;
SlowBuffer.prototype.readDoubleLE = Buffer.prototype.readDoubleLE;
SlowBuffer.prototype.readDoubleBE = Buffer.prototype.readDoubleBE;
SlowBuffer.prototype.writeUInt8 = Buffer.prototype.writeUInt8;
SlowBuffer.prototype.writeUInt16LE = Buffer.prototype.writeUInt16LE;
SlowBuffer.prototype.writeUInt16BE = Buffer.prototype.writeUInt16BE;
SlowBuffer.prototype.writeUInt32LE = Buffer.prototype.writeUInt32LE;
SlowBuffer.prototype.writeUInt32BE = Buffer.prototype.writeUInt32BE;
SlowBuffer.prototype.writeInt8 = Buffer.prototype.writeInt8;
SlowBuffer.prototype.writeInt16LE = Buffer.prototype.writeInt16LE;
SlowBuffer.prototype.writeInt16BE = Buffer.prototype.writeInt16BE;
SlowBuffer.prototype.writeInt32LE = Buffer.prototype.writeInt32LE;
SlowBuffer.prototype.writeInt32BE = Buffer.prototype.writeInt32BE;
SlowBuffer.prototype.writeFloatLE = Buffer.prototype.writeFloatLE;
SlowBuffer.prototype.writeFloatBE = Buffer.prototype.writeFloatBE;
SlowBuffer.prototype.writeDoubleLE = Buffer.prototype.writeDoubleLE;
SlowBuffer.prototype.writeDoubleBE = Buffer.prototype.writeDoubleBE;

},{"assert":1,"./buffer_ieee754":8,"base64-js":9}],9:[function(require,module,exports){
(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}]},{},[])
;;module.exports=require("buffer-browserify")

},{}],49:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;